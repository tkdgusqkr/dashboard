
dashboard-board_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b6c  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08103e04  08103e04  00004e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08103e14  08103e14  00004e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08103e18  08103e18  00004e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  10000000  08103e1c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001e4  10000010  08103e2c  00005010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  100001f4  08103e2c  000051f4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000107b3  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002c7c  00000000  00000000  000157f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000e48  00000000  00000000  00018470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000aa6  00000000  00000000  000192b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003c0a6  00000000  00000000  00019d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00016014  00000000  00000000  00055e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0017f221  00000000  00000000  0006be18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001eb039  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003870  00000000  00000000  001eb07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000063  00000000  00000000  001ee8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08103dec 	.word	0x08103dec

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08103dec 	.word	0x08103dec

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	@ (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	@ (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	@ (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	@ (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8100308:	b480      	push	{r7}
 810030a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_SMPS_1V8_SUPPLIES_EXT) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 = (PWR->CR3 & ~(PWR_CR3_LDOEN)) | PWR_CR3_SMPSLEVEL_0 | PWR_CR3_SMPSEXTHP | PWR_CR3_SMPSEN | PWR_CR3_BYPASS;
 810030c:	4b0a      	ldr	r3, [pc, #40]	@ (8100338 <ExitRun0Mode+0x30>)
 810030e:	68db      	ldr	r3, [r3, #12]
 8100310:	f023 031f 	bic.w	r3, r3, #31
 8100314:	4a08      	ldr	r2, [pc, #32]	@ (8100338 <ExitRun0Mode+0x30>)
 8100316:	f043 031d 	orr.w	r3, r3, #29
 810031a:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 810031c:	bf00      	nop
 810031e:	4b06      	ldr	r3, [pc, #24]	@ (8100338 <ExitRun0Mode+0x30>)
 8100320:	685b      	ldr	r3, [r3, #4]
 8100322:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8100326:	2b00      	cmp	r3, #0
 8100328:	d0f9      	beq.n	810031e <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 810032a:	bf00      	nop
 810032c:	bf00      	nop
 810032e:	46bd      	mov	sp, r7
 8100330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100334:	4770      	bx	lr
 8100336:	bf00      	nop
 8100338:	58024800 	.word	0x58024800

0810033c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 810033c:	b580      	push	{r7, lr}
 810033e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8100340:	4b1a      	ldr	r3, [pc, #104]	@ (81003ac <MX_DMA2D_Init+0x70>)
 8100342:	4a1b      	ldr	r2, [pc, #108]	@ (81003b0 <MX_DMA2D_Init+0x74>)
 8100344:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_PFC;
 8100346:	4b19      	ldr	r3, [pc, #100]	@ (81003ac <MX_DMA2D_Init+0x70>)
 8100348:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 810034c:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 810034e:	4b17      	ldr	r3, [pc, #92]	@ (81003ac <MX_DMA2D_Init+0x70>)
 8100350:	2200      	movs	r2, #0
 8100352:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8100354:	4b15      	ldr	r3, [pc, #84]	@ (81003ac <MX_DMA2D_Init+0x70>)
 8100356:	2200      	movs	r2, #0
 8100358:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 810035a:	4b14      	ldr	r3, [pc, #80]	@ (81003ac <MX_DMA2D_Init+0x70>)
 810035c:	2200      	movs	r2, #0
 810035e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8100360:	4b12      	ldr	r3, [pc, #72]	@ (81003ac <MX_DMA2D_Init+0x70>)
 8100362:	2200      	movs	r2, #0
 8100364:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8100366:	4b11      	ldr	r3, [pc, #68]	@ (81003ac <MX_DMA2D_Init+0x70>)
 8100368:	2200      	movs	r2, #0
 810036a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 810036c:	4b0f      	ldr	r3, [pc, #60]	@ (81003ac <MX_DMA2D_Init+0x70>)
 810036e:	2200      	movs	r2, #0
 8100370:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8100372:	4b0e      	ldr	r3, [pc, #56]	@ (81003ac <MX_DMA2D_Init+0x70>)
 8100374:	2200      	movs	r2, #0
 8100376:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8100378:	4b0c      	ldr	r3, [pc, #48]	@ (81003ac <MX_DMA2D_Init+0x70>)
 810037a:	2200      	movs	r2, #0
 810037c:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 810037e:	4b0b      	ldr	r3, [pc, #44]	@ (81003ac <MX_DMA2D_Init+0x70>)
 8100380:	2200      	movs	r2, #0
 8100382:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8100384:	4809      	ldr	r0, [pc, #36]	@ (81003ac <MX_DMA2D_Init+0x70>)
 8100386:	f000 ffa1 	bl	81012cc <HAL_DMA2D_Init>
 810038a:	4603      	mov	r3, r0
 810038c:	2b00      	cmp	r3, #0
 810038e:	d001      	beq.n	8100394 <MX_DMA2D_Init+0x58>
  {
    Error_Handler();
 8100390:	f000 fc68 	bl	8100c64 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8100394:	2101      	movs	r1, #1
 8100396:	4805      	ldr	r0, [pc, #20]	@ (81003ac <MX_DMA2D_Init+0x70>)
 8100398:	f000 fffa 	bl	8101390 <HAL_DMA2D_ConfigLayer>
 810039c:	4603      	mov	r3, r0
 810039e:	2b00      	cmp	r3, #0
 81003a0:	d001      	beq.n	81003a6 <MX_DMA2D_Init+0x6a>
  {
    Error_Handler();
 81003a2:	f000 fc5f 	bl	8100c64 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 81003a6:	bf00      	nop
 81003a8:	bd80      	pop	{r7, pc}
 81003aa:	bf00      	nop
 81003ac:	1000002c 	.word	0x1000002c
 81003b0:	52001000 	.word	0x52001000

081003b4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 81003b4:	b480      	push	{r7}
 81003b6:	b085      	sub	sp, #20
 81003b8:	af00      	add	r7, sp, #0
 81003ba:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 81003bc:	687b      	ldr	r3, [r7, #4]
 81003be:	681b      	ldr	r3, [r3, #0]
 81003c0:	4a0b      	ldr	r2, [pc, #44]	@ (81003f0 <HAL_DMA2D_MspInit+0x3c>)
 81003c2:	4293      	cmp	r3, r2
 81003c4:	d10e      	bne.n	81003e4 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 81003c6:	4b0b      	ldr	r3, [pc, #44]	@ (81003f4 <HAL_DMA2D_MspInit+0x40>)
 81003c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81003cc:	4a09      	ldr	r2, [pc, #36]	@ (81003f4 <HAL_DMA2D_MspInit+0x40>)
 81003ce:	f043 0310 	orr.w	r3, r3, #16
 81003d2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 81003d6:	4b07      	ldr	r3, [pc, #28]	@ (81003f4 <HAL_DMA2D_MspInit+0x40>)
 81003d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81003dc:	f003 0310 	and.w	r3, r3, #16
 81003e0:	60fb      	str	r3, [r7, #12]
 81003e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 81003e4:	bf00      	nop
 81003e6:	3714      	adds	r7, #20
 81003e8:	46bd      	mov	sp, r7
 81003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003ee:	4770      	bx	lr
 81003f0:	52001000 	.word	0x52001000
 81003f4:	58024400 	.word	0x58024400

081003f8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 81003f8:	b580      	push	{r7, lr}
 81003fa:	b088      	sub	sp, #32
 81003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 81003fe:	1d3b      	adds	r3, r7, #4
 8100400:	2200      	movs	r2, #0
 8100402:	601a      	str	r2, [r3, #0]
 8100404:	605a      	str	r2, [r3, #4]
 8100406:	609a      	str	r2, [r3, #8]
 8100408:	60da      	str	r2, [r3, #12]
 810040a:	611a      	str	r2, [r3, #16]
 810040c:	615a      	str	r2, [r3, #20]
 810040e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8100410:	4b1f      	ldr	r3, [pc, #124]	@ (8100490 <MX_FMC_Init+0x98>)
 8100412:	4a20      	ldr	r2, [pc, #128]	@ (8100494 <MX_FMC_Init+0x9c>)
 8100414:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8100416:	4b1e      	ldr	r3, [pc, #120]	@ (8100490 <MX_FMC_Init+0x98>)
 8100418:	2201      	movs	r2, #1
 810041a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 810041c:	4b1c      	ldr	r3, [pc, #112]	@ (8100490 <MX_FMC_Init+0x98>)
 810041e:	2200      	movs	r2, #0
 8100420:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8100422:	4b1b      	ldr	r3, [pc, #108]	@ (8100490 <MX_FMC_Init+0x98>)
 8100424:	2204      	movs	r2, #4
 8100426:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8100428:	4b19      	ldr	r3, [pc, #100]	@ (8100490 <MX_FMC_Init+0x98>)
 810042a:	2210      	movs	r2, #16
 810042c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 810042e:	4b18      	ldr	r3, [pc, #96]	@ (8100490 <MX_FMC_Init+0x98>)
 8100430:	2240      	movs	r2, #64	@ 0x40
 8100432:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8100434:	4b16      	ldr	r3, [pc, #88]	@ (8100490 <MX_FMC_Init+0x98>)
 8100436:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 810043a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 810043c:	4b14      	ldr	r3, [pc, #80]	@ (8100490 <MX_FMC_Init+0x98>)
 810043e:	2200      	movs	r2, #0
 8100440:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8100442:	4b13      	ldr	r3, [pc, #76]	@ (8100490 <MX_FMC_Init+0x98>)
 8100444:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8100448:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 810044a:	4b11      	ldr	r3, [pc, #68]	@ (8100490 <MX_FMC_Init+0x98>)
 810044c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8100450:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8100452:	4b0f      	ldr	r3, [pc, #60]	@ (8100490 <MX_FMC_Init+0x98>)
 8100454:	2200      	movs	r2, #0
 8100456:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8100458:	2302      	movs	r3, #2
 810045a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 810045c:	2307      	movs	r3, #7
 810045e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8100460:	2304      	movs	r3, #4
 8100462:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8100464:	2307      	movs	r3, #7
 8100466:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8100468:	2303      	movs	r3, #3
 810046a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 810046c:	2302      	movs	r3, #2
 810046e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8100470:	2302      	movs	r3, #2
 8100472:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8100474:	1d3b      	adds	r3, r7, #4
 8100476:	4619      	mov	r1, r3
 8100478:	4805      	ldr	r0, [pc, #20]	@ (8100490 <MX_FMC_Init+0x98>)
 810047a:	f003 fad9 	bl	8103a30 <HAL_SDRAM_Init>
 810047e:	4603      	mov	r3, r0
 8100480:	2b00      	cmp	r3, #0
 8100482:	d001      	beq.n	8100488 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8100484:	f000 fbee 	bl	8100c64 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8100488:	bf00      	nop
 810048a:	3720      	adds	r7, #32
 810048c:	46bd      	mov	sp, r7
 810048e:	bd80      	pop	{r7, pc}
 8100490:	10000094 	.word	0x10000094
 8100494:	52004140 	.word	0x52004140

08100498 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8100498:	b580      	push	{r7, lr}
 810049a:	b0b8      	sub	sp, #224	@ 0xe0
 810049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810049e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 81004a2:	2200      	movs	r2, #0
 81004a4:	601a      	str	r2, [r3, #0]
 81004a6:	605a      	str	r2, [r3, #4]
 81004a8:	609a      	str	r2, [r3, #8]
 81004aa:	60da      	str	r2, [r3, #12]
 81004ac:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 81004ae:	4b51      	ldr	r3, [pc, #324]	@ (81005f4 <HAL_FMC_MspInit+0x15c>)
 81004b0:	681b      	ldr	r3, [r3, #0]
 81004b2:	2b00      	cmp	r3, #0
 81004b4:	f040 8099 	bne.w	81005ea <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 81004b8:	4b4e      	ldr	r3, [pc, #312]	@ (81005f4 <HAL_FMC_MspInit+0x15c>)
 81004ba:	2201      	movs	r2, #1
 81004bc:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81004be:	f107 0308 	add.w	r3, r7, #8
 81004c2:	22c0      	movs	r2, #192	@ 0xc0
 81004c4:	2100      	movs	r1, #0
 81004c6:	4618      	mov	r0, r3
 81004c8:	f003 fc64 	bl	8103d94 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 81004cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 81004d0:	f04f 0300 	mov.w	r3, #0
 81004d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 81004d8:	2300      	movs	r3, #0
 81004da:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81004dc:	f107 0308 	add.w	r3, r7, #8
 81004e0:	4618      	mov	r0, r3
 81004e2:	f001 ff37 	bl	8102354 <HAL_RCCEx_PeriphCLKConfig>
 81004e6:	4603      	mov	r3, r0
 81004e8:	2b00      	cmp	r3, #0
 81004ea:	d001      	beq.n	81004f0 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 81004ec:	f000 fbba 	bl	8100c64 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 81004f0:	4b41      	ldr	r3, [pc, #260]	@ (81005f8 <HAL_FMC_MspInit+0x160>)
 81004f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81004f6:	4a40      	ldr	r2, [pc, #256]	@ (81005f8 <HAL_FMC_MspInit+0x160>)
 81004f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 81004fc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8100500:	4b3d      	ldr	r3, [pc, #244]	@ (81005f8 <HAL_FMC_MspInit+0x160>)
 8100502:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8100506:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810050a:	607b      	str	r3, [r7, #4]
 810050c:	687b      	ldr	r3, [r7, #4]
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 810050e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8100512:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100516:	2302      	movs	r3, #2
 8100518:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 810051c:	2301      	movs	r3, #1
 810051e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100522:	2303      	movs	r3, #3
 8100524:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100528:	230c      	movs	r3, #12
 810052a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810052e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8100532:	4619      	mov	r1, r3
 8100534:	4831      	ldr	r0, [pc, #196]	@ (81005fc <HAL_FMC_MspInit+0x164>)
 8100536:	f000 ffd9 	bl	81014ec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 810053a:	f248 1333 	movw	r3, #33075	@ 0x8133
 810053e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100542:	2302      	movs	r3, #2
 8100544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8100548:	2301      	movs	r3, #1
 810054a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810054e:	2303      	movs	r3, #3
 8100550:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100554:	230c      	movs	r3, #12
 8100556:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810055a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 810055e:	4619      	mov	r1, r3
 8100560:	4827      	ldr	r0, [pc, #156]	@ (8100600 <HAL_FMC_MspInit+0x168>)
 8100562:	f000 ffc3 	bl	81014ec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8100566:	f24c 7303 	movw	r3, #50947	@ 0xc703
 810056a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810056e:	2302      	movs	r3, #2
 8100570:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8100574:	2301      	movs	r3, #1
 8100576:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810057a:	2303      	movs	r3, #3
 810057c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100580:	230c      	movs	r3, #12
 8100582:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100586:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 810058a:	4619      	mov	r1, r3
 810058c:	481d      	ldr	r0, [pc, #116]	@ (8100604 <HAL_FMC_MspInit+0x16c>)
 810058e:	f000 ffad 	bl	81014ec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8100592:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8100596:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810059a:	2302      	movs	r3, #2
 810059c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 81005a0:	2301      	movs	r3, #1
 81005a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81005a6:	2303      	movs	r3, #3
 81005a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81005ac:	230c      	movs	r3, #12
 81005ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81005b2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 81005b6:	4619      	mov	r1, r3
 81005b8:	4813      	ldr	r0, [pc, #76]	@ (8100608 <HAL_FMC_MspInit+0x170>)
 81005ba:	f000 ff97 	bl	81014ec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 81005be:	23e0      	movs	r3, #224	@ 0xe0
 81005c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81005c4:	2302      	movs	r3, #2
 81005c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 81005ca:	2301      	movs	r3, #1
 81005cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81005d0:	2303      	movs	r3, #3
 81005d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81005d6:	230c      	movs	r3, #12
 81005d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 81005dc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 81005e0:	4619      	mov	r1, r3
 81005e2:	480a      	ldr	r0, [pc, #40]	@ (810060c <HAL_FMC_MspInit+0x174>)
 81005e4:	f000 ff82 	bl	81014ec <HAL_GPIO_Init>
 81005e8:	e000      	b.n	81005ec <HAL_FMC_MspInit+0x154>
    return;
 81005ea:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 81005ec:	37e0      	adds	r7, #224	@ 0xe0
 81005ee:	46bd      	mov	sp, r7
 81005f0:	bd80      	pop	{r7, pc}
 81005f2:	bf00      	nop
 81005f4:	100000c8 	.word	0x100000c8
 81005f8:	58024400 	.word	0x58024400
 81005fc:	58021000 	.word	0x58021000
 8100600:	58021800 	.word	0x58021800
 8100604:	58020c00 	.word	0x58020c00
 8100608:	58021400 	.word	0x58021400
 810060c:	58021c00 	.word	0x58021c00

08100610 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8100610:	b580      	push	{r7, lr}
 8100612:	b082      	sub	sp, #8
 8100614:	af00      	add	r7, sp, #0
 8100616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8100618:	f7ff ff3e 	bl	8100498 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 810061c:	bf00      	nop
 810061e:	3708      	adds	r7, #8
 8100620:	46bd      	mov	sp, r7
 8100622:	bd80      	pop	{r7, pc}

08100624 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8100624:	b580      	push	{r7, lr}
 8100626:	b090      	sub	sp, #64	@ 0x40
 8100628:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810062a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810062e:	2200      	movs	r2, #0
 8100630:	601a      	str	r2, [r3, #0]
 8100632:	605a      	str	r2, [r3, #4]
 8100634:	609a      	str	r2, [r3, #8]
 8100636:	60da      	str	r2, [r3, #12]
 8100638:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 810063a:	4b6b      	ldr	r3, [pc, #428]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 810063c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100640:	4a69      	ldr	r2, [pc, #420]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 8100642:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8100646:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810064a:	4b67      	ldr	r3, [pc, #412]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 810064c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8100654:	62bb      	str	r3, [r7, #40]	@ 0x28
 8100656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100658:	4b63      	ldr	r3, [pc, #396]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 810065a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810065e:	4a62      	ldr	r2, [pc, #392]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 8100660:	f043 0304 	orr.w	r3, r3, #4
 8100664:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100668:	4b5f      	ldr	r3, [pc, #380]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 810066a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810066e:	f003 0304 	and.w	r3, r3, #4
 8100672:	627b      	str	r3, [r7, #36]	@ 0x24
 8100674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8100676:	4b5c      	ldr	r3, [pc, #368]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 8100678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810067c:	4a5a      	ldr	r2, [pc, #360]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 810067e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8100682:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100686:	4b58      	ldr	r3, [pc, #352]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 8100688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810068c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8100690:	623b      	str	r3, [r7, #32]
 8100692:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100694:	4b54      	ldr	r3, [pc, #336]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 8100696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810069a:	4a53      	ldr	r2, [pc, #332]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 810069c:	f043 0310 	orr.w	r3, r3, #16
 81006a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81006a4:	4b50      	ldr	r3, [pc, #320]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 81006a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006aa:	f003 0310 	and.w	r3, r3, #16
 81006ae:	61fb      	str	r3, [r7, #28]
 81006b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 81006b2:	4b4d      	ldr	r3, [pc, #308]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 81006b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006b8:	4a4b      	ldr	r2, [pc, #300]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 81006ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 81006be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81006c2:	4b49      	ldr	r3, [pc, #292]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 81006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81006cc:	61bb      	str	r3, [r7, #24]
 81006ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81006d0:	4b45      	ldr	r3, [pc, #276]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 81006d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006d6:	4a44      	ldr	r2, [pc, #272]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 81006d8:	f043 0308 	orr.w	r3, r3, #8
 81006dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81006e0:	4b41      	ldr	r3, [pc, #260]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 81006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006e6:	f003 0308 	and.w	r3, r3, #8
 81006ea:	617b      	str	r3, [r7, #20]
 81006ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 81006ee:	4b3e      	ldr	r3, [pc, #248]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 81006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006f4:	4a3c      	ldr	r2, [pc, #240]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 81006f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81006fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81006fe:	4b3a      	ldr	r3, [pc, #232]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 8100700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8100708:	613b      	str	r3, [r7, #16]
 810070a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 810070c:	4b36      	ldr	r3, [pc, #216]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 810070e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100712:	4a35      	ldr	r2, [pc, #212]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 8100714:	f043 0320 	orr.w	r3, r3, #32
 8100718:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810071c:	4b32      	ldr	r3, [pc, #200]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 810071e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100722:	f003 0320 	and.w	r3, r3, #32
 8100726:	60fb      	str	r3, [r7, #12]
 8100728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 810072a:	4b2f      	ldr	r3, [pc, #188]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 810072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100730:	4a2d      	ldr	r2, [pc, #180]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 8100732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8100736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810073a:	4b2b      	ldr	r3, [pc, #172]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 810073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8100744:	60bb      	str	r3, [r7, #8]
 8100746:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100748:	4b27      	ldr	r3, [pc, #156]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 810074a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810074e:	4a26      	ldr	r2, [pc, #152]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 8100750:	f043 0302 	orr.w	r3, r3, #2
 8100754:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100758:	4b23      	ldr	r3, [pc, #140]	@ (81007e8 <MX_GPIO_Init+0x1c4>)
 810075a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810075e:	f003 0302 	and.w	r3, r3, #2
 8100762:	607b      	str	r3, [r7, #4]
 8100764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);
 8100766:	2200      	movs	r2, #0
 8100768:	2180      	movs	r1, #128	@ 0x80
 810076a:	4820      	ldr	r0, [pc, #128]	@ (81007ec <MX_GPIO_Init+0x1c8>)
 810076c:	f001 f86e 	bl	810184c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8100770:	2200      	movs	r2, #0
 8100772:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8100776:	481e      	ldr	r0, [pc, #120]	@ (81007f0 <MX_GPIO_Init+0x1cc>)
 8100778:	f001 f868 	bl	810184c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 810077c:	2380      	movs	r3, #128	@ 0x80
 810077e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100780:	2301      	movs	r3, #1
 8100782:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100784:	2300      	movs	r3, #0
 8100786:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100788:	2300      	movs	r3, #0
 810078a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 810078c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8100790:	4619      	mov	r1, r3
 8100792:	4816      	ldr	r0, [pc, #88]	@ (81007ec <MX_GPIO_Init+0x1c8>)
 8100794:	f000 feaa 	bl	81014ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8100798:	2304      	movs	r3, #4
 810079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 810079c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 81007a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81007a2:	2300      	movs	r3, #0
 81007a4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 81007a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81007aa:	4619      	mov	r1, r3
 81007ac:	4811      	ldr	r0, [pc, #68]	@ (81007f4 <MX_GPIO_Init+0x1d0>)
 81007ae:	f000 fe9d 	bl	81014ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 81007b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81007b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81007b8:	2301      	movs	r3, #1
 81007ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81007bc:	2300      	movs	r3, #0
 81007be:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81007c0:	2300      	movs	r3, #0
 81007c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 81007c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 81007c8:	4619      	mov	r1, r3
 81007ca:	4809      	ldr	r0, [pc, #36]	@ (81007f0 <MX_GPIO_Init+0x1cc>)
 81007cc:	f000 fe8e 	bl	81014ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 81007d0:	2200      	movs	r2, #0
 81007d2:	2100      	movs	r1, #0
 81007d4:	2008      	movs	r0, #8
 81007d6:	f000 fcb2 	bl	810113e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 81007da:	2008      	movs	r0, #8
 81007dc:	f000 fcc9 	bl	8101172 <HAL_NVIC_EnableIRQ>

}
 81007e0:	bf00      	nop
 81007e2:	3740      	adds	r7, #64	@ 0x40
 81007e4:	46bd      	mov	sp, r7
 81007e6:	bd80      	pop	{r7, pc}
 81007e8:	58024400 	.word	0x58024400
 81007ec:	58020c00 	.word	0x58020c00
 81007f0:	58020400 	.word	0x58020400
 81007f4:	58021800 	.word	0x58021800

081007f8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 81007f8:	b580      	push	{r7, lr}
 81007fa:	b08e      	sub	sp, #56	@ 0x38
 81007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 81007fe:	1d3b      	adds	r3, r7, #4
 8100800:	2234      	movs	r2, #52	@ 0x34
 8100802:	2100      	movs	r1, #0
 8100804:	4618      	mov	r0, r3
 8100806:	f003 fac5 	bl	8103d94 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 810080a:	4b3a      	ldr	r3, [pc, #232]	@ (81008f4 <MX_LTDC_Init+0xfc>)
 810080c:	4a3a      	ldr	r2, [pc, #232]	@ (81008f8 <MX_LTDC_Init+0x100>)
 810080e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8100810:	4b38      	ldr	r3, [pc, #224]	@ (81008f4 <MX_LTDC_Init+0xfc>)
 8100812:	2200      	movs	r2, #0
 8100814:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8100816:	4b37      	ldr	r3, [pc, #220]	@ (81008f4 <MX_LTDC_Init+0xfc>)
 8100818:	2200      	movs	r2, #0
 810081a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 810081c:	4b35      	ldr	r3, [pc, #212]	@ (81008f4 <MX_LTDC_Init+0xfc>)
 810081e:	2200      	movs	r2, #0
 8100820:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8100822:	4b34      	ldr	r3, [pc, #208]	@ (81008f4 <MX_LTDC_Init+0xfc>)
 8100824:	2200      	movs	r2, #0
 8100826:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8100828:	4b32      	ldr	r3, [pc, #200]	@ (81008f4 <MX_LTDC_Init+0xfc>)
 810082a:	2228      	movs	r2, #40	@ 0x28
 810082c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 810082e:	4b31      	ldr	r3, [pc, #196]	@ (81008f4 <MX_LTDC_Init+0xfc>)
 8100830:	2209      	movs	r2, #9
 8100832:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8100834:	4b2f      	ldr	r3, [pc, #188]	@ (81008f4 <MX_LTDC_Init+0xfc>)
 8100836:	2235      	movs	r2, #53	@ 0x35
 8100838:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 810083a:	4b2e      	ldr	r3, [pc, #184]	@ (81008f4 <MX_LTDC_Init+0xfc>)
 810083c:	220b      	movs	r2, #11
 810083e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8100840:	4b2c      	ldr	r3, [pc, #176]	@ (81008f4 <MX_LTDC_Init+0xfc>)
 8100842:	f240 2215 	movw	r2, #533	@ 0x215
 8100846:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8100848:	4b2a      	ldr	r3, [pc, #168]	@ (81008f4 <MX_LTDC_Init+0xfc>)
 810084a:	f240 121b 	movw	r2, #283	@ 0x11b
 810084e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8100850:	4b28      	ldr	r3, [pc, #160]	@ (81008f4 <MX_LTDC_Init+0xfc>)
 8100852:	f240 2235 	movw	r2, #565	@ 0x235
 8100856:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8100858:	4b26      	ldr	r3, [pc, #152]	@ (81008f4 <MX_LTDC_Init+0xfc>)
 810085a:	f240 121d 	movw	r2, #285	@ 0x11d
 810085e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 255;
 8100860:	4b24      	ldr	r3, [pc, #144]	@ (81008f4 <MX_LTDC_Init+0xfc>)
 8100862:	22ff      	movs	r2, #255	@ 0xff
 8100864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 255;
 8100868:	4b22      	ldr	r3, [pc, #136]	@ (81008f4 <MX_LTDC_Init+0xfc>)
 810086a:	22ff      	movs	r2, #255	@ 0xff
 810086c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 255;
 8100870:	4b20      	ldr	r3, [pc, #128]	@ (81008f4 <MX_LTDC_Init+0xfc>)
 8100872:	22ff      	movs	r2, #255	@ 0xff
 8100874:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8100878:	481e      	ldr	r0, [pc, #120]	@ (81008f4 <MX_LTDC_Init+0xfc>)
 810087a:	f001 f837 	bl	81018ec <HAL_LTDC_Init>
 810087e:	4603      	mov	r3, r0
 8100880:	2b00      	cmp	r3, #0
 8100882:	d001      	beq.n	8100888 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8100884:	f000 f9ee 	bl	8100c64 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8100888:	2300      	movs	r3, #0
 810088a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 810088c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8100890:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8100892:	2300      	movs	r3, #0
 8100894:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8100896:	f44f 7388 	mov.w	r3, #272	@ 0x110
 810089a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 810089c:	2300      	movs	r3, #0
 810089e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 81008a0:	23ff      	movs	r3, #255	@ 0xff
 81008a2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 81008a4:	2300      	movs	r3, #0
 81008a6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 81008a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 81008ac:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 81008ae:	2305      	movs	r3, #5
 81008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 81008b2:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 81008b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 81008b8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 81008bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 81008be:	f44f 7388 	mov.w	r3, #272	@ 0x110
 81008c2:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 81008c4:	2300      	movs	r3, #0
 81008c6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 81008ca:	2300      	movs	r3, #0
 81008cc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 81008d0:	2300      	movs	r3, #0
 81008d2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 81008d6:	1d3b      	adds	r3, r7, #4
 81008d8:	2200      	movs	r2, #0
 81008da:	4619      	mov	r1, r3
 81008dc:	4805      	ldr	r0, [pc, #20]	@ (81008f4 <MX_LTDC_Init+0xfc>)
 81008de:	f001 f8a2 	bl	8101a26 <HAL_LTDC_ConfigLayer>
 81008e2:	4603      	mov	r3, r0
 81008e4:	2b00      	cmp	r3, #0
 81008e6:	d001      	beq.n	81008ec <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 81008e8:	f000 f9bc 	bl	8100c64 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 81008ec:	bf00      	nop
 81008ee:	3738      	adds	r7, #56	@ 0x38
 81008f0:	46bd      	mov	sp, r7
 81008f2:	bd80      	pop	{r7, pc}
 81008f4:	100000cc 	.word	0x100000cc
 81008f8:	50001000 	.word	0x50001000

081008fc <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 81008fc:	b580      	push	{r7, lr}
 81008fe:	b0be      	sub	sp, #248	@ 0xf8
 8100900:	af00      	add	r7, sp, #0
 8100902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100904:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8100908:	2200      	movs	r2, #0
 810090a:	601a      	str	r2, [r3, #0]
 810090c:	605a      	str	r2, [r3, #4]
 810090e:	609a      	str	r2, [r3, #8]
 8100910:	60da      	str	r2, [r3, #12]
 8100912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100914:	f107 0320 	add.w	r3, r7, #32
 8100918:	22c0      	movs	r2, #192	@ 0xc0
 810091a:	2100      	movs	r1, #0
 810091c:	4618      	mov	r0, r3
 810091e:	f003 fa39 	bl	8103d94 <memset>
  if(ltdcHandle->Instance==LTDC)
 8100922:	687b      	ldr	r3, [r7, #4]
 8100924:	681b      	ldr	r3, [r3, #0]
 8100926:	4a78      	ldr	r2, [pc, #480]	@ (8100b08 <HAL_LTDC_MspInit+0x20c>)
 8100928:	4293      	cmp	r3, r2
 810092a:	f040 80e9 	bne.w	8100b00 <HAL_LTDC_MspInit+0x204>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 810092e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8100932:	f04f 0300 	mov.w	r3, #0
 8100936:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 810093a:	2320      	movs	r3, #32
 810093c:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 810093e:	23c0      	movs	r3, #192	@ 0xc0
 8100940:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8100942:	2302      	movs	r3, #2
 8100944:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8100946:	2302      	movs	r3, #2
 8100948:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 810094a:	2302      	movs	r3, #2
 810094c:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 810094e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8100952:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8100954:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8100958:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0.0;
 810095a:	2300      	movs	r3, #0
 810095c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810095e:	f107 0320 	add.w	r3, r7, #32
 8100962:	4618      	mov	r0, r3
 8100964:	f001 fcf6 	bl	8102354 <HAL_RCCEx_PeriphCLKConfig>
 8100968:	4603      	mov	r3, r0
 810096a:	2b00      	cmp	r3, #0
 810096c:	d001      	beq.n	8100972 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 810096e:	f000 f979 	bl	8100c64 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8100972:	4b66      	ldr	r3, [pc, #408]	@ (8100b0c <HAL_LTDC_MspInit+0x210>)
 8100974:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8100978:	4a64      	ldr	r2, [pc, #400]	@ (8100b0c <HAL_LTDC_MspInit+0x210>)
 810097a:	f043 0308 	orr.w	r3, r3, #8
 810097e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8100982:	4b62      	ldr	r3, [pc, #392]	@ (8100b0c <HAL_LTDC_MspInit+0x210>)
 8100984:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8100988:	f003 0308 	and.w	r3, r3, #8
 810098c:	61fb      	str	r3, [r7, #28]
 810098e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8100990:	4b5e      	ldr	r3, [pc, #376]	@ (8100b0c <HAL_LTDC_MspInit+0x210>)
 8100992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100996:	4a5d      	ldr	r2, [pc, #372]	@ (8100b0c <HAL_LTDC_MspInit+0x210>)
 8100998:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 810099c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81009a0:	4b5a      	ldr	r3, [pc, #360]	@ (8100b0c <HAL_LTDC_MspInit+0x210>)
 81009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81009a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81009aa:	61bb      	str	r3, [r7, #24]
 81009ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81009ae:	4b57      	ldr	r3, [pc, #348]	@ (8100b0c <HAL_LTDC_MspInit+0x210>)
 81009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81009b4:	4a55      	ldr	r2, [pc, #340]	@ (8100b0c <HAL_LTDC_MspInit+0x210>)
 81009b6:	f043 0304 	orr.w	r3, r3, #4
 81009ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81009be:	4b53      	ldr	r3, [pc, #332]	@ (8100b0c <HAL_LTDC_MspInit+0x210>)
 81009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81009c4:	f003 0304 	and.w	r3, r3, #4
 81009c8:	617b      	str	r3, [r7, #20]
 81009ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 81009cc:	4b4f      	ldr	r3, [pc, #316]	@ (8100b0c <HAL_LTDC_MspInit+0x210>)
 81009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81009d2:	4a4e      	ldr	r2, [pc, #312]	@ (8100b0c <HAL_LTDC_MspInit+0x210>)
 81009d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81009d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81009dc:	4b4b      	ldr	r3, [pc, #300]	@ (8100b0c <HAL_LTDC_MspInit+0x210>)
 81009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81009e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81009e6:	613b      	str	r3, [r7, #16]
 81009e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 81009ea:	4b48      	ldr	r3, [pc, #288]	@ (8100b0c <HAL_LTDC_MspInit+0x210>)
 81009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81009f0:	4a46      	ldr	r2, [pc, #280]	@ (8100b0c <HAL_LTDC_MspInit+0x210>)
 81009f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 81009f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81009fa:	4b44      	ldr	r3, [pc, #272]	@ (8100b0c <HAL_LTDC_MspInit+0x210>)
 81009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100a00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8100a04:	60fb      	str	r3, [r7, #12]
 8100a06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8100a08:	4b40      	ldr	r3, [pc, #256]	@ (8100b0c <HAL_LTDC_MspInit+0x210>)
 8100a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100a0e:	4a3f      	ldr	r2, [pc, #252]	@ (8100b0c <HAL_LTDC_MspInit+0x210>)
 8100a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8100a14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100a18:	4b3c      	ldr	r3, [pc, #240]	@ (8100b0c <HAL_LTDC_MspInit+0x210>)
 8100a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8100a22:	60bb      	str	r3, [r7, #8]
 8100a24:	68bb      	ldr	r3, [r7, #8]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8100a26:	23fc      	movs	r3, #252	@ 0xfc
 8100a28:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100a2c:	2302      	movs	r3, #2
 8100a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100a32:	2300      	movs	r3, #0
 8100a34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100a38:	2300      	movs	r3, #0
 8100a3a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8100a3e:	230e      	movs	r3, #14
 8100a40:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8100a44:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8100a48:	4619      	mov	r1, r3
 8100a4a:	4831      	ldr	r0, [pc, #196]	@ (8100b10 <HAL_LTDC_MspInit+0x214>)
 8100a4c:	f000 fd4e 	bl	81014ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8100a50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8100a54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100a58:	2302      	movs	r3, #2
 8100a5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100a5e:	2300      	movs	r3, #0
 8100a60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100a64:	2300      	movs	r3, #0
 8100a66:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8100a6a:	230e      	movs	r3, #14
 8100a6c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8100a70:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8100a74:	4619      	mov	r1, r3
 8100a76:	4827      	ldr	r0, [pc, #156]	@ (8100b14 <HAL_LTDC_MspInit+0x218>)
 8100a78:	f000 fd38 	bl	81014ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8100a7c:	f24d 2303 	movw	r3, #53763	@ 0xd203
 8100a80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100a84:	2302      	movs	r3, #2
 8100a86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100a8a:	2300      	movs	r3, #0
 8100a8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100a90:	2300      	movs	r3, #0
 8100a92:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8100a96:	230e      	movs	r3, #14
 8100a98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8100a9c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8100aa0:	4619      	mov	r1, r3
 8100aa2:	481d      	ldr	r0, [pc, #116]	@ (8100b18 <HAL_LTDC_MspInit+0x21c>)
 8100aa4:	f000 fd22 	bl	81014ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8100aa8:	f64f 73f9 	movw	r3, #65529	@ 0xfff9
 8100aac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100ab0:	2302      	movs	r3, #2
 8100ab2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100ab6:	2300      	movs	r3, #0
 8100ab8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100abc:	2300      	movs	r3, #0
 8100abe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8100ac2:	230e      	movs	r3, #14
 8100ac4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8100ac8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8100acc:	4619      	mov	r1, r3
 8100ace:	4813      	ldr	r0, [pc, #76]	@ (8100b1c <HAL_LTDC_MspInit+0x220>)
 8100ad0:	f000 fd0c 	bl	81014ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8100ad4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8100ad8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100adc:	2302      	movs	r3, #2
 8100ade:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100ae2:	2300      	movs	r3, #0
 8100ae4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100ae8:	2300      	movs	r3, #0
 8100aea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8100aee:	230e      	movs	r3, #14
 8100af0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8100af4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8100af8:	4619      	mov	r1, r3
 8100afa:	4809      	ldr	r0, [pc, #36]	@ (8100b20 <HAL_LTDC_MspInit+0x224>)
 8100afc:	f000 fcf6 	bl	81014ec <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8100b00:	bf00      	nop
 8100b02:	37f8      	adds	r7, #248	@ 0xf8
 8100b04:	46bd      	mov	sp, r7
 8100b06:	bd80      	pop	{r7, pc}
 8100b08:	50001000 	.word	0x50001000
 8100b0c:	58024400 	.word	0x58024400
 8100b10:	58022800 	.word	0x58022800
 8100b14:	58020800 	.word	0x58020800
 8100b18:	58022000 	.word	0x58022000
 8100b1c:	58022400 	.word	0x58022400
 8100b20:	58021c00 	.word	0x58021c00

08100b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100b24:	b580      	push	{r7, lr}
 8100b26:	b082      	sub	sp, #8
 8100b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8100b2a:	f000 f849 	bl	8100bc0 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100b2e:	4b21      	ldr	r3, [pc, #132]	@ (8100bb4 <main+0x90>)
 8100b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b34:	4a1f      	ldr	r2, [pc, #124]	@ (8100bb4 <main+0x90>)
 8100b36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8100bb4 <main+0x90>)
 8100b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100b48:	607b      	str	r3, [r7, #4]
 8100b4a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100b4c:	2001      	movs	r0, #1
 8100b4e:	f000 febb 	bl	81018c8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100b52:	f001 fa77 	bl	8102044 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100b56:	2201      	movs	r2, #1
 8100b58:	2102      	movs	r1, #2
 8100b5a:	2000      	movs	r0, #0
 8100b5c:	f001 f9f8 	bl	8101f50 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100b60:	4b15      	ldr	r3, [pc, #84]	@ (8100bb8 <main+0x94>)
 8100b62:	681b      	ldr	r3, [r3, #0]
 8100b64:	091b      	lsrs	r3, r3, #4
 8100b66:	f003 030f 	and.w	r3, r3, #15
 8100b6a:	2b07      	cmp	r3, #7
 8100b6c:	d108      	bne.n	8100b80 <main+0x5c>
 8100b6e:	4b13      	ldr	r3, [pc, #76]	@ (8100bbc <main+0x98>)
 8100b70:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100b74:	4a11      	ldr	r2, [pc, #68]	@ (8100bbc <main+0x98>)
 8100b76:	f043 0301 	orr.w	r3, r3, #1
 8100b7a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100b7e:	e007      	b.n	8100b90 <main+0x6c>
 8100b80:	4b0e      	ldr	r3, [pc, #56]	@ (8100bbc <main+0x98>)
 8100b82:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100b86:	4a0d      	ldr	r2, [pc, #52]	@ (8100bbc <main+0x98>)
 8100b88:	f043 0301 	orr.w	r3, r3, #1
 8100b8c:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100b90:	f000 f946 	bl	8100e20 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100b94:	f7ff fd46 	bl	8100624 <MX_GPIO_Init>
  MX_MDMA_Init();
 8100b98:	f000 f86a 	bl	8100c70 <MX_MDMA_Init>
  MX_FMC_Init();
 8100b9c:	f7ff fc2c 	bl	81003f8 <MX_FMC_Init>
  MX_LTDC_Init();
 8100ba0:	f7ff fe2a 	bl	81007f8 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8100ba4:	f7ff fbca 	bl	810033c <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  GAS_SCHEDULER_Init();
 8100ba8:	f003 f844 	bl	8103c34 <GAS_SCHEDULER_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GAS_SCHEDULER_Run();
 8100bac:	f003 f84a 	bl	8103c44 <GAS_SCHEDULER_Run>
 8100bb0:	e7fc      	b.n	8100bac <main+0x88>
 8100bb2:	bf00      	nop
 8100bb4:	58024400 	.word	0x58024400
 8100bb8:	e000ed00 	.word	0xe000ed00
 8100bbc:	58026400 	.word	0x58026400

08100bc0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8100bc0:	b580      	push	{r7, lr}
 8100bc2:	b084      	sub	sp, #16
 8100bc4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8100bc6:	463b      	mov	r3, r7
 8100bc8:	2200      	movs	r2, #0
 8100bca:	601a      	str	r2, [r3, #0]
 8100bcc:	605a      	str	r2, [r3, #4]
 8100bce:	609a      	str	r2, [r3, #8]
 8100bd0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8100bd2:	f000 fae9 	bl	81011a8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8100bd6:	2301      	movs	r3, #1
 8100bd8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8100bda:	2300      	movs	r3, #0
 8100bdc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8100bde:	2300      	movs	r3, #0
 8100be0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8100be2:	231f      	movs	r3, #31
 8100be4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8100be6:	2387      	movs	r3, #135	@ 0x87
 8100be8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8100bea:	2300      	movs	r3, #0
 8100bec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8100bee:	2300      	movs	r3, #0
 8100bf0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8100bf2:	2301      	movs	r3, #1
 8100bf4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8100bf6:	2301      	movs	r3, #1
 8100bf8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8100bfa:	2300      	movs	r3, #0
 8100bfc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8100bfe:	2300      	movs	r3, #0
 8100c00:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8100c02:	463b      	mov	r3, r7
 8100c04:	4618      	mov	r0, r3
 8100c06:	f000 fb07 	bl	8101218 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8100c0a:	2301      	movs	r3, #1
 8100c0c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8100c0e:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8100c12:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8100c14:	2318      	movs	r3, #24
 8100c16:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8100c18:	2300      	movs	r3, #0
 8100c1a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8100c1c:	2303      	movs	r3, #3
 8100c1e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8100c20:	2300      	movs	r3, #0
 8100c22:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8100c24:	2300      	movs	r3, #0
 8100c26:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8100c28:	2301      	movs	r3, #1
 8100c2a:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8100c2c:	463b      	mov	r3, r7
 8100c2e:	4618      	mov	r0, r3
 8100c30:	f000 faf2 	bl	8101218 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8100c34:	2302      	movs	r3, #2
 8100c36:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8100c38:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8100c3c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8100c3e:	231a      	movs	r3, #26
 8100c40:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8100c42:	2301      	movs	r3, #1
 8100c44:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8100c46:	2301      	movs	r3, #1
 8100c48:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8100c4a:	2301      	movs	r3, #1
 8100c4c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8100c4e:	463b      	mov	r3, r7
 8100c50:	4618      	mov	r0, r3
 8100c52:	f000 fae1 	bl	8101218 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8100c56:	2004      	movs	r0, #4
 8100c58:	f000 fabe 	bl	81011d8 <HAL_MPU_Enable>

}
 8100c5c:	bf00      	nop
 8100c5e:	3710      	adds	r7, #16
 8100c60:	46bd      	mov	sp, r7
 8100c62:	bd80      	pop	{r7, pc}

08100c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100c64:	b480      	push	{r7}
 8100c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100c68:	b672      	cpsid	i
}
 8100c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100c6c:	bf00      	nop
 8100c6e:	e7fd      	b.n	8100c6c <Error_Handler+0x8>

08100c70 <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel0_sw_0
  */
void MX_MDMA_Init(void)
{
 8100c70:	b580      	push	{r7, lr}
 8100c72:	b082      	sub	sp, #8
 8100c74:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8100c76:	4b26      	ldr	r3, [pc, #152]	@ (8100d10 <MX_MDMA_Init+0xa0>)
 8100c78:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8100c7c:	4a24      	ldr	r2, [pc, #144]	@ (8100d10 <MX_MDMA_Init+0xa0>)
 8100c7e:	f043 0301 	orr.w	r3, r3, #1
 8100c82:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8100c86:	4b22      	ldr	r3, [pc, #136]	@ (8100d10 <MX_MDMA_Init+0xa0>)
 8100c88:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8100c8c:	f003 0301 	and.w	r3, r3, #1
 8100c90:	607b      	str	r3, [r7, #4]
 8100c92:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel0_sw_0 on MDMA_Channel0 */
  hmdma_mdma_channel0_sw_0.Instance = MDMA_Channel0;
 8100c94:	4b1f      	ldr	r3, [pc, #124]	@ (8100d14 <MX_MDMA_Init+0xa4>)
 8100c96:	4a20      	ldr	r2, [pc, #128]	@ (8100d18 <MX_MDMA_Init+0xa8>)
 8100c98:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel0_sw_0.Init.Request = MDMA_REQUEST_SW;
 8100c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8100d14 <MX_MDMA_Init+0xa4>)
 8100c9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100ca0:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel0_sw_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8100ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8100d14 <MX_MDMA_Init+0xa4>)
 8100ca4:	2200      	movs	r2, #0
 8100ca6:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel0_sw_0.Init.Priority = MDMA_PRIORITY_HIGH;
 8100ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8100d14 <MX_MDMA_Init+0xa4>)
 8100caa:	2280      	movs	r2, #128	@ 0x80
 8100cac:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel0_sw_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8100cae:	4b19      	ldr	r3, [pc, #100]	@ (8100d14 <MX_MDMA_Init+0xa4>)
 8100cb0:	2200      	movs	r2, #0
 8100cb2:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel0_sw_0.Init.SourceInc = MDMA_SRC_INC_WORD;
 8100cb4:	4b17      	ldr	r3, [pc, #92]	@ (8100d14 <MX_MDMA_Init+0xa4>)
 8100cb6:	f240 2202 	movw	r2, #514	@ 0x202
 8100cba:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel0_sw_0.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8100cbc:	4b15      	ldr	r3, [pc, #84]	@ (8100d14 <MX_MDMA_Init+0xa4>)
 8100cbe:	f640 0208 	movw	r2, #2056	@ 0x808
 8100cc2:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel0_sw_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8100cc4:	4b13      	ldr	r3, [pc, #76]	@ (8100d14 <MX_MDMA_Init+0xa4>)
 8100cc6:	2220      	movs	r2, #32
 8100cc8:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel0_sw_0.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8100cca:	4b12      	ldr	r3, [pc, #72]	@ (8100d14 <MX_MDMA_Init+0xa4>)
 8100ccc:	2280      	movs	r2, #128	@ 0x80
 8100cce:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel0_sw_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8100cd0:	4b10      	ldr	r3, [pc, #64]	@ (8100d14 <MX_MDMA_Init+0xa4>)
 8100cd2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8100cd6:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma_mdma_channel0_sw_0.Init.BufferTransferLength = 128;
 8100cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8100d14 <MX_MDMA_Init+0xa4>)
 8100cda:	2280      	movs	r2, #128	@ 0x80
 8100cdc:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma_mdma_channel0_sw_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8100cde:	4b0d      	ldr	r3, [pc, #52]	@ (8100d14 <MX_MDMA_Init+0xa4>)
 8100ce0:	2200      	movs	r2, #0
 8100ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdma_mdma_channel0_sw_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8100ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8100d14 <MX_MDMA_Init+0xa4>)
 8100ce6:	2200      	movs	r2, #0
 8100ce8:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma_mdma_channel0_sw_0.Init.SourceBlockAddressOffset = 0;
 8100cea:	4b0a      	ldr	r3, [pc, #40]	@ (8100d14 <MX_MDMA_Init+0xa4>)
 8100cec:	2200      	movs	r2, #0
 8100cee:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdma_mdma_channel0_sw_0.Init.DestBlockAddressOffset = 0;
 8100cf0:	4b08      	ldr	r3, [pc, #32]	@ (8100d14 <MX_MDMA_Init+0xa4>)
 8100cf2:	2200      	movs	r2, #0
 8100cf4:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel0_sw_0) != HAL_OK)
 8100cf6:	4807      	ldr	r0, [pc, #28]	@ (8100d14 <MX_MDMA_Init+0xa4>)
 8100cf8:	f001 f846 	bl	8101d88 <HAL_MDMA_Init>
 8100cfc:	4603      	mov	r3, r0
 8100cfe:	2b00      	cmp	r3, #0
 8100d00:	d001      	beq.n	8100d06 <MX_MDMA_Init+0x96>
  {
    Error_Handler();
 8100d02:	f7ff ffaf 	bl	8100c64 <Error_Handler>
  }

}
 8100d06:	bf00      	nop
 8100d08:	3708      	adds	r7, #8
 8100d0a:	46bd      	mov	sp, r7
 8100d0c:	bd80      	pop	{r7, pc}
 8100d0e:	bf00      	nop
 8100d10:	58024400 	.word	0x58024400
 8100d14:	10000174 	.word	0x10000174
 8100d18:	52000040 	.word	0x52000040

08100d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100d1c:	b480      	push	{r7}
 8100d1e:	b083      	sub	sp, #12
 8100d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100d22:	4b0a      	ldr	r3, [pc, #40]	@ (8100d4c <HAL_MspInit+0x30>)
 8100d24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100d28:	4a08      	ldr	r2, [pc, #32]	@ (8100d4c <HAL_MspInit+0x30>)
 8100d2a:	f043 0302 	orr.w	r3, r3, #2
 8100d2e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100d32:	4b06      	ldr	r3, [pc, #24]	@ (8100d4c <HAL_MspInit+0x30>)
 8100d34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100d38:	f003 0302 	and.w	r3, r3, #2
 8100d3c:	607b      	str	r3, [r7, #4]
 8100d3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100d40:	bf00      	nop
 8100d42:	370c      	adds	r7, #12
 8100d44:	46bd      	mov	sp, r7
 8100d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d4a:	4770      	bx	lr
 8100d4c:	58024400 	.word	0x58024400

08100d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100d50:	b480      	push	{r7}
 8100d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100d54:	bf00      	nop
 8100d56:	e7fd      	b.n	8100d54 <NMI_Handler+0x4>

08100d58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100d58:	b480      	push	{r7}
 8100d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100d5c:	bf00      	nop
 8100d5e:	e7fd      	b.n	8100d5c <HardFault_Handler+0x4>

08100d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100d60:	b480      	push	{r7}
 8100d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100d64:	bf00      	nop
 8100d66:	e7fd      	b.n	8100d64 <MemManage_Handler+0x4>

08100d68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100d68:	b480      	push	{r7}
 8100d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100d6c:	bf00      	nop
 8100d6e:	e7fd      	b.n	8100d6c <BusFault_Handler+0x4>

08100d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100d70:	b480      	push	{r7}
 8100d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100d74:	bf00      	nop
 8100d76:	e7fd      	b.n	8100d74 <UsageFault_Handler+0x4>

08100d78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100d78:	b480      	push	{r7}
 8100d7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100d7c:	bf00      	nop
 8100d7e:	46bd      	mov	sp, r7
 8100d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d84:	4770      	bx	lr

08100d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100d86:	b480      	push	{r7}
 8100d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100d8a:	bf00      	nop
 8100d8c:	46bd      	mov	sp, r7
 8100d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d92:	4770      	bx	lr

08100d94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100d94:	b480      	push	{r7}
 8100d96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100d98:	bf00      	nop
 8100d9a:	46bd      	mov	sp, r7
 8100d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100da0:	4770      	bx	lr

08100da2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100da2:	b580      	push	{r7, lr}
 8100da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100da6:	f000 f8cf 	bl	8100f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8100daa:	f000 fa75 	bl	8101298 <HAL_SYSTICK_IRQHandler>
  lv_tick_inc(1);
 8100dae:	2001      	movs	r0, #1
 8100db0:	f002 ffd8 	bl	8103d64 <lv_tick_inc>
  /* USER CODE END SysTick_IRQn 1 */
}
 8100db4:	bf00      	nop
 8100db6:	bd80      	pop	{r7, pc}

08100db8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8100db8:	b580      	push	{r7, lr}
 8100dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8100dbc:	2004      	movs	r0, #4
 8100dbe:	f000 fd5e 	bl	810187e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8100dc2:	bf00      	nop
 8100dc4:	bd80      	pop	{r7, pc}
	...

08100dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100dc8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8100e04 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8100dcc:	f7ff fa9c 	bl	8100308 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8100dd0:	f7ff fa82 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100dd4:	480c      	ldr	r0, [pc, #48]	@ (8100e08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100dd6:	490d      	ldr	r1, [pc, #52]	@ (8100e0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8100e10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100ddc:	e002      	b.n	8100de4 <LoopCopyDataInit>

08100dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100de2:	3304      	adds	r3, #4

08100de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100de8:	d3f9      	bcc.n	8100dde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100dea:	4a0a      	ldr	r2, [pc, #40]	@ (8100e14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100dec:	4c0a      	ldr	r4, [pc, #40]	@ (8100e18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100df0:	e001      	b.n	8100df6 <LoopFillZerobss>

08100df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100df4:	3204      	adds	r2, #4

08100df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100df8:	d3fb      	bcc.n	8100df2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100dfa:	f002 ffd3 	bl	8103da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100dfe:	f7ff fe91 	bl	8100b24 <main>
  bx  lr
 8100e02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100e04:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100e08:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100e0c:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8100e10:	08103e1c 	.word	0x08103e1c
  ldr r2, =_sbss
 8100e14:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8100e18:	100001f4 	.word	0x100001f4

08100e1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100e1c:	e7fe      	b.n	8100e1c <ADC3_IRQHandler>
	...

08100e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100e20:	b580      	push	{r7, lr}
 8100e22:	b082      	sub	sp, #8
 8100e24:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100e26:	4b28      	ldr	r3, [pc, #160]	@ (8100ec8 <HAL_Init+0xa8>)
 8100e28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100e2c:	4a26      	ldr	r2, [pc, #152]	@ (8100ec8 <HAL_Init+0xa8>)
 8100e2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8100e32:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100e36:	4b24      	ldr	r3, [pc, #144]	@ (8100ec8 <HAL_Init+0xa8>)
 8100e38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100e3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8100e40:	603b      	str	r3, [r7, #0]
 8100e42:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100e44:	4b21      	ldr	r3, [pc, #132]	@ (8100ecc <HAL_Init+0xac>)
 8100e46:	681b      	ldr	r3, [r3, #0]
 8100e48:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8100e4c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8100e50:	4a1e      	ldr	r2, [pc, #120]	@ (8100ecc <HAL_Init+0xac>)
 8100e52:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8100e56:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100e58:	4b1c      	ldr	r3, [pc, #112]	@ (8100ecc <HAL_Init+0xac>)
 8100e5a:	681b      	ldr	r3, [r3, #0]
 8100e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8100ecc <HAL_Init+0xac>)
 8100e5e:	f043 0301 	orr.w	r3, r3, #1
 8100e62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100e64:	2003      	movs	r0, #3
 8100e66:	f000 f95f 	bl	8101128 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100e6a:	f001 f8f9 	bl	8102060 <HAL_RCC_GetSysClockFreq>
 8100e6e:	4602      	mov	r2, r0
 8100e70:	4b15      	ldr	r3, [pc, #84]	@ (8100ec8 <HAL_Init+0xa8>)
 8100e72:	699b      	ldr	r3, [r3, #24]
 8100e74:	0a1b      	lsrs	r3, r3, #8
 8100e76:	f003 030f 	and.w	r3, r3, #15
 8100e7a:	4915      	ldr	r1, [pc, #84]	@ (8100ed0 <HAL_Init+0xb0>)
 8100e7c:	5ccb      	ldrb	r3, [r1, r3]
 8100e7e:	f003 031f 	and.w	r3, r3, #31
 8100e82:	fa22 f303 	lsr.w	r3, r2, r3
 8100e86:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100e88:	4b0f      	ldr	r3, [pc, #60]	@ (8100ec8 <HAL_Init+0xa8>)
 8100e8a:	699b      	ldr	r3, [r3, #24]
 8100e8c:	f003 030f 	and.w	r3, r3, #15
 8100e90:	4a0f      	ldr	r2, [pc, #60]	@ (8100ed0 <HAL_Init+0xb0>)
 8100e92:	5cd3      	ldrb	r3, [r2, r3]
 8100e94:	f003 031f 	and.w	r3, r3, #31
 8100e98:	687a      	ldr	r2, [r7, #4]
 8100e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8100e9e:	4a0d      	ldr	r2, [pc, #52]	@ (8100ed4 <HAL_Init+0xb4>)
 8100ea0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8100ed4 <HAL_Init+0xb4>)
 8100ea4:	681b      	ldr	r3, [r3, #0]
 8100ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8100ed8 <HAL_Init+0xb8>)
 8100ea8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100eaa:	2000      	movs	r0, #0
 8100eac:	f000 f816 	bl	8100edc <HAL_InitTick>
 8100eb0:	4603      	mov	r3, r0
 8100eb2:	2b00      	cmp	r3, #0
 8100eb4:	d001      	beq.n	8100eba <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100eb6:	2301      	movs	r3, #1
 8100eb8:	e002      	b.n	8100ec0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100eba:	f7ff ff2f 	bl	8100d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100ebe:	2300      	movs	r3, #0
}
 8100ec0:	4618      	mov	r0, r3
 8100ec2:	3708      	adds	r7, #8
 8100ec4:	46bd      	mov	sp, r7
 8100ec6:	bd80      	pop	{r7, pc}
 8100ec8:	58024400 	.word	0x58024400
 8100ecc:	40024400 	.word	0x40024400
 8100ed0:	08103e04 	.word	0x08103e04
 8100ed4:	10000004 	.word	0x10000004
 8100ed8:	10000000 	.word	0x10000000

08100edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100edc:	b580      	push	{r7, lr}
 8100ede:	b082      	sub	sp, #8
 8100ee0:	af00      	add	r7, sp, #0
 8100ee2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100ee4:	4b15      	ldr	r3, [pc, #84]	@ (8100f3c <HAL_InitTick+0x60>)
 8100ee6:	781b      	ldrb	r3, [r3, #0]
 8100ee8:	2b00      	cmp	r3, #0
 8100eea:	d101      	bne.n	8100ef0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100eec:	2301      	movs	r3, #1
 8100eee:	e021      	b.n	8100f34 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100ef0:	4b13      	ldr	r3, [pc, #76]	@ (8100f40 <HAL_InitTick+0x64>)
 8100ef2:	681a      	ldr	r2, [r3, #0]
 8100ef4:	4b11      	ldr	r3, [pc, #68]	@ (8100f3c <HAL_InitTick+0x60>)
 8100ef6:	781b      	ldrb	r3, [r3, #0]
 8100ef8:	4619      	mov	r1, r3
 8100efa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8100f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8100f06:	4618      	mov	r0, r3
 8100f08:	f000 f941 	bl	810118e <HAL_SYSTICK_Config>
 8100f0c:	4603      	mov	r3, r0
 8100f0e:	2b00      	cmp	r3, #0
 8100f10:	d001      	beq.n	8100f16 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100f12:	2301      	movs	r3, #1
 8100f14:	e00e      	b.n	8100f34 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100f16:	687b      	ldr	r3, [r7, #4]
 8100f18:	2b0f      	cmp	r3, #15
 8100f1a:	d80a      	bhi.n	8100f32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100f1c:	2200      	movs	r2, #0
 8100f1e:	6879      	ldr	r1, [r7, #4]
 8100f20:	f04f 30ff 	mov.w	r0, #4294967295
 8100f24:	f000 f90b 	bl	810113e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100f28:	4a06      	ldr	r2, [pc, #24]	@ (8100f44 <HAL_InitTick+0x68>)
 8100f2a:	687b      	ldr	r3, [r7, #4]
 8100f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100f2e:	2300      	movs	r3, #0
 8100f30:	e000      	b.n	8100f34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100f32:	2301      	movs	r3, #1
}
 8100f34:	4618      	mov	r0, r3
 8100f36:	3708      	adds	r7, #8
 8100f38:	46bd      	mov	sp, r7
 8100f3a:	bd80      	pop	{r7, pc}
 8100f3c:	1000000c 	.word	0x1000000c
 8100f40:	10000000 	.word	0x10000000
 8100f44:	10000008 	.word	0x10000008

08100f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100f48:	b480      	push	{r7}
 8100f4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100f4c:	4b06      	ldr	r3, [pc, #24]	@ (8100f68 <HAL_IncTick+0x20>)
 8100f4e:	781b      	ldrb	r3, [r3, #0]
 8100f50:	461a      	mov	r2, r3
 8100f52:	4b06      	ldr	r3, [pc, #24]	@ (8100f6c <HAL_IncTick+0x24>)
 8100f54:	681b      	ldr	r3, [r3, #0]
 8100f56:	4413      	add	r3, r2
 8100f58:	4a04      	ldr	r2, [pc, #16]	@ (8100f6c <HAL_IncTick+0x24>)
 8100f5a:	6013      	str	r3, [r2, #0]
}
 8100f5c:	bf00      	nop
 8100f5e:	46bd      	mov	sp, r7
 8100f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f64:	4770      	bx	lr
 8100f66:	bf00      	nop
 8100f68:	1000000c 	.word	0x1000000c
 8100f6c:	100001e0 	.word	0x100001e0

08100f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100f70:	b480      	push	{r7}
 8100f72:	af00      	add	r7, sp, #0
  return uwTick;
 8100f74:	4b03      	ldr	r3, [pc, #12]	@ (8100f84 <HAL_GetTick+0x14>)
 8100f76:	681b      	ldr	r3, [r3, #0]
}
 8100f78:	4618      	mov	r0, r3
 8100f7a:	46bd      	mov	sp, r7
 8100f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f80:	4770      	bx	lr
 8100f82:	bf00      	nop
 8100f84:	100001e0 	.word	0x100001e0

08100f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100f88:	b480      	push	{r7}
 8100f8a:	b085      	sub	sp, #20
 8100f8c:	af00      	add	r7, sp, #0
 8100f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100f90:	687b      	ldr	r3, [r7, #4]
 8100f92:	f003 0307 	and.w	r3, r3, #7
 8100f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100f98:	4b0c      	ldr	r3, [pc, #48]	@ (8100fcc <__NVIC_SetPriorityGrouping+0x44>)
 8100f9a:	68db      	ldr	r3, [r3, #12]
 8100f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100f9e:	68ba      	ldr	r2, [r7, #8]
 8100fa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100fa4:	4013      	ands	r3, r2
 8100fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100fa8:	68fb      	ldr	r3, [r7, #12]
 8100faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100fac:	68bb      	ldr	r3, [r7, #8]
 8100fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100fb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100fba:	4a04      	ldr	r2, [pc, #16]	@ (8100fcc <__NVIC_SetPriorityGrouping+0x44>)
 8100fbc:	68bb      	ldr	r3, [r7, #8]
 8100fbe:	60d3      	str	r3, [r2, #12]
}
 8100fc0:	bf00      	nop
 8100fc2:	3714      	adds	r7, #20
 8100fc4:	46bd      	mov	sp, r7
 8100fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fca:	4770      	bx	lr
 8100fcc:	e000ed00 	.word	0xe000ed00

08100fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100fd0:	b480      	push	{r7}
 8100fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100fd4:	4b04      	ldr	r3, [pc, #16]	@ (8100fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8100fd6:	68db      	ldr	r3, [r3, #12]
 8100fd8:	0a1b      	lsrs	r3, r3, #8
 8100fda:	f003 0307 	and.w	r3, r3, #7
}
 8100fde:	4618      	mov	r0, r3
 8100fe0:	46bd      	mov	sp, r7
 8100fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fe6:	4770      	bx	lr
 8100fe8:	e000ed00 	.word	0xe000ed00

08100fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100fec:	b480      	push	{r7}
 8100fee:	b083      	sub	sp, #12
 8100ff0:	af00      	add	r7, sp, #0
 8100ff2:	4603      	mov	r3, r0
 8100ff4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100ffa:	2b00      	cmp	r3, #0
 8100ffc:	db0b      	blt.n	8101016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100ffe:	88fb      	ldrh	r3, [r7, #6]
 8101000:	f003 021f 	and.w	r2, r3, #31
 8101004:	4907      	ldr	r1, [pc, #28]	@ (8101024 <__NVIC_EnableIRQ+0x38>)
 8101006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810100a:	095b      	lsrs	r3, r3, #5
 810100c:	2001      	movs	r0, #1
 810100e:	fa00 f202 	lsl.w	r2, r0, r2
 8101012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101016:	bf00      	nop
 8101018:	370c      	adds	r7, #12
 810101a:	46bd      	mov	sp, r7
 810101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101020:	4770      	bx	lr
 8101022:	bf00      	nop
 8101024:	e000e100 	.word	0xe000e100

08101028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101028:	b480      	push	{r7}
 810102a:	b083      	sub	sp, #12
 810102c:	af00      	add	r7, sp, #0
 810102e:	4603      	mov	r3, r0
 8101030:	6039      	str	r1, [r7, #0]
 8101032:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101034:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101038:	2b00      	cmp	r3, #0
 810103a:	db0a      	blt.n	8101052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810103c:	683b      	ldr	r3, [r7, #0]
 810103e:	b2da      	uxtb	r2, r3
 8101040:	490c      	ldr	r1, [pc, #48]	@ (8101074 <__NVIC_SetPriority+0x4c>)
 8101042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101046:	0112      	lsls	r2, r2, #4
 8101048:	b2d2      	uxtb	r2, r2
 810104a:	440b      	add	r3, r1
 810104c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101050:	e00a      	b.n	8101068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101052:	683b      	ldr	r3, [r7, #0]
 8101054:	b2da      	uxtb	r2, r3
 8101056:	4908      	ldr	r1, [pc, #32]	@ (8101078 <__NVIC_SetPriority+0x50>)
 8101058:	88fb      	ldrh	r3, [r7, #6]
 810105a:	f003 030f 	and.w	r3, r3, #15
 810105e:	3b04      	subs	r3, #4
 8101060:	0112      	lsls	r2, r2, #4
 8101062:	b2d2      	uxtb	r2, r2
 8101064:	440b      	add	r3, r1
 8101066:	761a      	strb	r2, [r3, #24]
}
 8101068:	bf00      	nop
 810106a:	370c      	adds	r7, #12
 810106c:	46bd      	mov	sp, r7
 810106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101072:	4770      	bx	lr
 8101074:	e000e100 	.word	0xe000e100
 8101078:	e000ed00 	.word	0xe000ed00

0810107c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810107c:	b480      	push	{r7}
 810107e:	b089      	sub	sp, #36	@ 0x24
 8101080:	af00      	add	r7, sp, #0
 8101082:	60f8      	str	r0, [r7, #12]
 8101084:	60b9      	str	r1, [r7, #8]
 8101086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101088:	68fb      	ldr	r3, [r7, #12]
 810108a:	f003 0307 	and.w	r3, r3, #7
 810108e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101090:	69fb      	ldr	r3, [r7, #28]
 8101092:	f1c3 0307 	rsb	r3, r3, #7
 8101096:	2b04      	cmp	r3, #4
 8101098:	bf28      	it	cs
 810109a:	2304      	movcs	r3, #4
 810109c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810109e:	69fb      	ldr	r3, [r7, #28]
 81010a0:	3304      	adds	r3, #4
 81010a2:	2b06      	cmp	r3, #6
 81010a4:	d902      	bls.n	81010ac <NVIC_EncodePriority+0x30>
 81010a6:	69fb      	ldr	r3, [r7, #28]
 81010a8:	3b03      	subs	r3, #3
 81010aa:	e000      	b.n	81010ae <NVIC_EncodePriority+0x32>
 81010ac:	2300      	movs	r3, #0
 81010ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81010b0:	f04f 32ff 	mov.w	r2, #4294967295
 81010b4:	69bb      	ldr	r3, [r7, #24]
 81010b6:	fa02 f303 	lsl.w	r3, r2, r3
 81010ba:	43da      	mvns	r2, r3
 81010bc:	68bb      	ldr	r3, [r7, #8]
 81010be:	401a      	ands	r2, r3
 81010c0:	697b      	ldr	r3, [r7, #20]
 81010c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81010c4:	f04f 31ff 	mov.w	r1, #4294967295
 81010c8:	697b      	ldr	r3, [r7, #20]
 81010ca:	fa01 f303 	lsl.w	r3, r1, r3
 81010ce:	43d9      	mvns	r1, r3
 81010d0:	687b      	ldr	r3, [r7, #4]
 81010d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81010d4:	4313      	orrs	r3, r2
         );
}
 81010d6:	4618      	mov	r0, r3
 81010d8:	3724      	adds	r7, #36	@ 0x24
 81010da:	46bd      	mov	sp, r7
 81010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010e0:	4770      	bx	lr
	...

081010e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81010e4:	b580      	push	{r7, lr}
 81010e6:	b082      	sub	sp, #8
 81010e8:	af00      	add	r7, sp, #0
 81010ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81010ec:	687b      	ldr	r3, [r7, #4]
 81010ee:	3b01      	subs	r3, #1
 81010f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81010f4:	d301      	bcc.n	81010fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81010f6:	2301      	movs	r3, #1
 81010f8:	e00f      	b.n	810111a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81010fa:	4a0a      	ldr	r2, [pc, #40]	@ (8101124 <SysTick_Config+0x40>)
 81010fc:	687b      	ldr	r3, [r7, #4]
 81010fe:	3b01      	subs	r3, #1
 8101100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101102:	210f      	movs	r1, #15
 8101104:	f04f 30ff 	mov.w	r0, #4294967295
 8101108:	f7ff ff8e 	bl	8101028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 810110c:	4b05      	ldr	r3, [pc, #20]	@ (8101124 <SysTick_Config+0x40>)
 810110e:	2200      	movs	r2, #0
 8101110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101112:	4b04      	ldr	r3, [pc, #16]	@ (8101124 <SysTick_Config+0x40>)
 8101114:	2207      	movs	r2, #7
 8101116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101118:	2300      	movs	r3, #0
}
 810111a:	4618      	mov	r0, r3
 810111c:	3708      	adds	r7, #8
 810111e:	46bd      	mov	sp, r7
 8101120:	bd80      	pop	{r7, pc}
 8101122:	bf00      	nop
 8101124:	e000e010 	.word	0xe000e010

08101128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101128:	b580      	push	{r7, lr}
 810112a:	b082      	sub	sp, #8
 810112c:	af00      	add	r7, sp, #0
 810112e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101130:	6878      	ldr	r0, [r7, #4]
 8101132:	f7ff ff29 	bl	8100f88 <__NVIC_SetPriorityGrouping>
}
 8101136:	bf00      	nop
 8101138:	3708      	adds	r7, #8
 810113a:	46bd      	mov	sp, r7
 810113c:	bd80      	pop	{r7, pc}

0810113e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810113e:	b580      	push	{r7, lr}
 8101140:	b086      	sub	sp, #24
 8101142:	af00      	add	r7, sp, #0
 8101144:	4603      	mov	r3, r0
 8101146:	60b9      	str	r1, [r7, #8]
 8101148:	607a      	str	r2, [r7, #4]
 810114a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810114c:	f7ff ff40 	bl	8100fd0 <__NVIC_GetPriorityGrouping>
 8101150:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101152:	687a      	ldr	r2, [r7, #4]
 8101154:	68b9      	ldr	r1, [r7, #8]
 8101156:	6978      	ldr	r0, [r7, #20]
 8101158:	f7ff ff90 	bl	810107c <NVIC_EncodePriority>
 810115c:	4602      	mov	r2, r0
 810115e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101162:	4611      	mov	r1, r2
 8101164:	4618      	mov	r0, r3
 8101166:	f7ff ff5f 	bl	8101028 <__NVIC_SetPriority>
}
 810116a:	bf00      	nop
 810116c:	3718      	adds	r7, #24
 810116e:	46bd      	mov	sp, r7
 8101170:	bd80      	pop	{r7, pc}

08101172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101172:	b580      	push	{r7, lr}
 8101174:	b082      	sub	sp, #8
 8101176:	af00      	add	r7, sp, #0
 8101178:	4603      	mov	r3, r0
 810117a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810117c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101180:	4618      	mov	r0, r3
 8101182:	f7ff ff33 	bl	8100fec <__NVIC_EnableIRQ>
}
 8101186:	bf00      	nop
 8101188:	3708      	adds	r7, #8
 810118a:	46bd      	mov	sp, r7
 810118c:	bd80      	pop	{r7, pc}

0810118e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810118e:	b580      	push	{r7, lr}
 8101190:	b082      	sub	sp, #8
 8101192:	af00      	add	r7, sp, #0
 8101194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101196:	6878      	ldr	r0, [r7, #4]
 8101198:	f7ff ffa4 	bl	81010e4 <SysTick_Config>
 810119c:	4603      	mov	r3, r0
}
 810119e:	4618      	mov	r0, r3
 81011a0:	3708      	adds	r7, #8
 81011a2:	46bd      	mov	sp, r7
 81011a4:	bd80      	pop	{r7, pc}
	...

081011a8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 81011a8:	b480      	push	{r7}
 81011aa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 81011ac:	f3bf 8f5f 	dmb	sy
}
 81011b0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 81011b2:	4b07      	ldr	r3, [pc, #28]	@ (81011d0 <HAL_MPU_Disable+0x28>)
 81011b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81011b6:	4a06      	ldr	r2, [pc, #24]	@ (81011d0 <HAL_MPU_Disable+0x28>)
 81011b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81011bc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 81011be:	4b05      	ldr	r3, [pc, #20]	@ (81011d4 <HAL_MPU_Disable+0x2c>)
 81011c0:	2200      	movs	r2, #0
 81011c2:	605a      	str	r2, [r3, #4]
}
 81011c4:	bf00      	nop
 81011c6:	46bd      	mov	sp, r7
 81011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011cc:	4770      	bx	lr
 81011ce:	bf00      	nop
 81011d0:	e000ed00 	.word	0xe000ed00
 81011d4:	e000ed90 	.word	0xe000ed90

081011d8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 81011d8:	b480      	push	{r7}
 81011da:	b083      	sub	sp, #12
 81011dc:	af00      	add	r7, sp, #0
 81011de:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 81011e0:	4a0b      	ldr	r2, [pc, #44]	@ (8101210 <HAL_MPU_Enable+0x38>)
 81011e2:	687b      	ldr	r3, [r7, #4]
 81011e4:	f043 0301 	orr.w	r3, r3, #1
 81011e8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 81011ea:	4b0a      	ldr	r3, [pc, #40]	@ (8101214 <HAL_MPU_Enable+0x3c>)
 81011ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81011ee:	4a09      	ldr	r2, [pc, #36]	@ (8101214 <HAL_MPU_Enable+0x3c>)
 81011f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81011f4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 81011f6:	f3bf 8f4f 	dsb	sy
}
 81011fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81011fc:	f3bf 8f6f 	isb	sy
}
 8101200:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8101202:	bf00      	nop
 8101204:	370c      	adds	r7, #12
 8101206:	46bd      	mov	sp, r7
 8101208:	f85d 7b04 	ldr.w	r7, [sp], #4
 810120c:	4770      	bx	lr
 810120e:	bf00      	nop
 8101210:	e000ed90 	.word	0xe000ed90
 8101214:	e000ed00 	.word	0xe000ed00

08101218 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8101218:	b480      	push	{r7}
 810121a:	b083      	sub	sp, #12
 810121c:	af00      	add	r7, sp, #0
 810121e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8101220:	687b      	ldr	r3, [r7, #4]
 8101222:	785a      	ldrb	r2, [r3, #1]
 8101224:	4b1b      	ldr	r3, [pc, #108]	@ (8101294 <HAL_MPU_ConfigRegion+0x7c>)
 8101226:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8101228:	4b1a      	ldr	r3, [pc, #104]	@ (8101294 <HAL_MPU_ConfigRegion+0x7c>)
 810122a:	691b      	ldr	r3, [r3, #16]
 810122c:	4a19      	ldr	r2, [pc, #100]	@ (8101294 <HAL_MPU_ConfigRegion+0x7c>)
 810122e:	f023 0301 	bic.w	r3, r3, #1
 8101232:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8101234:	4a17      	ldr	r2, [pc, #92]	@ (8101294 <HAL_MPU_ConfigRegion+0x7c>)
 8101236:	687b      	ldr	r3, [r7, #4]
 8101238:	685b      	ldr	r3, [r3, #4]
 810123a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 810123c:	687b      	ldr	r3, [r7, #4]
 810123e:	7b1b      	ldrb	r3, [r3, #12]
 8101240:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8101242:	687b      	ldr	r3, [r7, #4]
 8101244:	7adb      	ldrb	r3, [r3, #11]
 8101246:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8101248:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 810124a:	687b      	ldr	r3, [r7, #4]
 810124c:	7a9b      	ldrb	r3, [r3, #10]
 810124e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8101250:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8101252:	687b      	ldr	r3, [r7, #4]
 8101254:	7b5b      	ldrb	r3, [r3, #13]
 8101256:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8101258:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 810125a:	687b      	ldr	r3, [r7, #4]
 810125c:	7b9b      	ldrb	r3, [r3, #14]
 810125e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8101260:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8101262:	687b      	ldr	r3, [r7, #4]
 8101264:	7bdb      	ldrb	r3, [r3, #15]
 8101266:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8101268:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 810126a:	687b      	ldr	r3, [r7, #4]
 810126c:	7a5b      	ldrb	r3, [r3, #9]
 810126e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8101270:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8101272:	687b      	ldr	r3, [r7, #4]
 8101274:	7a1b      	ldrb	r3, [r3, #8]
 8101276:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8101278:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 810127a:	687a      	ldr	r2, [r7, #4]
 810127c:	7812      	ldrb	r2, [r2, #0]
 810127e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8101280:	4a04      	ldr	r2, [pc, #16]	@ (8101294 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8101282:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8101284:	6113      	str	r3, [r2, #16]
}
 8101286:	bf00      	nop
 8101288:	370c      	adds	r7, #12
 810128a:	46bd      	mov	sp, r7
 810128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101290:	4770      	bx	lr
 8101292:	bf00      	nop
 8101294:	e000ed90 	.word	0xe000ed90

08101298 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8101298:	b580      	push	{r7, lr}
 810129a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 810129c:	f002 fcf6 	bl	8103c8c <HAL_SYSTICK_Callback>
}
 81012a0:	bf00      	nop
 81012a2:	bd80      	pop	{r7, pc}

081012a4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81012a4:	b480      	push	{r7}
 81012a6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81012a8:	4b07      	ldr	r3, [pc, #28]	@ (81012c8 <HAL_GetCurrentCPUID+0x24>)
 81012aa:	681b      	ldr	r3, [r3, #0]
 81012ac:	091b      	lsrs	r3, r3, #4
 81012ae:	f003 030f 	and.w	r3, r3, #15
 81012b2:	2b07      	cmp	r3, #7
 81012b4:	d101      	bne.n	81012ba <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81012b6:	2303      	movs	r3, #3
 81012b8:	e000      	b.n	81012bc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81012ba:	2301      	movs	r3, #1
  }
}
 81012bc:	4618      	mov	r0, r3
 81012be:	46bd      	mov	sp, r7
 81012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012c4:	4770      	bx	lr
 81012c6:	bf00      	nop
 81012c8:	e000ed00 	.word	0xe000ed00

081012cc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 81012cc:	b580      	push	{r7, lr}
 81012ce:	b082      	sub	sp, #8
 81012d0:	af00      	add	r7, sp, #0
 81012d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 81012d4:	687b      	ldr	r3, [r7, #4]
 81012d6:	2b00      	cmp	r3, #0
 81012d8:	d101      	bne.n	81012de <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 81012da:	2301      	movs	r3, #1
 81012dc:	e053      	b.n	8101386 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 81012de:	687b      	ldr	r3, [r7, #4]
 81012e0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 81012e4:	b2db      	uxtb	r3, r3
 81012e6:	2b00      	cmp	r3, #0
 81012e8:	d106      	bne.n	81012f8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 81012ea:	687b      	ldr	r3, [r7, #4]
 81012ec:	2200      	movs	r2, #0
 81012ee:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 81012f2:	6878      	ldr	r0, [r7, #4]
 81012f4:	f7ff f85e 	bl	81003b4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 81012f8:	687b      	ldr	r3, [r7, #4]
 81012fa:	2202      	movs	r2, #2
 81012fc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8101300:	687b      	ldr	r3, [r7, #4]
 8101302:	681b      	ldr	r3, [r3, #0]
 8101304:	681b      	ldr	r3, [r3, #0]
 8101306:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 810130a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810130e:	687a      	ldr	r2, [r7, #4]
 8101310:	6851      	ldr	r1, [r2, #4]
 8101312:	687a      	ldr	r2, [r7, #4]
 8101314:	69d2      	ldr	r2, [r2, #28]
 8101316:	4311      	orrs	r1, r2
 8101318:	687a      	ldr	r2, [r7, #4]
 810131a:	6812      	ldr	r2, [r2, #0]
 810131c:	430b      	orrs	r3, r1
 810131e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8101320:	687b      	ldr	r3, [r7, #4]
 8101322:	681b      	ldr	r3, [r3, #0]
 8101324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8101326:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 810132a:	f023 0301 	bic.w	r3, r3, #1
 810132e:	687a      	ldr	r2, [r7, #4]
 8101330:	6891      	ldr	r1, [r2, #8]
 8101332:	687a      	ldr	r2, [r7, #4]
 8101334:	6992      	ldr	r2, [r2, #24]
 8101336:	4311      	orrs	r1, r2
 8101338:	687a      	ldr	r2, [r7, #4]
 810133a:	6812      	ldr	r2, [r2, #0]
 810133c:	430b      	orrs	r3, r1
 810133e:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8101340:	687b      	ldr	r3, [r7, #4]
 8101342:	681b      	ldr	r3, [r3, #0]
 8101344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101346:	0c1b      	lsrs	r3, r3, #16
 8101348:	041b      	lsls	r3, r3, #16
 810134a:	687a      	ldr	r2, [r7, #4]
 810134c:	68d1      	ldr	r1, [r2, #12]
 810134e:	687a      	ldr	r2, [r7, #4]
 8101350:	6812      	ldr	r2, [r2, #0]
 8101352:	430b      	orrs	r3, r1
 8101354:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8101356:	687b      	ldr	r3, [r7, #4]
 8101358:	681b      	ldr	r3, [r3, #0]
 810135a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810135c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8101360:	687b      	ldr	r3, [r7, #4]
 8101362:	691b      	ldr	r3, [r3, #16]
 8101364:	051a      	lsls	r2, r3, #20
 8101366:	687b      	ldr	r3, [r7, #4]
 8101368:	695b      	ldr	r3, [r3, #20]
 810136a:	055b      	lsls	r3, r3, #21
 810136c:	431a      	orrs	r2, r3
 810136e:	687b      	ldr	r3, [r7, #4]
 8101370:	681b      	ldr	r3, [r3, #0]
 8101372:	430a      	orrs	r2, r1
 8101374:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8101376:	687b      	ldr	r3, [r7, #4]
 8101378:	2200      	movs	r2, #0
 810137a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 810137c:	687b      	ldr	r3, [r7, #4]
 810137e:	2201      	movs	r2, #1
 8101380:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8101384:	2300      	movs	r3, #0
}
 8101386:	4618      	mov	r0, r3
 8101388:	3708      	adds	r7, #8
 810138a:	46bd      	mov	sp, r7
 810138c:	bd80      	pop	{r7, pc}
	...

08101390 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8101390:	b480      	push	{r7}
 8101392:	b087      	sub	sp, #28
 8101394:	af00      	add	r7, sp, #0
 8101396:	6078      	str	r0, [r7, #4]
 8101398:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 810139a:	687b      	ldr	r3, [r7, #4]
 810139c:	685b      	ldr	r3, [r3, #4]
 810139e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 81013a2:	683b      	ldr	r3, [r7, #0]
 81013a4:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 81013a6:	687b      	ldr	r3, [r7, #4]
 81013a8:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 81013ac:	2b01      	cmp	r3, #1
 81013ae:	d101      	bne.n	81013b4 <HAL_DMA2D_ConfigLayer+0x24>
 81013b0:	2302      	movs	r3, #2
 81013b2:	e092      	b.n	81014da <HAL_DMA2D_ConfigLayer+0x14a>
 81013b4:	687b      	ldr	r3, [r7, #4]
 81013b6:	2201      	movs	r2, #1
 81013b8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 81013bc:	687b      	ldr	r3, [r7, #4]
 81013be:	2202      	movs	r2, #2
 81013c0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 81013c4:	683a      	ldr	r2, [r7, #0]
 81013c6:	4613      	mov	r3, r2
 81013c8:	00db      	lsls	r3, r3, #3
 81013ca:	1a9b      	subs	r3, r3, r2
 81013cc:	009b      	lsls	r3, r3, #2
 81013ce:	3328      	adds	r3, #40	@ 0x28
 81013d0:	687a      	ldr	r2, [r7, #4]
 81013d2:	4413      	add	r3, r2
 81013d4:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 81013d6:	68fb      	ldr	r3, [r7, #12]
 81013d8:	685a      	ldr	r2, [r3, #4]
 81013da:	68fb      	ldr	r3, [r7, #12]
 81013dc:	689b      	ldr	r3, [r3, #8]
 81013de:	041b      	lsls	r3, r3, #16
 81013e0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 81013e2:	68fb      	ldr	r3, [r7, #12]
 81013e4:	691b      	ldr	r3, [r3, #16]
 81013e6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 81013e8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 81013ea:	68fb      	ldr	r3, [r7, #12]
 81013ec:	695b      	ldr	r3, [r3, #20]
 81013ee:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 81013f0:	4313      	orrs	r3, r2
 81013f2:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 81013f4:	4b3c      	ldr	r3, [pc, #240]	@ (81014e8 <HAL_DMA2D_ConfigLayer+0x158>)
 81013f6:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 81013f8:	68fb      	ldr	r3, [r7, #12]
 81013fa:	685b      	ldr	r3, [r3, #4]
 81013fc:	2b0a      	cmp	r3, #10
 81013fe:	d003      	beq.n	8101408 <HAL_DMA2D_ConfigLayer+0x78>
 8101400:	68fb      	ldr	r3, [r7, #12]
 8101402:	685b      	ldr	r3, [r3, #4]
 8101404:	2b09      	cmp	r3, #9
 8101406:	d107      	bne.n	8101418 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8101408:	68fb      	ldr	r3, [r7, #12]
 810140a:	68db      	ldr	r3, [r3, #12]
 810140c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8101410:	693a      	ldr	r2, [r7, #16]
 8101412:	4313      	orrs	r3, r2
 8101414:	613b      	str	r3, [r7, #16]
 8101416:	e005      	b.n	8101424 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8101418:	68fb      	ldr	r3, [r7, #12]
 810141a:	68db      	ldr	r3, [r3, #12]
 810141c:	061b      	lsls	r3, r3, #24
 810141e:	693a      	ldr	r2, [r7, #16]
 8101420:	4313      	orrs	r3, r2
 8101422:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8101424:	683b      	ldr	r3, [r7, #0]
 8101426:	2b00      	cmp	r3, #0
 8101428:	d120      	bne.n	810146c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 810142a:	687b      	ldr	r3, [r7, #4]
 810142c:	681b      	ldr	r3, [r3, #0]
 810142e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8101430:	697b      	ldr	r3, [r7, #20]
 8101432:	43db      	mvns	r3, r3
 8101434:	ea02 0103 	and.w	r1, r2, r3
 8101438:	687b      	ldr	r3, [r7, #4]
 810143a:	681b      	ldr	r3, [r3, #0]
 810143c:	693a      	ldr	r2, [r7, #16]
 810143e:	430a      	orrs	r2, r1
 8101440:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8101442:	687b      	ldr	r3, [r7, #4]
 8101444:	681b      	ldr	r3, [r3, #0]
 8101446:	68fa      	ldr	r2, [r7, #12]
 8101448:	6812      	ldr	r2, [r2, #0]
 810144a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 810144c:	68fb      	ldr	r3, [r7, #12]
 810144e:	685b      	ldr	r3, [r3, #4]
 8101450:	2b0a      	cmp	r3, #10
 8101452:	d003      	beq.n	810145c <HAL_DMA2D_ConfigLayer+0xcc>
 8101454:	68fb      	ldr	r3, [r7, #12]
 8101456:	685b      	ldr	r3, [r3, #4]
 8101458:	2b09      	cmp	r3, #9
 810145a:	d135      	bne.n	81014c8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 810145c:	68fb      	ldr	r3, [r7, #12]
 810145e:	68da      	ldr	r2, [r3, #12]
 8101460:	687b      	ldr	r3, [r7, #4]
 8101462:	681b      	ldr	r3, [r3, #0]
 8101464:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8101468:	629a      	str	r2, [r3, #40]	@ 0x28
 810146a:	e02d      	b.n	81014c8 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 810146c:	68fb      	ldr	r3, [r7, #12]
 810146e:	685b      	ldr	r3, [r3, #4]
 8101470:	2b0b      	cmp	r3, #11
 8101472:	d109      	bne.n	8101488 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8101474:	68fb      	ldr	r3, [r7, #12]
 8101476:	699b      	ldr	r3, [r3, #24]
 8101478:	049b      	lsls	r3, r3, #18
 810147a:	693a      	ldr	r2, [r7, #16]
 810147c:	4313      	orrs	r3, r2
 810147e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8101480:	697b      	ldr	r3, [r7, #20]
 8101482:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8101486:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8101488:	687b      	ldr	r3, [r7, #4]
 810148a:	681b      	ldr	r3, [r3, #0]
 810148c:	69da      	ldr	r2, [r3, #28]
 810148e:	697b      	ldr	r3, [r7, #20]
 8101490:	43db      	mvns	r3, r3
 8101492:	ea02 0103 	and.w	r1, r2, r3
 8101496:	687b      	ldr	r3, [r7, #4]
 8101498:	681b      	ldr	r3, [r3, #0]
 810149a:	693a      	ldr	r2, [r7, #16]
 810149c:	430a      	orrs	r2, r1
 810149e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 81014a0:	687b      	ldr	r3, [r7, #4]
 81014a2:	681b      	ldr	r3, [r3, #0]
 81014a4:	68fa      	ldr	r2, [r7, #12]
 81014a6:	6812      	ldr	r2, [r2, #0]
 81014a8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 81014aa:	68fb      	ldr	r3, [r7, #12]
 81014ac:	685b      	ldr	r3, [r3, #4]
 81014ae:	2b0a      	cmp	r3, #10
 81014b0:	d003      	beq.n	81014ba <HAL_DMA2D_ConfigLayer+0x12a>
 81014b2:	68fb      	ldr	r3, [r7, #12]
 81014b4:	685b      	ldr	r3, [r3, #4]
 81014b6:	2b09      	cmp	r3, #9
 81014b8:	d106      	bne.n	81014c8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 81014ba:	68fb      	ldr	r3, [r7, #12]
 81014bc:	68da      	ldr	r2, [r3, #12]
 81014be:	687b      	ldr	r3, [r7, #4]
 81014c0:	681b      	ldr	r3, [r3, #0]
 81014c2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 81014c6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 81014c8:	687b      	ldr	r3, [r7, #4]
 81014ca:	2201      	movs	r2, #1
 81014cc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 81014d0:	687b      	ldr	r3, [r7, #4]
 81014d2:	2200      	movs	r2, #0
 81014d4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 81014d8:	2300      	movs	r3, #0
}
 81014da:	4618      	mov	r0, r3
 81014dc:	371c      	adds	r7, #28
 81014de:	46bd      	mov	sp, r7
 81014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014e4:	4770      	bx	lr
 81014e6:	bf00      	nop
 81014e8:	ff33000f 	.word	0xff33000f

081014ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 81014ec:	b480      	push	{r7}
 81014ee:	b089      	sub	sp, #36	@ 0x24
 81014f0:	af00      	add	r7, sp, #0
 81014f2:	6078      	str	r0, [r7, #4]
 81014f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81014f6:	2300      	movs	r3, #0
 81014f8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81014fa:	4b89      	ldr	r3, [pc, #548]	@ (8101720 <HAL_GPIO_Init+0x234>)
 81014fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81014fe:	e194      	b.n	810182a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101500:	683b      	ldr	r3, [r7, #0]
 8101502:	681a      	ldr	r2, [r3, #0]
 8101504:	2101      	movs	r1, #1
 8101506:	69fb      	ldr	r3, [r7, #28]
 8101508:	fa01 f303 	lsl.w	r3, r1, r3
 810150c:	4013      	ands	r3, r2
 810150e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101510:	693b      	ldr	r3, [r7, #16]
 8101512:	2b00      	cmp	r3, #0
 8101514:	f000 8186 	beq.w	8101824 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8101518:	683b      	ldr	r3, [r7, #0]
 810151a:	685b      	ldr	r3, [r3, #4]
 810151c:	f003 0303 	and.w	r3, r3, #3
 8101520:	2b01      	cmp	r3, #1
 8101522:	d005      	beq.n	8101530 <HAL_GPIO_Init+0x44>
 8101524:	683b      	ldr	r3, [r7, #0]
 8101526:	685b      	ldr	r3, [r3, #4]
 8101528:	f003 0303 	and.w	r3, r3, #3
 810152c:	2b02      	cmp	r3, #2
 810152e:	d130      	bne.n	8101592 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101530:	687b      	ldr	r3, [r7, #4]
 8101532:	689b      	ldr	r3, [r3, #8]
 8101534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101536:	69fb      	ldr	r3, [r7, #28]
 8101538:	005b      	lsls	r3, r3, #1
 810153a:	2203      	movs	r2, #3
 810153c:	fa02 f303 	lsl.w	r3, r2, r3
 8101540:	43db      	mvns	r3, r3
 8101542:	69ba      	ldr	r2, [r7, #24]
 8101544:	4013      	ands	r3, r2
 8101546:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101548:	683b      	ldr	r3, [r7, #0]
 810154a:	68da      	ldr	r2, [r3, #12]
 810154c:	69fb      	ldr	r3, [r7, #28]
 810154e:	005b      	lsls	r3, r3, #1
 8101550:	fa02 f303 	lsl.w	r3, r2, r3
 8101554:	69ba      	ldr	r2, [r7, #24]
 8101556:	4313      	orrs	r3, r2
 8101558:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810155a:	687b      	ldr	r3, [r7, #4]
 810155c:	69ba      	ldr	r2, [r7, #24]
 810155e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101560:	687b      	ldr	r3, [r7, #4]
 8101562:	685b      	ldr	r3, [r3, #4]
 8101564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101566:	2201      	movs	r2, #1
 8101568:	69fb      	ldr	r3, [r7, #28]
 810156a:	fa02 f303 	lsl.w	r3, r2, r3
 810156e:	43db      	mvns	r3, r3
 8101570:	69ba      	ldr	r2, [r7, #24]
 8101572:	4013      	ands	r3, r2
 8101574:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8101576:	683b      	ldr	r3, [r7, #0]
 8101578:	685b      	ldr	r3, [r3, #4]
 810157a:	091b      	lsrs	r3, r3, #4
 810157c:	f003 0201 	and.w	r2, r3, #1
 8101580:	69fb      	ldr	r3, [r7, #28]
 8101582:	fa02 f303 	lsl.w	r3, r2, r3
 8101586:	69ba      	ldr	r2, [r7, #24]
 8101588:	4313      	orrs	r3, r2
 810158a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810158c:	687b      	ldr	r3, [r7, #4]
 810158e:	69ba      	ldr	r2, [r7, #24]
 8101590:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8101592:	683b      	ldr	r3, [r7, #0]
 8101594:	685b      	ldr	r3, [r3, #4]
 8101596:	f003 0303 	and.w	r3, r3, #3
 810159a:	2b03      	cmp	r3, #3
 810159c:	d017      	beq.n	81015ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810159e:	687b      	ldr	r3, [r7, #4]
 81015a0:	68db      	ldr	r3, [r3, #12]
 81015a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81015a4:	69fb      	ldr	r3, [r7, #28]
 81015a6:	005b      	lsls	r3, r3, #1
 81015a8:	2203      	movs	r2, #3
 81015aa:	fa02 f303 	lsl.w	r3, r2, r3
 81015ae:	43db      	mvns	r3, r3
 81015b0:	69ba      	ldr	r2, [r7, #24]
 81015b2:	4013      	ands	r3, r2
 81015b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81015b6:	683b      	ldr	r3, [r7, #0]
 81015b8:	689a      	ldr	r2, [r3, #8]
 81015ba:	69fb      	ldr	r3, [r7, #28]
 81015bc:	005b      	lsls	r3, r3, #1
 81015be:	fa02 f303 	lsl.w	r3, r2, r3
 81015c2:	69ba      	ldr	r2, [r7, #24]
 81015c4:	4313      	orrs	r3, r2
 81015c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81015c8:	687b      	ldr	r3, [r7, #4]
 81015ca:	69ba      	ldr	r2, [r7, #24]
 81015cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81015ce:	683b      	ldr	r3, [r7, #0]
 81015d0:	685b      	ldr	r3, [r3, #4]
 81015d2:	f003 0303 	and.w	r3, r3, #3
 81015d6:	2b02      	cmp	r3, #2
 81015d8:	d123      	bne.n	8101622 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81015da:	69fb      	ldr	r3, [r7, #28]
 81015dc:	08da      	lsrs	r2, r3, #3
 81015de:	687b      	ldr	r3, [r7, #4]
 81015e0:	3208      	adds	r2, #8
 81015e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81015e8:	69fb      	ldr	r3, [r7, #28]
 81015ea:	f003 0307 	and.w	r3, r3, #7
 81015ee:	009b      	lsls	r3, r3, #2
 81015f0:	220f      	movs	r2, #15
 81015f2:	fa02 f303 	lsl.w	r3, r2, r3
 81015f6:	43db      	mvns	r3, r3
 81015f8:	69ba      	ldr	r2, [r7, #24]
 81015fa:	4013      	ands	r3, r2
 81015fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81015fe:	683b      	ldr	r3, [r7, #0]
 8101600:	691a      	ldr	r2, [r3, #16]
 8101602:	69fb      	ldr	r3, [r7, #28]
 8101604:	f003 0307 	and.w	r3, r3, #7
 8101608:	009b      	lsls	r3, r3, #2
 810160a:	fa02 f303 	lsl.w	r3, r2, r3
 810160e:	69ba      	ldr	r2, [r7, #24]
 8101610:	4313      	orrs	r3, r2
 8101612:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101614:	69fb      	ldr	r3, [r7, #28]
 8101616:	08da      	lsrs	r2, r3, #3
 8101618:	687b      	ldr	r3, [r7, #4]
 810161a:	3208      	adds	r2, #8
 810161c:	69b9      	ldr	r1, [r7, #24]
 810161e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101622:	687b      	ldr	r3, [r7, #4]
 8101624:	681b      	ldr	r3, [r3, #0]
 8101626:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101628:	69fb      	ldr	r3, [r7, #28]
 810162a:	005b      	lsls	r3, r3, #1
 810162c:	2203      	movs	r2, #3
 810162e:	fa02 f303 	lsl.w	r3, r2, r3
 8101632:	43db      	mvns	r3, r3
 8101634:	69ba      	ldr	r2, [r7, #24]
 8101636:	4013      	ands	r3, r2
 8101638:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810163a:	683b      	ldr	r3, [r7, #0]
 810163c:	685b      	ldr	r3, [r3, #4]
 810163e:	f003 0203 	and.w	r2, r3, #3
 8101642:	69fb      	ldr	r3, [r7, #28]
 8101644:	005b      	lsls	r3, r3, #1
 8101646:	fa02 f303 	lsl.w	r3, r2, r3
 810164a:	69ba      	ldr	r2, [r7, #24]
 810164c:	4313      	orrs	r3, r2
 810164e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101650:	687b      	ldr	r3, [r7, #4]
 8101652:	69ba      	ldr	r2, [r7, #24]
 8101654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8101656:	683b      	ldr	r3, [r7, #0]
 8101658:	685b      	ldr	r3, [r3, #4]
 810165a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810165e:	2b00      	cmp	r3, #0
 8101660:	f000 80e0 	beq.w	8101824 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101664:	4b2f      	ldr	r3, [pc, #188]	@ (8101724 <HAL_GPIO_Init+0x238>)
 8101666:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810166a:	4a2e      	ldr	r2, [pc, #184]	@ (8101724 <HAL_GPIO_Init+0x238>)
 810166c:	f043 0302 	orr.w	r3, r3, #2
 8101670:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101674:	4b2b      	ldr	r3, [pc, #172]	@ (8101724 <HAL_GPIO_Init+0x238>)
 8101676:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810167a:	f003 0302 	and.w	r3, r3, #2
 810167e:	60fb      	str	r3, [r7, #12]
 8101680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101682:	4a29      	ldr	r2, [pc, #164]	@ (8101728 <HAL_GPIO_Init+0x23c>)
 8101684:	69fb      	ldr	r3, [r7, #28]
 8101686:	089b      	lsrs	r3, r3, #2
 8101688:	3302      	adds	r3, #2
 810168a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101690:	69fb      	ldr	r3, [r7, #28]
 8101692:	f003 0303 	and.w	r3, r3, #3
 8101696:	009b      	lsls	r3, r3, #2
 8101698:	220f      	movs	r2, #15
 810169a:	fa02 f303 	lsl.w	r3, r2, r3
 810169e:	43db      	mvns	r3, r3
 81016a0:	69ba      	ldr	r2, [r7, #24]
 81016a2:	4013      	ands	r3, r2
 81016a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81016a6:	687b      	ldr	r3, [r7, #4]
 81016a8:	4a20      	ldr	r2, [pc, #128]	@ (810172c <HAL_GPIO_Init+0x240>)
 81016aa:	4293      	cmp	r3, r2
 81016ac:	d052      	beq.n	8101754 <HAL_GPIO_Init+0x268>
 81016ae:	687b      	ldr	r3, [r7, #4]
 81016b0:	4a1f      	ldr	r2, [pc, #124]	@ (8101730 <HAL_GPIO_Init+0x244>)
 81016b2:	4293      	cmp	r3, r2
 81016b4:	d031      	beq.n	810171a <HAL_GPIO_Init+0x22e>
 81016b6:	687b      	ldr	r3, [r7, #4]
 81016b8:	4a1e      	ldr	r2, [pc, #120]	@ (8101734 <HAL_GPIO_Init+0x248>)
 81016ba:	4293      	cmp	r3, r2
 81016bc:	d02b      	beq.n	8101716 <HAL_GPIO_Init+0x22a>
 81016be:	687b      	ldr	r3, [r7, #4]
 81016c0:	4a1d      	ldr	r2, [pc, #116]	@ (8101738 <HAL_GPIO_Init+0x24c>)
 81016c2:	4293      	cmp	r3, r2
 81016c4:	d025      	beq.n	8101712 <HAL_GPIO_Init+0x226>
 81016c6:	687b      	ldr	r3, [r7, #4]
 81016c8:	4a1c      	ldr	r2, [pc, #112]	@ (810173c <HAL_GPIO_Init+0x250>)
 81016ca:	4293      	cmp	r3, r2
 81016cc:	d01f      	beq.n	810170e <HAL_GPIO_Init+0x222>
 81016ce:	687b      	ldr	r3, [r7, #4]
 81016d0:	4a1b      	ldr	r2, [pc, #108]	@ (8101740 <HAL_GPIO_Init+0x254>)
 81016d2:	4293      	cmp	r3, r2
 81016d4:	d019      	beq.n	810170a <HAL_GPIO_Init+0x21e>
 81016d6:	687b      	ldr	r3, [r7, #4]
 81016d8:	4a1a      	ldr	r2, [pc, #104]	@ (8101744 <HAL_GPIO_Init+0x258>)
 81016da:	4293      	cmp	r3, r2
 81016dc:	d013      	beq.n	8101706 <HAL_GPIO_Init+0x21a>
 81016de:	687b      	ldr	r3, [r7, #4]
 81016e0:	4a19      	ldr	r2, [pc, #100]	@ (8101748 <HAL_GPIO_Init+0x25c>)
 81016e2:	4293      	cmp	r3, r2
 81016e4:	d00d      	beq.n	8101702 <HAL_GPIO_Init+0x216>
 81016e6:	687b      	ldr	r3, [r7, #4]
 81016e8:	4a18      	ldr	r2, [pc, #96]	@ (810174c <HAL_GPIO_Init+0x260>)
 81016ea:	4293      	cmp	r3, r2
 81016ec:	d007      	beq.n	81016fe <HAL_GPIO_Init+0x212>
 81016ee:	687b      	ldr	r3, [r7, #4]
 81016f0:	4a17      	ldr	r2, [pc, #92]	@ (8101750 <HAL_GPIO_Init+0x264>)
 81016f2:	4293      	cmp	r3, r2
 81016f4:	d101      	bne.n	81016fa <HAL_GPIO_Init+0x20e>
 81016f6:	2309      	movs	r3, #9
 81016f8:	e02d      	b.n	8101756 <HAL_GPIO_Init+0x26a>
 81016fa:	230a      	movs	r3, #10
 81016fc:	e02b      	b.n	8101756 <HAL_GPIO_Init+0x26a>
 81016fe:	2308      	movs	r3, #8
 8101700:	e029      	b.n	8101756 <HAL_GPIO_Init+0x26a>
 8101702:	2307      	movs	r3, #7
 8101704:	e027      	b.n	8101756 <HAL_GPIO_Init+0x26a>
 8101706:	2306      	movs	r3, #6
 8101708:	e025      	b.n	8101756 <HAL_GPIO_Init+0x26a>
 810170a:	2305      	movs	r3, #5
 810170c:	e023      	b.n	8101756 <HAL_GPIO_Init+0x26a>
 810170e:	2304      	movs	r3, #4
 8101710:	e021      	b.n	8101756 <HAL_GPIO_Init+0x26a>
 8101712:	2303      	movs	r3, #3
 8101714:	e01f      	b.n	8101756 <HAL_GPIO_Init+0x26a>
 8101716:	2302      	movs	r3, #2
 8101718:	e01d      	b.n	8101756 <HAL_GPIO_Init+0x26a>
 810171a:	2301      	movs	r3, #1
 810171c:	e01b      	b.n	8101756 <HAL_GPIO_Init+0x26a>
 810171e:	bf00      	nop
 8101720:	580000c0 	.word	0x580000c0
 8101724:	58024400 	.word	0x58024400
 8101728:	58000400 	.word	0x58000400
 810172c:	58020000 	.word	0x58020000
 8101730:	58020400 	.word	0x58020400
 8101734:	58020800 	.word	0x58020800
 8101738:	58020c00 	.word	0x58020c00
 810173c:	58021000 	.word	0x58021000
 8101740:	58021400 	.word	0x58021400
 8101744:	58021800 	.word	0x58021800
 8101748:	58021c00 	.word	0x58021c00
 810174c:	58022000 	.word	0x58022000
 8101750:	58022400 	.word	0x58022400
 8101754:	2300      	movs	r3, #0
 8101756:	69fa      	ldr	r2, [r7, #28]
 8101758:	f002 0203 	and.w	r2, r2, #3
 810175c:	0092      	lsls	r2, r2, #2
 810175e:	4093      	lsls	r3, r2
 8101760:	69ba      	ldr	r2, [r7, #24]
 8101762:	4313      	orrs	r3, r2
 8101764:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101766:	4938      	ldr	r1, [pc, #224]	@ (8101848 <HAL_GPIO_Init+0x35c>)
 8101768:	69fb      	ldr	r3, [r7, #28]
 810176a:	089b      	lsrs	r3, r3, #2
 810176c:	3302      	adds	r3, #2
 810176e:	69ba      	ldr	r2, [r7, #24]
 8101770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101774:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101778:	681b      	ldr	r3, [r3, #0]
 810177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810177c:	693b      	ldr	r3, [r7, #16]
 810177e:	43db      	mvns	r3, r3
 8101780:	69ba      	ldr	r2, [r7, #24]
 8101782:	4013      	ands	r3, r2
 8101784:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8101786:	683b      	ldr	r3, [r7, #0]
 8101788:	685b      	ldr	r3, [r3, #4]
 810178a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810178e:	2b00      	cmp	r3, #0
 8101790:	d003      	beq.n	810179a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8101792:	69ba      	ldr	r2, [r7, #24]
 8101794:	693b      	ldr	r3, [r7, #16]
 8101796:	4313      	orrs	r3, r2
 8101798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810179a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810179e:	69bb      	ldr	r3, [r7, #24]
 81017a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81017a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81017a6:	685b      	ldr	r3, [r3, #4]
 81017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81017aa:	693b      	ldr	r3, [r7, #16]
 81017ac:	43db      	mvns	r3, r3
 81017ae:	69ba      	ldr	r2, [r7, #24]
 81017b0:	4013      	ands	r3, r2
 81017b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81017b4:	683b      	ldr	r3, [r7, #0]
 81017b6:	685b      	ldr	r3, [r3, #4]
 81017b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81017bc:	2b00      	cmp	r3, #0
 81017be:	d003      	beq.n	81017c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81017c0:	69ba      	ldr	r2, [r7, #24]
 81017c2:	693b      	ldr	r3, [r7, #16]
 81017c4:	4313      	orrs	r3, r2
 81017c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81017c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81017cc:	69bb      	ldr	r3, [r7, #24]
 81017ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81017d0:	697b      	ldr	r3, [r7, #20]
 81017d2:	685b      	ldr	r3, [r3, #4]
 81017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81017d6:	693b      	ldr	r3, [r7, #16]
 81017d8:	43db      	mvns	r3, r3
 81017da:	69ba      	ldr	r2, [r7, #24]
 81017dc:	4013      	ands	r3, r2
 81017de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81017e0:	683b      	ldr	r3, [r7, #0]
 81017e2:	685b      	ldr	r3, [r3, #4]
 81017e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81017e8:	2b00      	cmp	r3, #0
 81017ea:	d003      	beq.n	81017f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81017ec:	69ba      	ldr	r2, [r7, #24]
 81017ee:	693b      	ldr	r3, [r7, #16]
 81017f0:	4313      	orrs	r3, r2
 81017f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81017f4:	697b      	ldr	r3, [r7, #20]
 81017f6:	69ba      	ldr	r2, [r7, #24]
 81017f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81017fa:	697b      	ldr	r3, [r7, #20]
 81017fc:	681b      	ldr	r3, [r3, #0]
 81017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101800:	693b      	ldr	r3, [r7, #16]
 8101802:	43db      	mvns	r3, r3
 8101804:	69ba      	ldr	r2, [r7, #24]
 8101806:	4013      	ands	r3, r2
 8101808:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810180a:	683b      	ldr	r3, [r7, #0]
 810180c:	685b      	ldr	r3, [r3, #4]
 810180e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101812:	2b00      	cmp	r3, #0
 8101814:	d003      	beq.n	810181e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101816:	69ba      	ldr	r2, [r7, #24]
 8101818:	693b      	ldr	r3, [r7, #16]
 810181a:	4313      	orrs	r3, r2
 810181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810181e:	697b      	ldr	r3, [r7, #20]
 8101820:	69ba      	ldr	r2, [r7, #24]
 8101822:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101824:	69fb      	ldr	r3, [r7, #28]
 8101826:	3301      	adds	r3, #1
 8101828:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810182a:	683b      	ldr	r3, [r7, #0]
 810182c:	681a      	ldr	r2, [r3, #0]
 810182e:	69fb      	ldr	r3, [r7, #28]
 8101830:	fa22 f303 	lsr.w	r3, r2, r3
 8101834:	2b00      	cmp	r3, #0
 8101836:	f47f ae63 	bne.w	8101500 <HAL_GPIO_Init+0x14>
  }
}
 810183a:	bf00      	nop
 810183c:	bf00      	nop
 810183e:	3724      	adds	r7, #36	@ 0x24
 8101840:	46bd      	mov	sp, r7
 8101842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101846:	4770      	bx	lr
 8101848:	58000400 	.word	0x58000400

0810184c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 810184c:	b480      	push	{r7}
 810184e:	b083      	sub	sp, #12
 8101850:	af00      	add	r7, sp, #0
 8101852:	6078      	str	r0, [r7, #4]
 8101854:	460b      	mov	r3, r1
 8101856:	807b      	strh	r3, [r7, #2]
 8101858:	4613      	mov	r3, r2
 810185a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 810185c:	787b      	ldrb	r3, [r7, #1]
 810185e:	2b00      	cmp	r3, #0
 8101860:	d003      	beq.n	810186a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8101862:	887a      	ldrh	r2, [r7, #2]
 8101864:	687b      	ldr	r3, [r7, #4]
 8101866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101868:	e003      	b.n	8101872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810186a:	887b      	ldrh	r3, [r7, #2]
 810186c:	041a      	lsls	r2, r3, #16
 810186e:	687b      	ldr	r3, [r7, #4]
 8101870:	619a      	str	r2, [r3, #24]
}
 8101872:	bf00      	nop
 8101874:	370c      	adds	r7, #12
 8101876:	46bd      	mov	sp, r7
 8101878:	f85d 7b04 	ldr.w	r7, [sp], #4
 810187c:	4770      	bx	lr

0810187e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 810187e:	b580      	push	{r7, lr}
 8101880:	b082      	sub	sp, #8
 8101882:	af00      	add	r7, sp, #0
 8101884:	4603      	mov	r3, r0
 8101886:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8101888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810188c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8101890:	88fb      	ldrh	r3, [r7, #6]
 8101892:	4013      	ands	r3, r2
 8101894:	2b00      	cmp	r3, #0
 8101896:	d008      	beq.n	81018aa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8101898:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810189c:	88fb      	ldrh	r3, [r7, #6]
 810189e:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 81018a2:	88fb      	ldrh	r3, [r7, #6]
 81018a4:	4618      	mov	r0, r3
 81018a6:	f000 f804 	bl	81018b2 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 81018aa:	bf00      	nop
 81018ac:	3708      	adds	r7, #8
 81018ae:	46bd      	mov	sp, r7
 81018b0:	bd80      	pop	{r7, pc}

081018b2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 81018b2:	b480      	push	{r7}
 81018b4:	b083      	sub	sp, #12
 81018b6:	af00      	add	r7, sp, #0
 81018b8:	4603      	mov	r3, r0
 81018ba:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 81018bc:	bf00      	nop
 81018be:	370c      	adds	r7, #12
 81018c0:	46bd      	mov	sp, r7
 81018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018c6:	4770      	bx	lr

081018c8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81018c8:	b480      	push	{r7}
 81018ca:	b083      	sub	sp, #12
 81018cc:	af00      	add	r7, sp, #0
 81018ce:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81018d0:	4b05      	ldr	r3, [pc, #20]	@ (81018e8 <HAL_HSEM_ActivateNotification+0x20>)
 81018d2:	681a      	ldr	r2, [r3, #0]
 81018d4:	4904      	ldr	r1, [pc, #16]	@ (81018e8 <HAL_HSEM_ActivateNotification+0x20>)
 81018d6:	687b      	ldr	r3, [r7, #4]
 81018d8:	4313      	orrs	r3, r2
 81018da:	600b      	str	r3, [r1, #0]
#endif
}
 81018dc:	bf00      	nop
 81018de:	370c      	adds	r7, #12
 81018e0:	46bd      	mov	sp, r7
 81018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018e6:	4770      	bx	lr
 81018e8:	58026510 	.word	0x58026510

081018ec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 81018ec:	b580      	push	{r7, lr}
 81018ee:	b084      	sub	sp, #16
 81018f0:	af00      	add	r7, sp, #0
 81018f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 81018f4:	687b      	ldr	r3, [r7, #4]
 81018f6:	2b00      	cmp	r3, #0
 81018f8:	d101      	bne.n	81018fe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 81018fa:	2301      	movs	r3, #1
 81018fc:	e08f      	b.n	8101a1e <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 81018fe:	687b      	ldr	r3, [r7, #4]
 8101900:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8101904:	b2db      	uxtb	r3, r3
 8101906:	2b00      	cmp	r3, #0
 8101908:	d106      	bne.n	8101918 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 810190a:	687b      	ldr	r3, [r7, #4]
 810190c:	2200      	movs	r2, #0
 810190e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8101912:	6878      	ldr	r0, [r7, #4]
 8101914:	f7fe fff2 	bl	81008fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8101918:	687b      	ldr	r3, [r7, #4]
 810191a:	2202      	movs	r2, #2
 810191c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8101920:	687b      	ldr	r3, [r7, #4]
 8101922:	681b      	ldr	r3, [r3, #0]
 8101924:	699a      	ldr	r2, [r3, #24]
 8101926:	687b      	ldr	r3, [r7, #4]
 8101928:	681b      	ldr	r3, [r3, #0]
 810192a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 810192e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8101930:	687b      	ldr	r3, [r7, #4]
 8101932:	681b      	ldr	r3, [r3, #0]
 8101934:	6999      	ldr	r1, [r3, #24]
 8101936:	687b      	ldr	r3, [r7, #4]
 8101938:	685a      	ldr	r2, [r3, #4]
 810193a:	687b      	ldr	r3, [r7, #4]
 810193c:	689b      	ldr	r3, [r3, #8]
 810193e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8101940:	687b      	ldr	r3, [r7, #4]
 8101942:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8101944:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8101946:	687b      	ldr	r3, [r7, #4]
 8101948:	691b      	ldr	r3, [r3, #16]
 810194a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 810194c:	687b      	ldr	r3, [r7, #4]
 810194e:	681b      	ldr	r3, [r3, #0]
 8101950:	430a      	orrs	r2, r1
 8101952:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8101954:	687b      	ldr	r3, [r7, #4]
 8101956:	695b      	ldr	r3, [r3, #20]
 8101958:	041b      	lsls	r3, r3, #16
 810195a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 810195c:	687b      	ldr	r3, [r7, #4]
 810195e:	6999      	ldr	r1, [r3, #24]
 8101960:	687b      	ldr	r3, [r7, #4]
 8101962:	681b      	ldr	r3, [r3, #0]
 8101964:	68fa      	ldr	r2, [r7, #12]
 8101966:	430a      	orrs	r2, r1
 8101968:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 810196a:	687b      	ldr	r3, [r7, #4]
 810196c:	69db      	ldr	r3, [r3, #28]
 810196e:	041b      	lsls	r3, r3, #16
 8101970:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8101972:	687b      	ldr	r3, [r7, #4]
 8101974:	6a19      	ldr	r1, [r3, #32]
 8101976:	687b      	ldr	r3, [r7, #4]
 8101978:	681b      	ldr	r3, [r3, #0]
 810197a:	68fa      	ldr	r2, [r7, #12]
 810197c:	430a      	orrs	r2, r1
 810197e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8101980:	687b      	ldr	r3, [r7, #4]
 8101982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101984:	041b      	lsls	r3, r3, #16
 8101986:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8101988:	687b      	ldr	r3, [r7, #4]
 810198a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 810198c:	687b      	ldr	r3, [r7, #4]
 810198e:	681b      	ldr	r3, [r3, #0]
 8101990:	68fa      	ldr	r2, [r7, #12]
 8101992:	430a      	orrs	r2, r1
 8101994:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8101996:	687b      	ldr	r3, [r7, #4]
 8101998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810199a:	041b      	lsls	r3, r3, #16
 810199c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 810199e:	687b      	ldr	r3, [r7, #4]
 81019a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 81019a2:	687b      	ldr	r3, [r7, #4]
 81019a4:	681b      	ldr	r3, [r3, #0]
 81019a6:	68fa      	ldr	r2, [r7, #12]
 81019a8:	430a      	orrs	r2, r1
 81019aa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 81019ac:	687b      	ldr	r3, [r7, #4]
 81019ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 81019b2:	021b      	lsls	r3, r3, #8
 81019b4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 81019b6:	687b      	ldr	r3, [r7, #4]
 81019b8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 81019bc:	041b      	lsls	r3, r3, #16
 81019be:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 81019c0:	687b      	ldr	r3, [r7, #4]
 81019c2:	681b      	ldr	r3, [r3, #0]
 81019c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81019c6:	687b      	ldr	r3, [r7, #4]
 81019c8:	681b      	ldr	r3, [r3, #0]
 81019ca:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 81019ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 81019d0:	687b      	ldr	r3, [r7, #4]
 81019d2:	681b      	ldr	r3, [r3, #0]
 81019d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 81019d6:	68ba      	ldr	r2, [r7, #8]
 81019d8:	68fb      	ldr	r3, [r7, #12]
 81019da:	4313      	orrs	r3, r2
 81019dc:	687a      	ldr	r2, [r7, #4]
 81019de:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 81019e2:	431a      	orrs	r2, r3
 81019e4:	687b      	ldr	r3, [r7, #4]
 81019e6:	681b      	ldr	r3, [r3, #0]
 81019e8:	430a      	orrs	r2, r1
 81019ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 81019ec:	687b      	ldr	r3, [r7, #4]
 81019ee:	681b      	ldr	r3, [r3, #0]
 81019f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81019f2:	687b      	ldr	r3, [r7, #4]
 81019f4:	681b      	ldr	r3, [r3, #0]
 81019f6:	f042 0206 	orr.w	r2, r2, #6
 81019fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 81019fc:	687b      	ldr	r3, [r7, #4]
 81019fe:	681b      	ldr	r3, [r3, #0]
 8101a00:	699a      	ldr	r2, [r3, #24]
 8101a02:	687b      	ldr	r3, [r7, #4]
 8101a04:	681b      	ldr	r3, [r3, #0]
 8101a06:	f042 0201 	orr.w	r2, r2, #1
 8101a0a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8101a0c:	687b      	ldr	r3, [r7, #4]
 8101a0e:	2200      	movs	r2, #0
 8101a10:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8101a14:	687b      	ldr	r3, [r7, #4]
 8101a16:	2201      	movs	r2, #1
 8101a18:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8101a1c:	2300      	movs	r3, #0
}
 8101a1e:	4618      	mov	r0, r3
 8101a20:	3710      	adds	r7, #16
 8101a22:	46bd      	mov	sp, r7
 8101a24:	bd80      	pop	{r7, pc}

08101a26 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8101a26:	b5b0      	push	{r4, r5, r7, lr}
 8101a28:	b084      	sub	sp, #16
 8101a2a:	af00      	add	r7, sp, #0
 8101a2c:	60f8      	str	r0, [r7, #12]
 8101a2e:	60b9      	str	r1, [r7, #8]
 8101a30:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8101a32:	68fb      	ldr	r3, [r7, #12]
 8101a34:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8101a38:	2b01      	cmp	r3, #1
 8101a3a:	d101      	bne.n	8101a40 <HAL_LTDC_ConfigLayer+0x1a>
 8101a3c:	2302      	movs	r3, #2
 8101a3e:	e02c      	b.n	8101a9a <HAL_LTDC_ConfigLayer+0x74>
 8101a40:	68fb      	ldr	r3, [r7, #12]
 8101a42:	2201      	movs	r2, #1
 8101a44:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8101a48:	68fb      	ldr	r3, [r7, #12]
 8101a4a:	2202      	movs	r2, #2
 8101a4c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8101a50:	68fa      	ldr	r2, [r7, #12]
 8101a52:	687b      	ldr	r3, [r7, #4]
 8101a54:	2134      	movs	r1, #52	@ 0x34
 8101a56:	fb01 f303 	mul.w	r3, r1, r3
 8101a5a:	4413      	add	r3, r2
 8101a5c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8101a60:	68bb      	ldr	r3, [r7, #8]
 8101a62:	4614      	mov	r4, r2
 8101a64:	461d      	mov	r5, r3
 8101a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101a72:	682b      	ldr	r3, [r5, #0]
 8101a74:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8101a76:	687a      	ldr	r2, [r7, #4]
 8101a78:	68b9      	ldr	r1, [r7, #8]
 8101a7a:	68f8      	ldr	r0, [r7, #12]
 8101a7c:	f000 f811 	bl	8101aa2 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8101a80:	68fb      	ldr	r3, [r7, #12]
 8101a82:	681b      	ldr	r3, [r3, #0]
 8101a84:	2201      	movs	r2, #1
 8101a86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8101a88:	68fb      	ldr	r3, [r7, #12]
 8101a8a:	2201      	movs	r2, #1
 8101a8c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8101a90:	68fb      	ldr	r3, [r7, #12]
 8101a92:	2200      	movs	r2, #0
 8101a94:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8101a98:	2300      	movs	r3, #0
}
 8101a9a:	4618      	mov	r0, r3
 8101a9c:	3710      	adds	r7, #16
 8101a9e:	46bd      	mov	sp, r7
 8101aa0:	bdb0      	pop	{r4, r5, r7, pc}

08101aa2 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8101aa2:	b480      	push	{r7}
 8101aa4:	b089      	sub	sp, #36	@ 0x24
 8101aa6:	af00      	add	r7, sp, #0
 8101aa8:	60f8      	str	r0, [r7, #12]
 8101aaa:	60b9      	str	r1, [r7, #8]
 8101aac:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8101aae:	68bb      	ldr	r3, [r7, #8]
 8101ab0:	685a      	ldr	r2, [r3, #4]
 8101ab2:	68fb      	ldr	r3, [r7, #12]
 8101ab4:	681b      	ldr	r3, [r3, #0]
 8101ab6:	68db      	ldr	r3, [r3, #12]
 8101ab8:	0c1b      	lsrs	r3, r3, #16
 8101aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8101abe:	4413      	add	r3, r2
 8101ac0:	041b      	lsls	r3, r3, #16
 8101ac2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8101ac4:	68fb      	ldr	r3, [r7, #12]
 8101ac6:	681b      	ldr	r3, [r3, #0]
 8101ac8:	461a      	mov	r2, r3
 8101aca:	687b      	ldr	r3, [r7, #4]
 8101acc:	01db      	lsls	r3, r3, #7
 8101ace:	4413      	add	r3, r2
 8101ad0:	3384      	adds	r3, #132	@ 0x84
 8101ad2:	685b      	ldr	r3, [r3, #4]
 8101ad4:	68fa      	ldr	r2, [r7, #12]
 8101ad6:	6812      	ldr	r2, [r2, #0]
 8101ad8:	4611      	mov	r1, r2
 8101ada:	687a      	ldr	r2, [r7, #4]
 8101adc:	01d2      	lsls	r2, r2, #7
 8101ade:	440a      	add	r2, r1
 8101ae0:	3284      	adds	r2, #132	@ 0x84
 8101ae2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8101ae6:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8101ae8:	68bb      	ldr	r3, [r7, #8]
 8101aea:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8101aec:	68fb      	ldr	r3, [r7, #12]
 8101aee:	681b      	ldr	r3, [r3, #0]
 8101af0:	68db      	ldr	r3, [r3, #12]
 8101af2:	0c1b      	lsrs	r3, r3, #16
 8101af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8101af8:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8101afa:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8101afc:	68fb      	ldr	r3, [r7, #12]
 8101afe:	681b      	ldr	r3, [r3, #0]
 8101b00:	4619      	mov	r1, r3
 8101b02:	687b      	ldr	r3, [r7, #4]
 8101b04:	01db      	lsls	r3, r3, #7
 8101b06:	440b      	add	r3, r1
 8101b08:	3384      	adds	r3, #132	@ 0x84
 8101b0a:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8101b0c:	69fb      	ldr	r3, [r7, #28]
 8101b0e:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8101b10:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8101b12:	68bb      	ldr	r3, [r7, #8]
 8101b14:	68da      	ldr	r2, [r3, #12]
 8101b16:	68fb      	ldr	r3, [r7, #12]
 8101b18:	681b      	ldr	r3, [r3, #0]
 8101b1a:	68db      	ldr	r3, [r3, #12]
 8101b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8101b20:	4413      	add	r3, r2
 8101b22:	041b      	lsls	r3, r3, #16
 8101b24:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8101b26:	68fb      	ldr	r3, [r7, #12]
 8101b28:	681b      	ldr	r3, [r3, #0]
 8101b2a:	461a      	mov	r2, r3
 8101b2c:	687b      	ldr	r3, [r7, #4]
 8101b2e:	01db      	lsls	r3, r3, #7
 8101b30:	4413      	add	r3, r2
 8101b32:	3384      	adds	r3, #132	@ 0x84
 8101b34:	689b      	ldr	r3, [r3, #8]
 8101b36:	68fa      	ldr	r2, [r7, #12]
 8101b38:	6812      	ldr	r2, [r2, #0]
 8101b3a:	4611      	mov	r1, r2
 8101b3c:	687a      	ldr	r2, [r7, #4]
 8101b3e:	01d2      	lsls	r2, r2, #7
 8101b40:	440a      	add	r2, r1
 8101b42:	3284      	adds	r2, #132	@ 0x84
 8101b44:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8101b48:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8101b4a:	68bb      	ldr	r3, [r7, #8]
 8101b4c:	689a      	ldr	r2, [r3, #8]
 8101b4e:	68fb      	ldr	r3, [r7, #12]
 8101b50:	681b      	ldr	r3, [r3, #0]
 8101b52:	68db      	ldr	r3, [r3, #12]
 8101b54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8101b58:	4413      	add	r3, r2
 8101b5a:	1c5a      	adds	r2, r3, #1
 8101b5c:	68fb      	ldr	r3, [r7, #12]
 8101b5e:	681b      	ldr	r3, [r3, #0]
 8101b60:	4619      	mov	r1, r3
 8101b62:	687b      	ldr	r3, [r7, #4]
 8101b64:	01db      	lsls	r3, r3, #7
 8101b66:	440b      	add	r3, r1
 8101b68:	3384      	adds	r3, #132	@ 0x84
 8101b6a:	4619      	mov	r1, r3
 8101b6c:	69fb      	ldr	r3, [r7, #28]
 8101b6e:	4313      	orrs	r3, r2
 8101b70:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8101b72:	68fb      	ldr	r3, [r7, #12]
 8101b74:	681b      	ldr	r3, [r3, #0]
 8101b76:	461a      	mov	r2, r3
 8101b78:	687b      	ldr	r3, [r7, #4]
 8101b7a:	01db      	lsls	r3, r3, #7
 8101b7c:	4413      	add	r3, r2
 8101b7e:	3384      	adds	r3, #132	@ 0x84
 8101b80:	691b      	ldr	r3, [r3, #16]
 8101b82:	68fa      	ldr	r2, [r7, #12]
 8101b84:	6812      	ldr	r2, [r2, #0]
 8101b86:	4611      	mov	r1, r2
 8101b88:	687a      	ldr	r2, [r7, #4]
 8101b8a:	01d2      	lsls	r2, r2, #7
 8101b8c:	440a      	add	r2, r1
 8101b8e:	3284      	adds	r2, #132	@ 0x84
 8101b90:	f023 0307 	bic.w	r3, r3, #7
 8101b94:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8101b96:	68fb      	ldr	r3, [r7, #12]
 8101b98:	681b      	ldr	r3, [r3, #0]
 8101b9a:	461a      	mov	r2, r3
 8101b9c:	687b      	ldr	r3, [r7, #4]
 8101b9e:	01db      	lsls	r3, r3, #7
 8101ba0:	4413      	add	r3, r2
 8101ba2:	3384      	adds	r3, #132	@ 0x84
 8101ba4:	461a      	mov	r2, r3
 8101ba6:	68bb      	ldr	r3, [r7, #8]
 8101ba8:	691b      	ldr	r3, [r3, #16]
 8101baa:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8101bac:	68bb      	ldr	r3, [r7, #8]
 8101bae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8101bb2:	021b      	lsls	r3, r3, #8
 8101bb4:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8101bb6:	68bb      	ldr	r3, [r7, #8]
 8101bb8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8101bbc:	041b      	lsls	r3, r3, #16
 8101bbe:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8101bc0:	68bb      	ldr	r3, [r7, #8]
 8101bc2:	699b      	ldr	r3, [r3, #24]
 8101bc4:	061b      	lsls	r3, r3, #24
 8101bc6:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8101bc8:	68bb      	ldr	r3, [r7, #8]
 8101bca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8101bce:	461a      	mov	r2, r3
 8101bd0:	69fb      	ldr	r3, [r7, #28]
 8101bd2:	431a      	orrs	r2, r3
 8101bd4:	69bb      	ldr	r3, [r7, #24]
 8101bd6:	431a      	orrs	r2, r3
 8101bd8:	68fb      	ldr	r3, [r7, #12]
 8101bda:	681b      	ldr	r3, [r3, #0]
 8101bdc:	4619      	mov	r1, r3
 8101bde:	687b      	ldr	r3, [r7, #4]
 8101be0:	01db      	lsls	r3, r3, #7
 8101be2:	440b      	add	r3, r1
 8101be4:	3384      	adds	r3, #132	@ 0x84
 8101be6:	4619      	mov	r1, r3
 8101be8:	697b      	ldr	r3, [r7, #20]
 8101bea:	4313      	orrs	r3, r2
 8101bec:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8101bee:	68fb      	ldr	r3, [r7, #12]
 8101bf0:	681b      	ldr	r3, [r3, #0]
 8101bf2:	461a      	mov	r2, r3
 8101bf4:	687b      	ldr	r3, [r7, #4]
 8101bf6:	01db      	lsls	r3, r3, #7
 8101bf8:	4413      	add	r3, r2
 8101bfa:	3384      	adds	r3, #132	@ 0x84
 8101bfc:	695b      	ldr	r3, [r3, #20]
 8101bfe:	68fa      	ldr	r2, [r7, #12]
 8101c00:	6812      	ldr	r2, [r2, #0]
 8101c02:	4611      	mov	r1, r2
 8101c04:	687a      	ldr	r2, [r7, #4]
 8101c06:	01d2      	lsls	r2, r2, #7
 8101c08:	440a      	add	r2, r1
 8101c0a:	3284      	adds	r2, #132	@ 0x84
 8101c0c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8101c10:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8101c12:	68fb      	ldr	r3, [r7, #12]
 8101c14:	681b      	ldr	r3, [r3, #0]
 8101c16:	461a      	mov	r2, r3
 8101c18:	687b      	ldr	r3, [r7, #4]
 8101c1a:	01db      	lsls	r3, r3, #7
 8101c1c:	4413      	add	r3, r2
 8101c1e:	3384      	adds	r3, #132	@ 0x84
 8101c20:	461a      	mov	r2, r3
 8101c22:	68bb      	ldr	r3, [r7, #8]
 8101c24:	695b      	ldr	r3, [r3, #20]
 8101c26:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8101c28:	68fb      	ldr	r3, [r7, #12]
 8101c2a:	681b      	ldr	r3, [r3, #0]
 8101c2c:	461a      	mov	r2, r3
 8101c2e:	687b      	ldr	r3, [r7, #4]
 8101c30:	01db      	lsls	r3, r3, #7
 8101c32:	4413      	add	r3, r2
 8101c34:	3384      	adds	r3, #132	@ 0x84
 8101c36:	69db      	ldr	r3, [r3, #28]
 8101c38:	68fa      	ldr	r2, [r7, #12]
 8101c3a:	6812      	ldr	r2, [r2, #0]
 8101c3c:	4611      	mov	r1, r2
 8101c3e:	687a      	ldr	r2, [r7, #4]
 8101c40:	01d2      	lsls	r2, r2, #7
 8101c42:	440a      	add	r2, r1
 8101c44:	3284      	adds	r2, #132	@ 0x84
 8101c46:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8101c4a:	f023 0307 	bic.w	r3, r3, #7
 8101c4e:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8101c50:	68bb      	ldr	r3, [r7, #8]
 8101c52:	69da      	ldr	r2, [r3, #28]
 8101c54:	68bb      	ldr	r3, [r7, #8]
 8101c56:	6a1b      	ldr	r3, [r3, #32]
 8101c58:	68f9      	ldr	r1, [r7, #12]
 8101c5a:	6809      	ldr	r1, [r1, #0]
 8101c5c:	4608      	mov	r0, r1
 8101c5e:	6879      	ldr	r1, [r7, #4]
 8101c60:	01c9      	lsls	r1, r1, #7
 8101c62:	4401      	add	r1, r0
 8101c64:	3184      	adds	r1, #132	@ 0x84
 8101c66:	4313      	orrs	r3, r2
 8101c68:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8101c6a:	68fb      	ldr	r3, [r7, #12]
 8101c6c:	681b      	ldr	r3, [r3, #0]
 8101c6e:	461a      	mov	r2, r3
 8101c70:	687b      	ldr	r3, [r7, #4]
 8101c72:	01db      	lsls	r3, r3, #7
 8101c74:	4413      	add	r3, r2
 8101c76:	3384      	adds	r3, #132	@ 0x84
 8101c78:	461a      	mov	r2, r3
 8101c7a:	68bb      	ldr	r3, [r7, #8]
 8101c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101c7e:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8101c80:	68bb      	ldr	r3, [r7, #8]
 8101c82:	691b      	ldr	r3, [r3, #16]
 8101c84:	2b00      	cmp	r3, #0
 8101c86:	d102      	bne.n	8101c8e <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 8101c88:	2304      	movs	r3, #4
 8101c8a:	61fb      	str	r3, [r7, #28]
 8101c8c:	e01b      	b.n	8101cc6 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8101c8e:	68bb      	ldr	r3, [r7, #8]
 8101c90:	691b      	ldr	r3, [r3, #16]
 8101c92:	2b01      	cmp	r3, #1
 8101c94:	d102      	bne.n	8101c9c <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8101c96:	2303      	movs	r3, #3
 8101c98:	61fb      	str	r3, [r7, #28]
 8101c9a:	e014      	b.n	8101cc6 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8101c9c:	68bb      	ldr	r3, [r7, #8]
 8101c9e:	691b      	ldr	r3, [r3, #16]
 8101ca0:	2b04      	cmp	r3, #4
 8101ca2:	d00b      	beq.n	8101cbc <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8101ca4:	68bb      	ldr	r3, [r7, #8]
 8101ca6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8101ca8:	2b02      	cmp	r3, #2
 8101caa:	d007      	beq.n	8101cbc <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8101cac:	68bb      	ldr	r3, [r7, #8]
 8101cae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8101cb0:	2b03      	cmp	r3, #3
 8101cb2:	d003      	beq.n	8101cbc <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8101cb4:	68bb      	ldr	r3, [r7, #8]
 8101cb6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8101cb8:	2b07      	cmp	r3, #7
 8101cba:	d102      	bne.n	8101cc2 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8101cbc:	2302      	movs	r3, #2
 8101cbe:	61fb      	str	r3, [r7, #28]
 8101cc0:	e001      	b.n	8101cc6 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8101cc2:	2301      	movs	r3, #1
 8101cc4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8101cc6:	68fb      	ldr	r3, [r7, #12]
 8101cc8:	681b      	ldr	r3, [r3, #0]
 8101cca:	461a      	mov	r2, r3
 8101ccc:	687b      	ldr	r3, [r7, #4]
 8101cce:	01db      	lsls	r3, r3, #7
 8101cd0:	4413      	add	r3, r2
 8101cd2:	3384      	adds	r3, #132	@ 0x84
 8101cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101cd6:	68fa      	ldr	r2, [r7, #12]
 8101cd8:	6812      	ldr	r2, [r2, #0]
 8101cda:	4611      	mov	r1, r2
 8101cdc:	687a      	ldr	r2, [r7, #4]
 8101cde:	01d2      	lsls	r2, r2, #7
 8101ce0:	440a      	add	r2, r1
 8101ce2:	3284      	adds	r2, #132	@ 0x84
 8101ce4:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8101ce8:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8101cea:	68bb      	ldr	r3, [r7, #8]
 8101cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101cee:	69fa      	ldr	r2, [r7, #28]
 8101cf0:	fb02 f303 	mul.w	r3, r2, r3
 8101cf4:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8101cf6:	68bb      	ldr	r3, [r7, #8]
 8101cf8:	6859      	ldr	r1, [r3, #4]
 8101cfa:	68bb      	ldr	r3, [r7, #8]
 8101cfc:	681b      	ldr	r3, [r3, #0]
 8101cfe:	1acb      	subs	r3, r1, r3
 8101d00:	69f9      	ldr	r1, [r7, #28]
 8101d02:	fb01 f303 	mul.w	r3, r1, r3
 8101d06:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8101d08:	68f9      	ldr	r1, [r7, #12]
 8101d0a:	6809      	ldr	r1, [r1, #0]
 8101d0c:	4608      	mov	r0, r1
 8101d0e:	6879      	ldr	r1, [r7, #4]
 8101d10:	01c9      	lsls	r1, r1, #7
 8101d12:	4401      	add	r1, r0
 8101d14:	3184      	adds	r1, #132	@ 0x84
 8101d16:	4313      	orrs	r3, r2
 8101d18:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8101d1a:	68fb      	ldr	r3, [r7, #12]
 8101d1c:	681b      	ldr	r3, [r3, #0]
 8101d1e:	461a      	mov	r2, r3
 8101d20:	687b      	ldr	r3, [r7, #4]
 8101d22:	01db      	lsls	r3, r3, #7
 8101d24:	4413      	add	r3, r2
 8101d26:	3384      	adds	r3, #132	@ 0x84
 8101d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101d2a:	68fa      	ldr	r2, [r7, #12]
 8101d2c:	6812      	ldr	r2, [r2, #0]
 8101d2e:	4611      	mov	r1, r2
 8101d30:	687a      	ldr	r2, [r7, #4]
 8101d32:	01d2      	lsls	r2, r2, #7
 8101d34:	440a      	add	r2, r1
 8101d36:	3284      	adds	r2, #132	@ 0x84
 8101d38:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8101d3c:	f023 0307 	bic.w	r3, r3, #7
 8101d40:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8101d42:	68fb      	ldr	r3, [r7, #12]
 8101d44:	681b      	ldr	r3, [r3, #0]
 8101d46:	461a      	mov	r2, r3
 8101d48:	687b      	ldr	r3, [r7, #4]
 8101d4a:	01db      	lsls	r3, r3, #7
 8101d4c:	4413      	add	r3, r2
 8101d4e:	3384      	adds	r3, #132	@ 0x84
 8101d50:	461a      	mov	r2, r3
 8101d52:	68bb      	ldr	r3, [r7, #8]
 8101d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101d56:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8101d58:	68fb      	ldr	r3, [r7, #12]
 8101d5a:	681b      	ldr	r3, [r3, #0]
 8101d5c:	461a      	mov	r2, r3
 8101d5e:	687b      	ldr	r3, [r7, #4]
 8101d60:	01db      	lsls	r3, r3, #7
 8101d62:	4413      	add	r3, r2
 8101d64:	3384      	adds	r3, #132	@ 0x84
 8101d66:	681b      	ldr	r3, [r3, #0]
 8101d68:	68fa      	ldr	r2, [r7, #12]
 8101d6a:	6812      	ldr	r2, [r2, #0]
 8101d6c:	4611      	mov	r1, r2
 8101d6e:	687a      	ldr	r2, [r7, #4]
 8101d70:	01d2      	lsls	r2, r2, #7
 8101d72:	440a      	add	r2, r1
 8101d74:	3284      	adds	r2, #132	@ 0x84
 8101d76:	f043 0301 	orr.w	r3, r3, #1
 8101d7a:	6013      	str	r3, [r2, #0]
}
 8101d7c:	bf00      	nop
 8101d7e:	3724      	adds	r7, #36	@ 0x24
 8101d80:	46bd      	mov	sp, r7
 8101d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d86:	4770      	bx	lr

08101d88 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8101d88:	b580      	push	{r7, lr}
 8101d8a:	b084      	sub	sp, #16
 8101d8c:	af00      	add	r7, sp, #0
 8101d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101d90:	f7ff f8ee 	bl	8100f70 <HAL_GetTick>
 8101d94:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8101d96:	687b      	ldr	r3, [r7, #4]
 8101d98:	2b00      	cmp	r3, #0
 8101d9a:	d101      	bne.n	8101da0 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8101d9c:	2301      	movs	r3, #1
 8101d9e:	e03b      	b.n	8101e18 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8101da0:	687b      	ldr	r3, [r7, #4]
 8101da2:	2200      	movs	r2, #0
 8101da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8101da8:	687b      	ldr	r3, [r7, #4]
 8101daa:	2202      	movs	r2, #2
 8101dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8101db0:	687b      	ldr	r3, [r7, #4]
 8101db2:	681b      	ldr	r3, [r3, #0]
 8101db4:	68da      	ldr	r2, [r3, #12]
 8101db6:	687b      	ldr	r3, [r7, #4]
 8101db8:	681b      	ldr	r3, [r3, #0]
 8101dba:	f022 0201 	bic.w	r2, r2, #1
 8101dbe:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8101dc0:	e00f      	b.n	8101de2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8101dc2:	f7ff f8d5 	bl	8100f70 <HAL_GetTick>
 8101dc6:	4602      	mov	r2, r0
 8101dc8:	68fb      	ldr	r3, [r7, #12]
 8101dca:	1ad3      	subs	r3, r2, r3
 8101dcc:	2b05      	cmp	r3, #5
 8101dce:	d908      	bls.n	8101de2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8101dd0:	687b      	ldr	r3, [r7, #4]
 8101dd2:	2240      	movs	r2, #64	@ 0x40
 8101dd4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8101dd6:	687b      	ldr	r3, [r7, #4]
 8101dd8:	2203      	movs	r2, #3
 8101dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 8101dde:	2301      	movs	r3, #1
 8101de0:	e01a      	b.n	8101e18 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8101de2:	687b      	ldr	r3, [r7, #4]
 8101de4:	681b      	ldr	r3, [r3, #0]
 8101de6:	68db      	ldr	r3, [r3, #12]
 8101de8:	f003 0301 	and.w	r3, r3, #1
 8101dec:	2b00      	cmp	r3, #0
 8101dee:	d1e8      	bne.n	8101dc2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8101df0:	6878      	ldr	r0, [r7, #4]
 8101df2:	f000 f815 	bl	8101e20 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8101df6:	687b      	ldr	r3, [r7, #4]
 8101df8:	2200      	movs	r2, #0
 8101dfa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8101dfc:	687b      	ldr	r3, [r7, #4]
 8101dfe:	2200      	movs	r2, #0
 8101e00:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8101e02:	687b      	ldr	r3, [r7, #4]
 8101e04:	2200      	movs	r2, #0
 8101e06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8101e08:	687b      	ldr	r3, [r7, #4]
 8101e0a:	2200      	movs	r2, #0
 8101e0c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8101e0e:	687b      	ldr	r3, [r7, #4]
 8101e10:	2201      	movs	r2, #1
 8101e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8101e16:	2300      	movs	r3, #0
}
 8101e18:	4618      	mov	r0, r3
 8101e1a:	3710      	adds	r7, #16
 8101e1c:	46bd      	mov	sp, r7
 8101e1e:	bd80      	pop	{r7, pc}

08101e20 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8101e20:	b480      	push	{r7}
 8101e22:	b085      	sub	sp, #20
 8101e24:	af00      	add	r7, sp, #0
 8101e26:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8101e28:	687b      	ldr	r3, [r7, #4]
 8101e2a:	68d9      	ldr	r1, [r3, #12]
 8101e2c:	687b      	ldr	r3, [r7, #4]
 8101e2e:	691a      	ldr	r2, [r3, #16]
 8101e30:	687b      	ldr	r3, [r7, #4]
 8101e32:	681b      	ldr	r3, [r3, #0]
 8101e34:	430a      	orrs	r2, r1
 8101e36:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8101e38:	687b      	ldr	r3, [r7, #4]
 8101e3a:	695a      	ldr	r2, [r3, #20]
 8101e3c:	687b      	ldr	r3, [r7, #4]
 8101e3e:	699b      	ldr	r3, [r3, #24]
 8101e40:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8101e42:	687b      	ldr	r3, [r7, #4]
 8101e44:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8101e46:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8101e48:	687b      	ldr	r3, [r7, #4]
 8101e4a:	6a1b      	ldr	r3, [r3, #32]
 8101e4c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8101e4e:	687b      	ldr	r3, [r7, #4]
 8101e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8101e52:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8101e54:	687b      	ldr	r3, [r7, #4]
 8101e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101e58:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8101e5a:	687b      	ldr	r3, [r7, #4]
 8101e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8101e5e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8101e60:	687b      	ldr	r3, [r7, #4]
 8101e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101e64:	3b01      	subs	r3, #1
 8101e66:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8101e68:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8101e6c:	687b      	ldr	r3, [r7, #4]
 8101e6e:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8101e70:	687b      	ldr	r3, [r7, #4]
 8101e72:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8101e74:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8101e76:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8101e78:	687b      	ldr	r3, [r7, #4]
 8101e7a:	685b      	ldr	r3, [r3, #4]
 8101e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101e80:	d107      	bne.n	8101e92 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8101e82:	687b      	ldr	r3, [r7, #4]
 8101e84:	681b      	ldr	r3, [r3, #0]
 8101e86:	691a      	ldr	r2, [r3, #16]
 8101e88:	687b      	ldr	r3, [r7, #4]
 8101e8a:	681b      	ldr	r3, [r3, #0]
 8101e8c:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8101e90:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8101e92:	687b      	ldr	r3, [r7, #4]
 8101e94:	681b      	ldr	r3, [r3, #0]
 8101e96:	2200      	movs	r2, #0
 8101e98:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8101e9a:	687b      	ldr	r3, [r7, #4]
 8101e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8101e9e:	2b00      	cmp	r3, #0
 8101ea0:	da11      	bge.n	8101ec6 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8101ea2:	687b      	ldr	r3, [r7, #4]
 8101ea4:	681b      	ldr	r3, [r3, #0]
 8101ea6:	695a      	ldr	r2, [r3, #20]
 8101ea8:	687b      	ldr	r3, [r7, #4]
 8101eaa:	681b      	ldr	r3, [r3, #0]
 8101eac:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8101eb0:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8101eb2:	687b      	ldr	r3, [r7, #4]
 8101eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8101eb6:	425b      	negs	r3, r3
 8101eb8:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8101eba:	687b      	ldr	r3, [r7, #4]
 8101ebc:	681b      	ldr	r3, [r3, #0]
 8101ebe:	68fa      	ldr	r2, [r7, #12]
 8101ec0:	b292      	uxth	r2, r2
 8101ec2:	621a      	str	r2, [r3, #32]
 8101ec4:	e006      	b.n	8101ed4 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8101ec6:	687b      	ldr	r3, [r7, #4]
 8101ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8101eca:	461a      	mov	r2, r3
 8101ecc:	687b      	ldr	r3, [r7, #4]
 8101ece:	681b      	ldr	r3, [r3, #0]
 8101ed0:	b292      	uxth	r2, r2
 8101ed2:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8101ed4:	687b      	ldr	r3, [r7, #4]
 8101ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101ed8:	2b00      	cmp	r3, #0
 8101eda:	da15      	bge.n	8101f08 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8101edc:	687b      	ldr	r3, [r7, #4]
 8101ede:	681b      	ldr	r3, [r3, #0]
 8101ee0:	695a      	ldr	r2, [r3, #20]
 8101ee2:	687b      	ldr	r3, [r7, #4]
 8101ee4:	681b      	ldr	r3, [r3, #0]
 8101ee6:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8101eea:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8101eec:	687b      	ldr	r3, [r7, #4]
 8101eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101ef0:	425b      	negs	r3, r3
 8101ef2:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8101ef4:	687b      	ldr	r3, [r7, #4]
 8101ef6:	681b      	ldr	r3, [r3, #0]
 8101ef8:	6a19      	ldr	r1, [r3, #32]
 8101efa:	68fb      	ldr	r3, [r7, #12]
 8101efc:	041a      	lsls	r2, r3, #16
 8101efe:	687b      	ldr	r3, [r7, #4]
 8101f00:	681b      	ldr	r3, [r3, #0]
 8101f02:	430a      	orrs	r2, r1
 8101f04:	621a      	str	r2, [r3, #32]
 8101f06:	e009      	b.n	8101f1c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8101f08:	687b      	ldr	r3, [r7, #4]
 8101f0a:	681b      	ldr	r3, [r3, #0]
 8101f0c:	6a19      	ldr	r1, [r3, #32]
 8101f0e:	687b      	ldr	r3, [r7, #4]
 8101f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8101f12:	041a      	lsls	r2, r3, #16
 8101f14:	687b      	ldr	r3, [r7, #4]
 8101f16:	681b      	ldr	r3, [r3, #0]
 8101f18:	430a      	orrs	r2, r1
 8101f1a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8101f1c:	687b      	ldr	r3, [r7, #4]
 8101f1e:	685b      	ldr	r3, [r3, #4]
 8101f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101f24:	d006      	beq.n	8101f34 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8101f26:	687b      	ldr	r3, [r7, #4]
 8101f28:	685a      	ldr	r2, [r3, #4]
 8101f2a:	687b      	ldr	r3, [r7, #4]
 8101f2c:	681b      	ldr	r3, [r3, #0]
 8101f2e:	b2d2      	uxtb	r2, r2
 8101f30:	629a      	str	r2, [r3, #40]	@ 0x28
 8101f32:	e003      	b.n	8101f3c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8101f34:	687b      	ldr	r3, [r7, #4]
 8101f36:	681b      	ldr	r3, [r3, #0]
 8101f38:	2200      	movs	r2, #0
 8101f3a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8101f3c:	687b      	ldr	r3, [r7, #4]
 8101f3e:	681b      	ldr	r3, [r3, #0]
 8101f40:	2200      	movs	r2, #0
 8101f42:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8101f44:	bf00      	nop
 8101f46:	3714      	adds	r7, #20
 8101f48:	46bd      	mov	sp, r7
 8101f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f4e:	4770      	bx	lr

08101f50 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101f50:	b580      	push	{r7, lr}
 8101f52:	b084      	sub	sp, #16
 8101f54:	af00      	add	r7, sp, #0
 8101f56:	60f8      	str	r0, [r7, #12]
 8101f58:	460b      	mov	r3, r1
 8101f5a:	607a      	str	r2, [r7, #4]
 8101f5c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8101f5e:	4b37      	ldr	r3, [pc, #220]	@ (810203c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101f60:	681b      	ldr	r3, [r3, #0]
 8101f62:	f023 0201 	bic.w	r2, r3, #1
 8101f66:	4935      	ldr	r1, [pc, #212]	@ (810203c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101f68:	68fb      	ldr	r3, [r7, #12]
 8101f6a:	4313      	orrs	r3, r2
 8101f6c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8101f6e:	687b      	ldr	r3, [r7, #4]
 8101f70:	2b00      	cmp	r3, #0
 8101f72:	d123      	bne.n	8101fbc <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101f74:	f7ff f996 	bl	81012a4 <HAL_GetCurrentCPUID>
 8101f78:	4603      	mov	r3, r0
 8101f7a:	2b03      	cmp	r3, #3
 8101f7c:	d158      	bne.n	8102030 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8101f7e:	4b2f      	ldr	r3, [pc, #188]	@ (810203c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101f80:	691b      	ldr	r3, [r3, #16]
 8101f82:	4a2e      	ldr	r2, [pc, #184]	@ (810203c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101f84:	f023 0301 	bic.w	r3, r3, #1
 8101f88:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101f8a:	4b2d      	ldr	r3, [pc, #180]	@ (8102040 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101f8c:	691b      	ldr	r3, [r3, #16]
 8101f8e:	4a2c      	ldr	r2, [pc, #176]	@ (8102040 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101f90:	f043 0304 	orr.w	r3, r3, #4
 8101f94:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101f96:	f3bf 8f4f 	dsb	sy
}
 8101f9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101f9c:	f3bf 8f6f 	isb	sy
}
 8101fa0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101fa2:	7afb      	ldrb	r3, [r7, #11]
 8101fa4:	2b01      	cmp	r3, #1
 8101fa6:	d101      	bne.n	8101fac <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101fa8:	bf30      	wfi
 8101faa:	e000      	b.n	8101fae <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101fac:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101fae:	4b24      	ldr	r3, [pc, #144]	@ (8102040 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101fb0:	691b      	ldr	r3, [r3, #16]
 8101fb2:	4a23      	ldr	r2, [pc, #140]	@ (8102040 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101fb4:	f023 0304 	bic.w	r3, r3, #4
 8101fb8:	6113      	str	r3, [r2, #16]
 8101fba:	e03c      	b.n	8102036 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101fbc:	687b      	ldr	r3, [r7, #4]
 8101fbe:	2b01      	cmp	r3, #1
 8101fc0:	d123      	bne.n	810200a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101fc2:	f7ff f96f 	bl	81012a4 <HAL_GetCurrentCPUID>
 8101fc6:	4603      	mov	r3, r0
 8101fc8:	2b01      	cmp	r3, #1
 8101fca:	d133      	bne.n	8102034 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101fcc:	4b1b      	ldr	r3, [pc, #108]	@ (810203c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101fce:	695b      	ldr	r3, [r3, #20]
 8101fd0:	4a1a      	ldr	r2, [pc, #104]	@ (810203c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101fd2:	f023 0302 	bic.w	r3, r3, #2
 8101fd6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101fd8:	4b19      	ldr	r3, [pc, #100]	@ (8102040 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101fda:	691b      	ldr	r3, [r3, #16]
 8101fdc:	4a18      	ldr	r2, [pc, #96]	@ (8102040 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101fde:	f043 0304 	orr.w	r3, r3, #4
 8101fe2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101fe4:	f3bf 8f4f 	dsb	sy
}
 8101fe8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101fea:	f3bf 8f6f 	isb	sy
}
 8101fee:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101ff0:	7afb      	ldrb	r3, [r7, #11]
 8101ff2:	2b01      	cmp	r3, #1
 8101ff4:	d101      	bne.n	8101ffa <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101ff6:	bf30      	wfi
 8101ff8:	e000      	b.n	8101ffc <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101ffa:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101ffc:	4b10      	ldr	r3, [pc, #64]	@ (8102040 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101ffe:	691b      	ldr	r3, [r3, #16]
 8102000:	4a0f      	ldr	r2, [pc, #60]	@ (8102040 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102002:	f023 0304 	bic.w	r3, r3, #4
 8102006:	6113      	str	r3, [r2, #16]
 8102008:	e015      	b.n	8102036 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810200a:	f7ff f94b 	bl	81012a4 <HAL_GetCurrentCPUID>
 810200e:	4603      	mov	r3, r0
 8102010:	2b03      	cmp	r3, #3
 8102012:	d106      	bne.n	8102022 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102014:	4b09      	ldr	r3, [pc, #36]	@ (810203c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102016:	691b      	ldr	r3, [r3, #16]
 8102018:	4a08      	ldr	r2, [pc, #32]	@ (810203c <HAL_PWREx_EnterSTOPMode+0xec>)
 810201a:	f023 0304 	bic.w	r3, r3, #4
 810201e:	6113      	str	r3, [r2, #16]
 8102020:	e009      	b.n	8102036 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102022:	4b06      	ldr	r3, [pc, #24]	@ (810203c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102024:	695b      	ldr	r3, [r3, #20]
 8102026:	4a05      	ldr	r2, [pc, #20]	@ (810203c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102028:	f023 0304 	bic.w	r3, r3, #4
 810202c:	6153      	str	r3, [r2, #20]
 810202e:	e002      	b.n	8102036 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102030:	bf00      	nop
 8102032:	e000      	b.n	8102036 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102034:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102036:	3710      	adds	r7, #16
 8102038:	46bd      	mov	sp, r7
 810203a:	bd80      	pop	{r7, pc}
 810203c:	58024800 	.word	0x58024800
 8102040:	e000ed00 	.word	0xe000ed00

08102044 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102044:	b580      	push	{r7, lr}
 8102046:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102048:	f7ff f92c 	bl	81012a4 <HAL_GetCurrentCPUID>
 810204c:	4603      	mov	r3, r0
 810204e:	2b03      	cmp	r3, #3
 8102050:	d101      	bne.n	8102056 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102052:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102054:	e001      	b.n	810205a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102056:	bf40      	sev
    __WFE ();
 8102058:	bf20      	wfe
}
 810205a:	bf00      	nop
 810205c:	bd80      	pop	{r7, pc}
	...

08102060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102060:	b480      	push	{r7}
 8102062:	b089      	sub	sp, #36	@ 0x24
 8102064:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102066:	4bb3      	ldr	r3, [pc, #716]	@ (8102334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102068:	691b      	ldr	r3, [r3, #16]
 810206a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810206e:	2b18      	cmp	r3, #24
 8102070:	f200 8155 	bhi.w	810231e <HAL_RCC_GetSysClockFreq+0x2be>
 8102074:	a201      	add	r2, pc, #4	@ (adr r2, 810207c <HAL_RCC_GetSysClockFreq+0x1c>)
 8102076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810207a:	bf00      	nop
 810207c:	081020e1 	.word	0x081020e1
 8102080:	0810231f 	.word	0x0810231f
 8102084:	0810231f 	.word	0x0810231f
 8102088:	0810231f 	.word	0x0810231f
 810208c:	0810231f 	.word	0x0810231f
 8102090:	0810231f 	.word	0x0810231f
 8102094:	0810231f 	.word	0x0810231f
 8102098:	0810231f 	.word	0x0810231f
 810209c:	08102107 	.word	0x08102107
 81020a0:	0810231f 	.word	0x0810231f
 81020a4:	0810231f 	.word	0x0810231f
 81020a8:	0810231f 	.word	0x0810231f
 81020ac:	0810231f 	.word	0x0810231f
 81020b0:	0810231f 	.word	0x0810231f
 81020b4:	0810231f 	.word	0x0810231f
 81020b8:	0810231f 	.word	0x0810231f
 81020bc:	0810210d 	.word	0x0810210d
 81020c0:	0810231f 	.word	0x0810231f
 81020c4:	0810231f 	.word	0x0810231f
 81020c8:	0810231f 	.word	0x0810231f
 81020cc:	0810231f 	.word	0x0810231f
 81020d0:	0810231f 	.word	0x0810231f
 81020d4:	0810231f 	.word	0x0810231f
 81020d8:	0810231f 	.word	0x0810231f
 81020dc:	08102113 	.word	0x08102113
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81020e0:	4b94      	ldr	r3, [pc, #592]	@ (8102334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81020e2:	681b      	ldr	r3, [r3, #0]
 81020e4:	f003 0320 	and.w	r3, r3, #32
 81020e8:	2b00      	cmp	r3, #0
 81020ea:	d009      	beq.n	8102100 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81020ec:	4b91      	ldr	r3, [pc, #580]	@ (8102334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81020ee:	681b      	ldr	r3, [r3, #0]
 81020f0:	08db      	lsrs	r3, r3, #3
 81020f2:	f003 0303 	and.w	r3, r3, #3
 81020f6:	4a90      	ldr	r2, [pc, #576]	@ (8102338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81020f8:	fa22 f303 	lsr.w	r3, r2, r3
 81020fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81020fe:	e111      	b.n	8102324 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102100:	4b8d      	ldr	r3, [pc, #564]	@ (8102338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102102:	61bb      	str	r3, [r7, #24]
      break;
 8102104:	e10e      	b.n	8102324 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8102106:	4b8d      	ldr	r3, [pc, #564]	@ (810233c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102108:	61bb      	str	r3, [r7, #24]
      break;
 810210a:	e10b      	b.n	8102324 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 810210c:	4b8c      	ldr	r3, [pc, #560]	@ (8102340 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810210e:	61bb      	str	r3, [r7, #24]
      break;
 8102110:	e108      	b.n	8102324 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102112:	4b88      	ldr	r3, [pc, #544]	@ (8102334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102116:	f003 0303 	and.w	r3, r3, #3
 810211a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 810211c:	4b85      	ldr	r3, [pc, #532]	@ (8102334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810211e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102120:	091b      	lsrs	r3, r3, #4
 8102122:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8102126:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102128:	4b82      	ldr	r3, [pc, #520]	@ (8102334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810212a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810212c:	f003 0301 	and.w	r3, r3, #1
 8102130:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8102132:	4b80      	ldr	r3, [pc, #512]	@ (8102334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8102136:	08db      	lsrs	r3, r3, #3
 8102138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810213c:	68fa      	ldr	r2, [r7, #12]
 810213e:	fb02 f303 	mul.w	r3, r2, r3
 8102142:	ee07 3a90 	vmov	s15, r3
 8102146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810214a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810214e:	693b      	ldr	r3, [r7, #16]
 8102150:	2b00      	cmp	r3, #0
 8102152:	f000 80e1 	beq.w	8102318 <HAL_RCC_GetSysClockFreq+0x2b8>
 8102156:	697b      	ldr	r3, [r7, #20]
 8102158:	2b02      	cmp	r3, #2
 810215a:	f000 8083 	beq.w	8102264 <HAL_RCC_GetSysClockFreq+0x204>
 810215e:	697b      	ldr	r3, [r7, #20]
 8102160:	2b02      	cmp	r3, #2
 8102162:	f200 80a1 	bhi.w	81022a8 <HAL_RCC_GetSysClockFreq+0x248>
 8102166:	697b      	ldr	r3, [r7, #20]
 8102168:	2b00      	cmp	r3, #0
 810216a:	d003      	beq.n	8102174 <HAL_RCC_GetSysClockFreq+0x114>
 810216c:	697b      	ldr	r3, [r7, #20]
 810216e:	2b01      	cmp	r3, #1
 8102170:	d056      	beq.n	8102220 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102172:	e099      	b.n	81022a8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102174:	4b6f      	ldr	r3, [pc, #444]	@ (8102334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102176:	681b      	ldr	r3, [r3, #0]
 8102178:	f003 0320 	and.w	r3, r3, #32
 810217c:	2b00      	cmp	r3, #0
 810217e:	d02d      	beq.n	81021dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102180:	4b6c      	ldr	r3, [pc, #432]	@ (8102334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102182:	681b      	ldr	r3, [r3, #0]
 8102184:	08db      	lsrs	r3, r3, #3
 8102186:	f003 0303 	and.w	r3, r3, #3
 810218a:	4a6b      	ldr	r2, [pc, #428]	@ (8102338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810218c:	fa22 f303 	lsr.w	r3, r2, r3
 8102190:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102192:	687b      	ldr	r3, [r7, #4]
 8102194:	ee07 3a90 	vmov	s15, r3
 8102198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810219c:	693b      	ldr	r3, [r7, #16]
 810219e:	ee07 3a90 	vmov	s15, r3
 81021a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81021a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81021aa:	4b62      	ldr	r3, [pc, #392]	@ (8102334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81021ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81021b2:	ee07 3a90 	vmov	s15, r3
 81021b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81021ba:	ed97 6a02 	vldr	s12, [r7, #8]
 81021be:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8102344 <HAL_RCC_GetSysClockFreq+0x2e4>
 81021c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81021c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81021ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81021ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81021d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81021d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81021da:	e087      	b.n	81022ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81021dc:	693b      	ldr	r3, [r7, #16]
 81021de:	ee07 3a90 	vmov	s15, r3
 81021e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81021e6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8102348 <HAL_RCC_GetSysClockFreq+0x2e8>
 81021ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81021ee:	4b51      	ldr	r3, [pc, #324]	@ (8102334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81021f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81021f6:	ee07 3a90 	vmov	s15, r3
 81021fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81021fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8102202:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8102344 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810220a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810220e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102216:	ee67 7a27 	vmul.f32	s15, s14, s15
 810221a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810221e:	e065      	b.n	81022ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102220:	693b      	ldr	r3, [r7, #16]
 8102222:	ee07 3a90 	vmov	s15, r3
 8102226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810222a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 810234c <HAL_RCC_GetSysClockFreq+0x2ec>
 810222e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102232:	4b40      	ldr	r3, [pc, #256]	@ (8102334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810223a:	ee07 3a90 	vmov	s15, r3
 810223e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102242:	ed97 6a02 	vldr	s12, [r7, #8]
 8102246:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8102344 <HAL_RCC_GetSysClockFreq+0x2e4>
 810224a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810224e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810225a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810225e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102262:	e043      	b.n	81022ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102264:	693b      	ldr	r3, [r7, #16]
 8102266:	ee07 3a90 	vmov	s15, r3
 810226a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810226e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8102350 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102276:	4b2f      	ldr	r3, [pc, #188]	@ (8102334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810227a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810227e:	ee07 3a90 	vmov	s15, r3
 8102282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102286:	ed97 6a02 	vldr	s12, [r7, #8]
 810228a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8102344 <HAL_RCC_GetSysClockFreq+0x2e4>
 810228e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810229a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810229e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81022a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81022a6:	e021      	b.n	81022ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81022a8:	693b      	ldr	r3, [r7, #16]
 81022aa:	ee07 3a90 	vmov	s15, r3
 81022ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81022b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 810234c <HAL_RCC_GetSysClockFreq+0x2ec>
 81022b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81022ba:	4b1e      	ldr	r3, [pc, #120]	@ (8102334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81022be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81022c2:	ee07 3a90 	vmov	s15, r3
 81022c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81022ca:	ed97 6a02 	vldr	s12, [r7, #8]
 81022ce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8102344 <HAL_RCC_GetSysClockFreq+0x2e4>
 81022d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81022d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81022da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81022de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81022e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81022e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81022ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81022ec:	4b11      	ldr	r3, [pc, #68]	@ (8102334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81022ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81022f0:	0a5b      	lsrs	r3, r3, #9
 81022f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81022f6:	3301      	adds	r3, #1
 81022f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81022fa:	683b      	ldr	r3, [r7, #0]
 81022fc:	ee07 3a90 	vmov	s15, r3
 8102300:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102304:	edd7 6a07 	vldr	s13, [r7, #28]
 8102308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810230c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102310:	ee17 3a90 	vmov	r3, s15
 8102314:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8102316:	e005      	b.n	8102324 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8102318:	2300      	movs	r3, #0
 810231a:	61bb      	str	r3, [r7, #24]
      break;
 810231c:	e002      	b.n	8102324 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810231e:	4b07      	ldr	r3, [pc, #28]	@ (810233c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102320:	61bb      	str	r3, [r7, #24]
      break;
 8102322:	bf00      	nop
  }

  return sysclockfreq;
 8102324:	69bb      	ldr	r3, [r7, #24]
}
 8102326:	4618      	mov	r0, r3
 8102328:	3724      	adds	r7, #36	@ 0x24
 810232a:	46bd      	mov	sp, r7
 810232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102330:	4770      	bx	lr
 8102332:	bf00      	nop
 8102334:	58024400 	.word	0x58024400
 8102338:	03d09000 	.word	0x03d09000
 810233c:	003d0900 	.word	0x003d0900
 8102340:	017d7840 	.word	0x017d7840
 8102344:	46000000 	.word	0x46000000
 8102348:	4c742400 	.word	0x4c742400
 810234c:	4a742400 	.word	0x4a742400
 8102350:	4bbebc20 	.word	0x4bbebc20

08102354 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8102358:	b0ca      	sub	sp, #296	@ 0x128
 810235a:	af00      	add	r7, sp, #0
 810235c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102360:	2300      	movs	r3, #0
 8102362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102366:	2300      	movs	r3, #0
 8102368:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810236c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102374:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8102378:	2500      	movs	r5, #0
 810237a:	ea54 0305 	orrs.w	r3, r4, r5
 810237e:	d049      	beq.n	8102414 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8102380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102384:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8102386:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810238a:	d02f      	beq.n	81023ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 810238c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102390:	d828      	bhi.n	81023e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102392:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102396:	d01a      	beq.n	81023ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8102398:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810239c:	d822      	bhi.n	81023e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810239e:	2b00      	cmp	r3, #0
 81023a0:	d003      	beq.n	81023aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 81023a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81023a6:	d007      	beq.n	81023b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81023a8:	e01c      	b.n	81023e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81023aa:	4bb8      	ldr	r3, [pc, #736]	@ (810268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81023ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81023ae:	4ab7      	ldr	r2, [pc, #732]	@ (810268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81023b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81023b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81023b6:	e01a      	b.n	81023ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81023b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023bc:	3308      	adds	r3, #8
 81023be:	2102      	movs	r1, #2
 81023c0:	4618      	mov	r0, r3
 81023c2:	f001 f9d1 	bl	8103768 <RCCEx_PLL2_Config>
 81023c6:	4603      	mov	r3, r0
 81023c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81023cc:	e00f      	b.n	81023ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81023ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023d2:	3328      	adds	r3, #40	@ 0x28
 81023d4:	2102      	movs	r1, #2
 81023d6:	4618      	mov	r0, r3
 81023d8:	f001 fa78 	bl	81038cc <RCCEx_PLL3_Config>
 81023dc:	4603      	mov	r3, r0
 81023de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81023e2:	e004      	b.n	81023ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81023e4:	2301      	movs	r3, #1
 81023e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81023ea:	e000      	b.n	81023ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 81023ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 81023ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81023f2:	2b00      	cmp	r3, #0
 81023f4:	d10a      	bne.n	810240c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81023f6:	4ba5      	ldr	r3, [pc, #660]	@ (810268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81023f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81023fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81023fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102402:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8102404:	4aa1      	ldr	r2, [pc, #644]	@ (810268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102406:	430b      	orrs	r3, r1
 8102408:	6513      	str	r3, [r2, #80]	@ 0x50
 810240a:	e003      	b.n	8102414 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810240c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102410:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102418:	e9d3 2300 	ldrd	r2, r3, [r3]
 810241c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8102420:	f04f 0900 	mov.w	r9, #0
 8102424:	ea58 0309 	orrs.w	r3, r8, r9
 8102428:	d047      	beq.n	81024ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810242a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810242e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102430:	2b04      	cmp	r3, #4
 8102432:	d82a      	bhi.n	810248a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8102434:	a201      	add	r2, pc, #4	@ (adr r2, 810243c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8102436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810243a:	bf00      	nop
 810243c:	08102451 	.word	0x08102451
 8102440:	0810245f 	.word	0x0810245f
 8102444:	08102475 	.word	0x08102475
 8102448:	08102493 	.word	0x08102493
 810244c:	08102493 	.word	0x08102493
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102450:	4b8e      	ldr	r3, [pc, #568]	@ (810268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102454:	4a8d      	ldr	r2, [pc, #564]	@ (810268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810245a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810245c:	e01a      	b.n	8102494 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810245e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102462:	3308      	adds	r3, #8
 8102464:	2100      	movs	r1, #0
 8102466:	4618      	mov	r0, r3
 8102468:	f001 f97e 	bl	8103768 <RCCEx_PLL2_Config>
 810246c:	4603      	mov	r3, r0
 810246e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102472:	e00f      	b.n	8102494 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102478:	3328      	adds	r3, #40	@ 0x28
 810247a:	2100      	movs	r1, #0
 810247c:	4618      	mov	r0, r3
 810247e:	f001 fa25 	bl	81038cc <RCCEx_PLL3_Config>
 8102482:	4603      	mov	r3, r0
 8102484:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102488:	e004      	b.n	8102494 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810248a:	2301      	movs	r3, #1
 810248c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102490:	e000      	b.n	8102494 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8102492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102498:	2b00      	cmp	r3, #0
 810249a:	d10a      	bne.n	81024b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810249c:	4b7b      	ldr	r3, [pc, #492]	@ (810268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810249e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81024a0:	f023 0107 	bic.w	r1, r3, #7
 81024a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81024aa:	4a78      	ldr	r2, [pc, #480]	@ (810268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81024ac:	430b      	orrs	r3, r1
 81024ae:	6513      	str	r3, [r2, #80]	@ 0x50
 81024b0:	e003      	b.n	81024ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81024b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81024b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81024ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81024c2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 81024c6:	f04f 0b00 	mov.w	fp, #0
 81024ca:	ea5a 030b 	orrs.w	r3, sl, fp
 81024ce:	d04c      	beq.n	810256a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81024d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81024d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81024da:	d030      	beq.n	810253e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81024dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81024e0:	d829      	bhi.n	8102536 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81024e2:	2bc0      	cmp	r3, #192	@ 0xc0
 81024e4:	d02d      	beq.n	8102542 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81024e6:	2bc0      	cmp	r3, #192	@ 0xc0
 81024e8:	d825      	bhi.n	8102536 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81024ea:	2b80      	cmp	r3, #128	@ 0x80
 81024ec:	d018      	beq.n	8102520 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81024ee:	2b80      	cmp	r3, #128	@ 0x80
 81024f0:	d821      	bhi.n	8102536 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81024f2:	2b00      	cmp	r3, #0
 81024f4:	d002      	beq.n	81024fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81024f6:	2b40      	cmp	r3, #64	@ 0x40
 81024f8:	d007      	beq.n	810250a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81024fa:	e01c      	b.n	8102536 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81024fc:	4b63      	ldr	r3, [pc, #396]	@ (810268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81024fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102500:	4a62      	ldr	r2, [pc, #392]	@ (810268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102508:	e01c      	b.n	8102544 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810250a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810250e:	3308      	adds	r3, #8
 8102510:	2100      	movs	r1, #0
 8102512:	4618      	mov	r0, r3
 8102514:	f001 f928 	bl	8103768 <RCCEx_PLL2_Config>
 8102518:	4603      	mov	r3, r0
 810251a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810251e:	e011      	b.n	8102544 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102524:	3328      	adds	r3, #40	@ 0x28
 8102526:	2100      	movs	r1, #0
 8102528:	4618      	mov	r0, r3
 810252a:	f001 f9cf 	bl	81038cc <RCCEx_PLL3_Config>
 810252e:	4603      	mov	r3, r0
 8102530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102534:	e006      	b.n	8102544 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102536:	2301      	movs	r3, #1
 8102538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810253c:	e002      	b.n	8102544 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810253e:	bf00      	nop
 8102540:	e000      	b.n	8102544 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8102542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102548:	2b00      	cmp	r3, #0
 810254a:	d10a      	bne.n	8102562 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810254c:	4b4f      	ldr	r3, [pc, #316]	@ (810268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810254e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102550:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8102554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810255a:	4a4c      	ldr	r2, [pc, #304]	@ (810268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810255c:	430b      	orrs	r3, r1
 810255e:	6513      	str	r3, [r2, #80]	@ 0x50
 8102560:	e003      	b.n	810256a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102566:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810256a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810256e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102572:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8102576:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 810257a:	2300      	movs	r3, #0
 810257c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8102580:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8102584:	460b      	mov	r3, r1
 8102586:	4313      	orrs	r3, r2
 8102588:	d053      	beq.n	8102632 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810258a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810258e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8102592:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8102596:	d035      	beq.n	8102604 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8102598:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810259c:	d82e      	bhi.n	81025fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810259e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81025a2:	d031      	beq.n	8102608 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81025a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81025a8:	d828      	bhi.n	81025fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81025aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81025ae:	d01a      	beq.n	81025e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 81025b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81025b4:	d822      	bhi.n	81025fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81025b6:	2b00      	cmp	r3, #0
 81025b8:	d003      	beq.n	81025c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 81025ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81025be:	d007      	beq.n	81025d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 81025c0:	e01c      	b.n	81025fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81025c2:	4b32      	ldr	r3, [pc, #200]	@ (810268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81025c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81025c6:	4a31      	ldr	r2, [pc, #196]	@ (810268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81025c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81025cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81025ce:	e01c      	b.n	810260a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81025d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025d4:	3308      	adds	r3, #8
 81025d6:	2100      	movs	r1, #0
 81025d8:	4618      	mov	r0, r3
 81025da:	f001 f8c5 	bl	8103768 <RCCEx_PLL2_Config>
 81025de:	4603      	mov	r3, r0
 81025e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81025e4:	e011      	b.n	810260a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81025e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025ea:	3328      	adds	r3, #40	@ 0x28
 81025ec:	2100      	movs	r1, #0
 81025ee:	4618      	mov	r0, r3
 81025f0:	f001 f96c 	bl	81038cc <RCCEx_PLL3_Config>
 81025f4:	4603      	mov	r3, r0
 81025f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81025fa:	e006      	b.n	810260a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81025fc:	2301      	movs	r3, #1
 81025fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102602:	e002      	b.n	810260a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8102604:	bf00      	nop
 8102606:	e000      	b.n	810260a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8102608:	bf00      	nop
    }

    if (ret == HAL_OK)
 810260a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810260e:	2b00      	cmp	r3, #0
 8102610:	d10b      	bne.n	810262a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102612:	4b1e      	ldr	r3, [pc, #120]	@ (810268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102616:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810261a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810261e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8102622:	4a1a      	ldr	r2, [pc, #104]	@ (810268c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102624:	430b      	orrs	r3, r1
 8102626:	6593      	str	r3, [r2, #88]	@ 0x58
 8102628:	e003      	b.n	8102632 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810262a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810262e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8102632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102636:	e9d3 2300 	ldrd	r2, r3, [r3]
 810263a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810263e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8102642:	2300      	movs	r3, #0
 8102644:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8102648:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 810264c:	460b      	mov	r3, r1
 810264e:	4313      	orrs	r3, r2
 8102650:	d056      	beq.n	8102700 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8102652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102656:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810265a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810265e:	d038      	beq.n	81026d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8102660:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8102664:	d831      	bhi.n	81026ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102666:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810266a:	d034      	beq.n	81026d6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 810266c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8102670:	d82b      	bhi.n	81026ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102672:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8102676:	d01d      	beq.n	81026b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8102678:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810267c:	d825      	bhi.n	81026ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 810267e:	2b00      	cmp	r3, #0
 8102680:	d006      	beq.n	8102690 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8102682:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8102686:	d00a      	beq.n	810269e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8102688:	e01f      	b.n	81026ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 810268a:	bf00      	nop
 810268c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102690:	4ba2      	ldr	r3, [pc, #648]	@ (810291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102694:	4aa1      	ldr	r2, [pc, #644]	@ (810291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810269a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810269c:	e01c      	b.n	81026d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810269e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026a2:	3308      	adds	r3, #8
 81026a4:	2100      	movs	r1, #0
 81026a6:	4618      	mov	r0, r3
 81026a8:	f001 f85e 	bl	8103768 <RCCEx_PLL2_Config>
 81026ac:	4603      	mov	r3, r0
 81026ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81026b2:	e011      	b.n	81026d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81026b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026b8:	3328      	adds	r3, #40	@ 0x28
 81026ba:	2100      	movs	r1, #0
 81026bc:	4618      	mov	r0, r3
 81026be:	f001 f905 	bl	81038cc <RCCEx_PLL3_Config>
 81026c2:	4603      	mov	r3, r0
 81026c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81026c8:	e006      	b.n	81026d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81026ca:	2301      	movs	r3, #1
 81026cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81026d0:	e002      	b.n	81026d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81026d2:	bf00      	nop
 81026d4:	e000      	b.n	81026d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81026d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81026d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81026dc:	2b00      	cmp	r3, #0
 81026de:	d10b      	bne.n	81026f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81026e0:	4b8e      	ldr	r3, [pc, #568]	@ (810291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81026e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81026e4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81026e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81026f0:	4a8a      	ldr	r2, [pc, #552]	@ (810291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81026f2:	430b      	orrs	r3, r1
 81026f4:	6593      	str	r3, [r2, #88]	@ 0x58
 81026f6:	e003      	b.n	8102700 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81026f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81026fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102708:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 810270c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8102710:	2300      	movs	r3, #0
 8102712:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8102716:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 810271a:	460b      	mov	r3, r1
 810271c:	4313      	orrs	r3, r2
 810271e:	d03a      	beq.n	8102796 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8102720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102726:	2b30      	cmp	r3, #48	@ 0x30
 8102728:	d01f      	beq.n	810276a <HAL_RCCEx_PeriphCLKConfig+0x416>
 810272a:	2b30      	cmp	r3, #48	@ 0x30
 810272c:	d819      	bhi.n	8102762 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810272e:	2b20      	cmp	r3, #32
 8102730:	d00c      	beq.n	810274c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8102732:	2b20      	cmp	r3, #32
 8102734:	d815      	bhi.n	8102762 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8102736:	2b00      	cmp	r3, #0
 8102738:	d019      	beq.n	810276e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810273a:	2b10      	cmp	r3, #16
 810273c:	d111      	bne.n	8102762 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810273e:	4b77      	ldr	r3, [pc, #476]	@ (810291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102742:	4a76      	ldr	r2, [pc, #472]	@ (810291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102748:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810274a:	e011      	b.n	8102770 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810274c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102750:	3308      	adds	r3, #8
 8102752:	2102      	movs	r1, #2
 8102754:	4618      	mov	r0, r3
 8102756:	f001 f807 	bl	8103768 <RCCEx_PLL2_Config>
 810275a:	4603      	mov	r3, r0
 810275c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8102760:	e006      	b.n	8102770 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8102762:	2301      	movs	r3, #1
 8102764:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102768:	e002      	b.n	8102770 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810276a:	bf00      	nop
 810276c:	e000      	b.n	8102770 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810276e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102770:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102774:	2b00      	cmp	r3, #0
 8102776:	d10a      	bne.n	810278e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102778:	4b68      	ldr	r3, [pc, #416]	@ (810291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810277a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810277c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8102780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102786:	4a65      	ldr	r2, [pc, #404]	@ (810291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102788:	430b      	orrs	r3, r1
 810278a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810278c:	e003      	b.n	8102796 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810278e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102792:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8102796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810279a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810279e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81027a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 81027a6:	2300      	movs	r3, #0
 81027a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 81027ac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 81027b0:	460b      	mov	r3, r1
 81027b2:	4313      	orrs	r3, r2
 81027b4:	d051      	beq.n	810285a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81027b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81027bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81027c0:	d035      	beq.n	810282e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81027c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81027c6:	d82e      	bhi.n	8102826 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81027c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81027cc:	d031      	beq.n	8102832 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81027ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81027d2:	d828      	bhi.n	8102826 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81027d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81027d8:	d01a      	beq.n	8102810 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81027da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81027de:	d822      	bhi.n	8102826 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81027e0:	2b00      	cmp	r3, #0
 81027e2:	d003      	beq.n	81027ec <HAL_RCCEx_PeriphCLKConfig+0x498>
 81027e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81027e8:	d007      	beq.n	81027fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81027ea:	e01c      	b.n	8102826 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81027ec:	4b4b      	ldr	r3, [pc, #300]	@ (810291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81027ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81027f0:	4a4a      	ldr	r2, [pc, #296]	@ (810291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81027f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81027f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81027f8:	e01c      	b.n	8102834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81027fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027fe:	3308      	adds	r3, #8
 8102800:	2100      	movs	r1, #0
 8102802:	4618      	mov	r0, r3
 8102804:	f000 ffb0 	bl	8103768 <RCCEx_PLL2_Config>
 8102808:	4603      	mov	r3, r0
 810280a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810280e:	e011      	b.n	8102834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102814:	3328      	adds	r3, #40	@ 0x28
 8102816:	2100      	movs	r1, #0
 8102818:	4618      	mov	r0, r3
 810281a:	f001 f857 	bl	81038cc <RCCEx_PLL3_Config>
 810281e:	4603      	mov	r3, r0
 8102820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102824:	e006      	b.n	8102834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102826:	2301      	movs	r3, #1
 8102828:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810282c:	e002      	b.n	8102834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810282e:	bf00      	nop
 8102830:	e000      	b.n	8102834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8102832:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102834:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102838:	2b00      	cmp	r3, #0
 810283a:	d10a      	bne.n	8102852 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810283c:	4b37      	ldr	r3, [pc, #220]	@ (810291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810283e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102840:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8102844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810284a:	4a34      	ldr	r2, [pc, #208]	@ (810291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810284c:	430b      	orrs	r3, r1
 810284e:	6513      	str	r3, [r2, #80]	@ 0x50
 8102850:	e003      	b.n	810285a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102856:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810285a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102862:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8102866:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 810286a:	2300      	movs	r3, #0
 810286c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8102870:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8102874:	460b      	mov	r3, r1
 8102876:	4313      	orrs	r3, r2
 8102878:	d056      	beq.n	8102928 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810287a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810287e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102880:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8102884:	d033      	beq.n	81028ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8102886:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810288a:	d82c      	bhi.n	81028e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810288c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8102890:	d02f      	beq.n	81028f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8102892:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8102896:	d826      	bhi.n	81028e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102898:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810289c:	d02b      	beq.n	81028f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810289e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81028a2:	d820      	bhi.n	81028e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81028a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81028a8:	d012      	beq.n	81028d0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 81028aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81028ae:	d81a      	bhi.n	81028e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81028b0:	2b00      	cmp	r3, #0
 81028b2:	d022      	beq.n	81028fa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 81028b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81028b8:	d115      	bne.n	81028e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81028ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028be:	3308      	adds	r3, #8
 81028c0:	2101      	movs	r1, #1
 81028c2:	4618      	mov	r0, r3
 81028c4:	f000 ff50 	bl	8103768 <RCCEx_PLL2_Config>
 81028c8:	4603      	mov	r3, r0
 81028ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81028ce:	e015      	b.n	81028fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81028d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028d4:	3328      	adds	r3, #40	@ 0x28
 81028d6:	2101      	movs	r1, #1
 81028d8:	4618      	mov	r0, r3
 81028da:	f000 fff7 	bl	81038cc <RCCEx_PLL3_Config>
 81028de:	4603      	mov	r3, r0
 81028e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81028e4:	e00a      	b.n	81028fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81028e6:	2301      	movs	r3, #1
 81028e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81028ec:	e006      	b.n	81028fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81028ee:	bf00      	nop
 81028f0:	e004      	b.n	81028fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81028f2:	bf00      	nop
 81028f4:	e002      	b.n	81028fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81028f6:	bf00      	nop
 81028f8:	e000      	b.n	81028fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81028fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81028fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102900:	2b00      	cmp	r3, #0
 8102902:	d10d      	bne.n	8102920 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8102904:	4b05      	ldr	r3, [pc, #20]	@ (810291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102908:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 810290c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102910:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102912:	4a02      	ldr	r2, [pc, #8]	@ (810291c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102914:	430b      	orrs	r3, r1
 8102916:	6513      	str	r3, [r2, #80]	@ 0x50
 8102918:	e006      	b.n	8102928 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810291a:	bf00      	nop
 810291c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102924:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8102928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102930:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8102934:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8102938:	2300      	movs	r3, #0
 810293a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810293e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8102942:	460b      	mov	r3, r1
 8102944:	4313      	orrs	r3, r2
 8102946:	d055      	beq.n	81029f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8102948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810294c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102950:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102954:	d033      	beq.n	81029be <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8102956:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810295a:	d82c      	bhi.n	81029b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810295c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102960:	d02f      	beq.n	81029c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8102962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102966:	d826      	bhi.n	81029b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102968:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810296c:	d02b      	beq.n	81029c6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810296e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102972:	d820      	bhi.n	81029b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102974:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102978:	d012      	beq.n	81029a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810297a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810297e:	d81a      	bhi.n	81029b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102980:	2b00      	cmp	r3, #0
 8102982:	d022      	beq.n	81029ca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8102984:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102988:	d115      	bne.n	81029b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810298a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810298e:	3308      	adds	r3, #8
 8102990:	2101      	movs	r1, #1
 8102992:	4618      	mov	r0, r3
 8102994:	f000 fee8 	bl	8103768 <RCCEx_PLL2_Config>
 8102998:	4603      	mov	r3, r0
 810299a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810299e:	e015      	b.n	81029cc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81029a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029a4:	3328      	adds	r3, #40	@ 0x28
 81029a6:	2101      	movs	r1, #1
 81029a8:	4618      	mov	r0, r3
 81029aa:	f000 ff8f 	bl	81038cc <RCCEx_PLL3_Config>
 81029ae:	4603      	mov	r3, r0
 81029b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81029b4:	e00a      	b.n	81029cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81029b6:	2301      	movs	r3, #1
 81029b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81029bc:	e006      	b.n	81029cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81029be:	bf00      	nop
 81029c0:	e004      	b.n	81029cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81029c2:	bf00      	nop
 81029c4:	e002      	b.n	81029cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81029c6:	bf00      	nop
 81029c8:	e000      	b.n	81029cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81029ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 81029cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81029d0:	2b00      	cmp	r3, #0
 81029d2:	d10b      	bne.n	81029ec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81029d4:	4ba4      	ldr	r3, [pc, #656]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81029d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81029d8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81029dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81029e4:	4aa0      	ldr	r2, [pc, #640]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81029e6:	430b      	orrs	r3, r1
 81029e8:	6593      	str	r3, [r2, #88]	@ 0x58
 81029ea:	e003      	b.n	81029f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81029ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81029f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81029f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029fc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8102a00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8102a04:	2300      	movs	r3, #0
 8102a06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8102a0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8102a0e:	460b      	mov	r3, r1
 8102a10:	4313      	orrs	r3, r2
 8102a12:	d037      	beq.n	8102a84 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8102a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102a1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102a1e:	d00e      	beq.n	8102a3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8102a20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102a24:	d816      	bhi.n	8102a54 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8102a26:	2b00      	cmp	r3, #0
 8102a28:	d018      	beq.n	8102a5c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8102a2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102a2e:	d111      	bne.n	8102a54 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102a30:	4b8d      	ldr	r3, [pc, #564]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102a34:	4a8c      	ldr	r2, [pc, #560]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102a36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102a3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8102a3c:	e00f      	b.n	8102a5e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a42:	3308      	adds	r3, #8
 8102a44:	2101      	movs	r1, #1
 8102a46:	4618      	mov	r0, r3
 8102a48:	f000 fe8e 	bl	8103768 <RCCEx_PLL2_Config>
 8102a4c:	4603      	mov	r3, r0
 8102a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8102a52:	e004      	b.n	8102a5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102a54:	2301      	movs	r3, #1
 8102a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102a5a:	e000      	b.n	8102a5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8102a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102a62:	2b00      	cmp	r3, #0
 8102a64:	d10a      	bne.n	8102a7c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8102a66:	4b80      	ldr	r3, [pc, #512]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102a6a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8102a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102a74:	4a7c      	ldr	r2, [pc, #496]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102a76:	430b      	orrs	r3, r1
 8102a78:	6513      	str	r3, [r2, #80]	@ 0x50
 8102a7a:	e003      	b.n	8102a84 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102a80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8102a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a8c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8102a90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8102a94:	2300      	movs	r3, #0
 8102a96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8102a9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8102a9e:	460b      	mov	r3, r1
 8102aa0:	4313      	orrs	r3, r2
 8102aa2:	d039      	beq.n	8102b18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8102aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102aaa:	2b03      	cmp	r3, #3
 8102aac:	d81c      	bhi.n	8102ae8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8102aae:	a201      	add	r2, pc, #4	@ (adr r2, 8102ab4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8102ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102ab4:	08102af1 	.word	0x08102af1
 8102ab8:	08102ac5 	.word	0x08102ac5
 8102abc:	08102ad3 	.word	0x08102ad3
 8102ac0:	08102af1 	.word	0x08102af1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102ac4:	4b68      	ldr	r3, [pc, #416]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102ac8:	4a67      	ldr	r2, [pc, #412]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102aca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102ace:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8102ad0:	e00f      	b.n	8102af2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ad6:	3308      	adds	r3, #8
 8102ad8:	2102      	movs	r1, #2
 8102ada:	4618      	mov	r0, r3
 8102adc:	f000 fe44 	bl	8103768 <RCCEx_PLL2_Config>
 8102ae0:	4603      	mov	r3, r0
 8102ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8102ae6:	e004      	b.n	8102af2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8102ae8:	2301      	movs	r3, #1
 8102aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102aee:	e000      	b.n	8102af2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8102af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102af6:	2b00      	cmp	r3, #0
 8102af8:	d10a      	bne.n	8102b10 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8102afa:	4b5b      	ldr	r3, [pc, #364]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102afe:	f023 0103 	bic.w	r1, r3, #3
 8102b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102b08:	4a57      	ldr	r2, [pc, #348]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102b0a:	430b      	orrs	r3, r1
 8102b0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102b0e:	e003      	b.n	8102b18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8102b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b20:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8102b24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8102b28:	2300      	movs	r3, #0
 8102b2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8102b2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8102b32:	460b      	mov	r3, r1
 8102b34:	4313      	orrs	r3, r2
 8102b36:	f000 809f 	beq.w	8102c78 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8102b3a:	4b4c      	ldr	r3, [pc, #304]	@ (8102c6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8102b3c:	681b      	ldr	r3, [r3, #0]
 8102b3e:	4a4b      	ldr	r2, [pc, #300]	@ (8102c6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8102b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8102b44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8102b46:	f7fe fa13 	bl	8100f70 <HAL_GetTick>
 8102b4a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102b4e:	e00b      	b.n	8102b68 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8102b50:	f7fe fa0e 	bl	8100f70 <HAL_GetTick>
 8102b54:	4602      	mov	r2, r0
 8102b56:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8102b5a:	1ad3      	subs	r3, r2, r3
 8102b5c:	2b64      	cmp	r3, #100	@ 0x64
 8102b5e:	d903      	bls.n	8102b68 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8102b60:	2303      	movs	r3, #3
 8102b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102b66:	e005      	b.n	8102b74 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102b68:	4b40      	ldr	r3, [pc, #256]	@ (8102c6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8102b6a:	681b      	ldr	r3, [r3, #0]
 8102b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102b70:	2b00      	cmp	r3, #0
 8102b72:	d0ed      	beq.n	8102b50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8102b74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b78:	2b00      	cmp	r3, #0
 8102b7a:	d179      	bne.n	8102c70 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8102b7c:	4b3a      	ldr	r3, [pc, #232]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102b7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8102b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102b88:	4053      	eors	r3, r2
 8102b8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8102b8e:	2b00      	cmp	r3, #0
 8102b90:	d015      	beq.n	8102bbe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8102b92:	4b35      	ldr	r3, [pc, #212]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102b96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8102b9a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8102b9e:	4b32      	ldr	r3, [pc, #200]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102ba2:	4a31      	ldr	r2, [pc, #196]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8102ba8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8102baa:	4b2f      	ldr	r3, [pc, #188]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102bae:	4a2e      	ldr	r2, [pc, #184]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102bb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8102bb4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8102bb6:	4a2c      	ldr	r2, [pc, #176]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102bb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102bbc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8102bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102bca:	d118      	bne.n	8102bfe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8102bcc:	f7fe f9d0 	bl	8100f70 <HAL_GetTick>
 8102bd0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102bd4:	e00d      	b.n	8102bf2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8102bd6:	f7fe f9cb 	bl	8100f70 <HAL_GetTick>
 8102bda:	4602      	mov	r2, r0
 8102bdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8102be0:	1ad2      	subs	r2, r2, r3
 8102be2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8102be6:	429a      	cmp	r2, r3
 8102be8:	d903      	bls.n	8102bf2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8102bea:	2303      	movs	r3, #3
 8102bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8102bf0:	e005      	b.n	8102bfe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102bf6:	f003 0302 	and.w	r3, r3, #2
 8102bfa:	2b00      	cmp	r3, #0
 8102bfc:	d0eb      	beq.n	8102bd6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8102bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c02:	2b00      	cmp	r3, #0
 8102c04:	d12b      	bne.n	8102c5e <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8102c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8102c12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102c16:	d110      	bne.n	8102c3a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8102c18:	4b13      	ldr	r3, [pc, #76]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102c1a:	691b      	ldr	r3, [r3, #16]
 8102c1c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8102c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102c28:	091b      	lsrs	r3, r3, #4
 8102c2a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8102c2e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8102c32:	4a0d      	ldr	r2, [pc, #52]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102c34:	430b      	orrs	r3, r1
 8102c36:	6113      	str	r3, [r2, #16]
 8102c38:	e005      	b.n	8102c46 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8102c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102c3c:	691b      	ldr	r3, [r3, #16]
 8102c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102c40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8102c44:	6113      	str	r3, [r2, #16]
 8102c46:	4b08      	ldr	r3, [pc, #32]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102c48:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8102c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8102c56:	4a04      	ldr	r2, [pc, #16]	@ (8102c68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102c58:	430b      	orrs	r3, r1
 8102c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8102c5c:	e00c      	b.n	8102c78 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8102c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8102c66:	e007      	b.n	8102c78 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8102c68:	58024400 	.word	0x58024400
 8102c6c:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8102c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c80:	f002 0301 	and.w	r3, r2, #1
 8102c84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8102c88:	2300      	movs	r3, #0
 8102c8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8102c8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8102c92:	460b      	mov	r3, r1
 8102c94:	4313      	orrs	r3, r2
 8102c96:	f000 8089 	beq.w	8102dac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8102c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102ca0:	2b28      	cmp	r3, #40	@ 0x28
 8102ca2:	d86b      	bhi.n	8102d7c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8102ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8102cac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8102ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102caa:	bf00      	nop
 8102cac:	08102d85 	.word	0x08102d85
 8102cb0:	08102d7d 	.word	0x08102d7d
 8102cb4:	08102d7d 	.word	0x08102d7d
 8102cb8:	08102d7d 	.word	0x08102d7d
 8102cbc:	08102d7d 	.word	0x08102d7d
 8102cc0:	08102d7d 	.word	0x08102d7d
 8102cc4:	08102d7d 	.word	0x08102d7d
 8102cc8:	08102d7d 	.word	0x08102d7d
 8102ccc:	08102d51 	.word	0x08102d51
 8102cd0:	08102d7d 	.word	0x08102d7d
 8102cd4:	08102d7d 	.word	0x08102d7d
 8102cd8:	08102d7d 	.word	0x08102d7d
 8102cdc:	08102d7d 	.word	0x08102d7d
 8102ce0:	08102d7d 	.word	0x08102d7d
 8102ce4:	08102d7d 	.word	0x08102d7d
 8102ce8:	08102d7d 	.word	0x08102d7d
 8102cec:	08102d67 	.word	0x08102d67
 8102cf0:	08102d7d 	.word	0x08102d7d
 8102cf4:	08102d7d 	.word	0x08102d7d
 8102cf8:	08102d7d 	.word	0x08102d7d
 8102cfc:	08102d7d 	.word	0x08102d7d
 8102d00:	08102d7d 	.word	0x08102d7d
 8102d04:	08102d7d 	.word	0x08102d7d
 8102d08:	08102d7d 	.word	0x08102d7d
 8102d0c:	08102d85 	.word	0x08102d85
 8102d10:	08102d7d 	.word	0x08102d7d
 8102d14:	08102d7d 	.word	0x08102d7d
 8102d18:	08102d7d 	.word	0x08102d7d
 8102d1c:	08102d7d 	.word	0x08102d7d
 8102d20:	08102d7d 	.word	0x08102d7d
 8102d24:	08102d7d 	.word	0x08102d7d
 8102d28:	08102d7d 	.word	0x08102d7d
 8102d2c:	08102d85 	.word	0x08102d85
 8102d30:	08102d7d 	.word	0x08102d7d
 8102d34:	08102d7d 	.word	0x08102d7d
 8102d38:	08102d7d 	.word	0x08102d7d
 8102d3c:	08102d7d 	.word	0x08102d7d
 8102d40:	08102d7d 	.word	0x08102d7d
 8102d44:	08102d7d 	.word	0x08102d7d
 8102d48:	08102d7d 	.word	0x08102d7d
 8102d4c:	08102d85 	.word	0x08102d85
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d54:	3308      	adds	r3, #8
 8102d56:	2101      	movs	r1, #1
 8102d58:	4618      	mov	r0, r3
 8102d5a:	f000 fd05 	bl	8103768 <RCCEx_PLL2_Config>
 8102d5e:	4603      	mov	r3, r0
 8102d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102d64:	e00f      	b.n	8102d86 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d6a:	3328      	adds	r3, #40	@ 0x28
 8102d6c:	2101      	movs	r1, #1
 8102d6e:	4618      	mov	r0, r3
 8102d70:	f000 fdac 	bl	81038cc <RCCEx_PLL3_Config>
 8102d74:	4603      	mov	r3, r0
 8102d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102d7a:	e004      	b.n	8102d86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102d7c:	2301      	movs	r3, #1
 8102d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102d82:	e000      	b.n	8102d86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8102d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d8a:	2b00      	cmp	r3, #0
 8102d8c:	d10a      	bne.n	8102da4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8102d8e:	4bbf      	ldr	r3, [pc, #764]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102d92:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8102d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102d9c:	4abb      	ldr	r2, [pc, #748]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102d9e:	430b      	orrs	r3, r1
 8102da0:	6553      	str	r3, [r2, #84]	@ 0x54
 8102da2:	e003      	b.n	8102dac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102da8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8102dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102db4:	f002 0302 	and.w	r3, r2, #2
 8102db8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8102dbc:	2300      	movs	r3, #0
 8102dbe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8102dc2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8102dc6:	460b      	mov	r3, r1
 8102dc8:	4313      	orrs	r3, r2
 8102dca:	d041      	beq.n	8102e50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8102dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102dd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8102dd2:	2b05      	cmp	r3, #5
 8102dd4:	d824      	bhi.n	8102e20 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8102dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8102ddc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8102dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102ddc:	08102e29 	.word	0x08102e29
 8102de0:	08102df5 	.word	0x08102df5
 8102de4:	08102e0b 	.word	0x08102e0b
 8102de8:	08102e29 	.word	0x08102e29
 8102dec:	08102e29 	.word	0x08102e29
 8102df0:	08102e29 	.word	0x08102e29
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102df8:	3308      	adds	r3, #8
 8102dfa:	2101      	movs	r1, #1
 8102dfc:	4618      	mov	r0, r3
 8102dfe:	f000 fcb3 	bl	8103768 <RCCEx_PLL2_Config>
 8102e02:	4603      	mov	r3, r0
 8102e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102e08:	e00f      	b.n	8102e2a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e0e:	3328      	adds	r3, #40	@ 0x28
 8102e10:	2101      	movs	r1, #1
 8102e12:	4618      	mov	r0, r3
 8102e14:	f000 fd5a 	bl	81038cc <RCCEx_PLL3_Config>
 8102e18:	4603      	mov	r3, r0
 8102e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102e1e:	e004      	b.n	8102e2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102e20:	2301      	movs	r3, #1
 8102e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102e26:	e000      	b.n	8102e2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8102e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e2e:	2b00      	cmp	r3, #0
 8102e30:	d10a      	bne.n	8102e48 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8102e32:	4b96      	ldr	r3, [pc, #600]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102e36:	f023 0107 	bic.w	r1, r3, #7
 8102e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8102e40:	4a92      	ldr	r2, [pc, #584]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102e42:	430b      	orrs	r3, r1
 8102e44:	6553      	str	r3, [r2, #84]	@ 0x54
 8102e46:	e003      	b.n	8102e50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e58:	f002 0304 	and.w	r3, r2, #4
 8102e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8102e60:	2300      	movs	r3, #0
 8102e62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8102e66:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8102e6a:	460b      	mov	r3, r1
 8102e6c:	4313      	orrs	r3, r2
 8102e6e:	d044      	beq.n	8102efa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8102e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8102e78:	2b05      	cmp	r3, #5
 8102e7a:	d825      	bhi.n	8102ec8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8102e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8102e84 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8102e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102e82:	bf00      	nop
 8102e84:	08102ed1 	.word	0x08102ed1
 8102e88:	08102e9d 	.word	0x08102e9d
 8102e8c:	08102eb3 	.word	0x08102eb3
 8102e90:	08102ed1 	.word	0x08102ed1
 8102e94:	08102ed1 	.word	0x08102ed1
 8102e98:	08102ed1 	.word	0x08102ed1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ea0:	3308      	adds	r3, #8
 8102ea2:	2101      	movs	r1, #1
 8102ea4:	4618      	mov	r0, r3
 8102ea6:	f000 fc5f 	bl	8103768 <RCCEx_PLL2_Config>
 8102eaa:	4603      	mov	r3, r0
 8102eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8102eb0:	e00f      	b.n	8102ed2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102eb6:	3328      	adds	r3, #40	@ 0x28
 8102eb8:	2101      	movs	r1, #1
 8102eba:	4618      	mov	r0, r3
 8102ebc:	f000 fd06 	bl	81038cc <RCCEx_PLL3_Config>
 8102ec0:	4603      	mov	r3, r0
 8102ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8102ec6:	e004      	b.n	8102ed2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102ec8:	2301      	movs	r3, #1
 8102eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102ece:	e000      	b.n	8102ed2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8102ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ed6:	2b00      	cmp	r3, #0
 8102ed8:	d10b      	bne.n	8102ef2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8102eda:	4b6c      	ldr	r3, [pc, #432]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102ede:	f023 0107 	bic.w	r1, r3, #7
 8102ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8102eea:	4a68      	ldr	r2, [pc, #416]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102eec:	430b      	orrs	r3, r1
 8102eee:	6593      	str	r3, [r2, #88]	@ 0x58
 8102ef0:	e003      	b.n	8102efa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ef6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8102efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102f02:	f002 0320 	and.w	r3, r2, #32
 8102f06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8102f0a:	2300      	movs	r3, #0
 8102f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8102f10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8102f14:	460b      	mov	r3, r1
 8102f16:	4313      	orrs	r3, r2
 8102f18:	d055      	beq.n	8102fc6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8102f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102f26:	d033      	beq.n	8102f90 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8102f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102f2c:	d82c      	bhi.n	8102f88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102f32:	d02f      	beq.n	8102f94 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8102f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102f38:	d826      	bhi.n	8102f88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102f3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102f3e:	d02b      	beq.n	8102f98 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8102f40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102f44:	d820      	bhi.n	8102f88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102f46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102f4a:	d012      	beq.n	8102f72 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8102f4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102f50:	d81a      	bhi.n	8102f88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102f52:	2b00      	cmp	r3, #0
 8102f54:	d022      	beq.n	8102f9c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8102f56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102f5a:	d115      	bne.n	8102f88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f60:	3308      	adds	r3, #8
 8102f62:	2100      	movs	r1, #0
 8102f64:	4618      	mov	r0, r3
 8102f66:	f000 fbff 	bl	8103768 <RCCEx_PLL2_Config>
 8102f6a:	4603      	mov	r3, r0
 8102f6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102f70:	e015      	b.n	8102f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f76:	3328      	adds	r3, #40	@ 0x28
 8102f78:	2102      	movs	r1, #2
 8102f7a:	4618      	mov	r0, r3
 8102f7c:	f000 fca6 	bl	81038cc <RCCEx_PLL3_Config>
 8102f80:	4603      	mov	r3, r0
 8102f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102f86:	e00a      	b.n	8102f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102f88:	2301      	movs	r3, #1
 8102f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102f8e:	e006      	b.n	8102f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102f90:	bf00      	nop
 8102f92:	e004      	b.n	8102f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102f94:	bf00      	nop
 8102f96:	e002      	b.n	8102f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102f98:	bf00      	nop
 8102f9a:	e000      	b.n	8102f9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102fa2:	2b00      	cmp	r3, #0
 8102fa4:	d10b      	bne.n	8102fbe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8102fa6:	4b39      	ldr	r3, [pc, #228]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102faa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8102fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102fb6:	4a35      	ldr	r2, [pc, #212]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102fb8:	430b      	orrs	r3, r1
 8102fba:	6553      	str	r3, [r2, #84]	@ 0x54
 8102fbc:	e003      	b.n	8102fc6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102fc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8102fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102fce:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8102fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8102fd6:	2300      	movs	r3, #0
 8102fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8102fdc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8102fe0:	460b      	mov	r3, r1
 8102fe2:	4313      	orrs	r3, r2
 8102fe4:	d058      	beq.n	8103098 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8102fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102fee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8102ff2:	d033      	beq.n	810305c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8102ff4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8102ff8:	d82c      	bhi.n	8103054 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102ffe:	d02f      	beq.n	8103060 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8103000:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103004:	d826      	bhi.n	8103054 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8103006:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810300a:	d02b      	beq.n	8103064 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 810300c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8103010:	d820      	bhi.n	8103054 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8103012:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8103016:	d012      	beq.n	810303e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8103018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810301c:	d81a      	bhi.n	8103054 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810301e:	2b00      	cmp	r3, #0
 8103020:	d022      	beq.n	8103068 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8103022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8103026:	d115      	bne.n	8103054 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810302c:	3308      	adds	r3, #8
 810302e:	2100      	movs	r1, #0
 8103030:	4618      	mov	r0, r3
 8103032:	f000 fb99 	bl	8103768 <RCCEx_PLL2_Config>
 8103036:	4603      	mov	r3, r0
 8103038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810303c:	e015      	b.n	810306a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810303e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103042:	3328      	adds	r3, #40	@ 0x28
 8103044:	2102      	movs	r1, #2
 8103046:	4618      	mov	r0, r3
 8103048:	f000 fc40 	bl	81038cc <RCCEx_PLL3_Config>
 810304c:	4603      	mov	r3, r0
 810304e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103052:	e00a      	b.n	810306a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103054:	2301      	movs	r3, #1
 8103056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810305a:	e006      	b.n	810306a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810305c:	bf00      	nop
 810305e:	e004      	b.n	810306a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8103060:	bf00      	nop
 8103062:	e002      	b.n	810306a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8103064:	bf00      	nop
 8103066:	e000      	b.n	810306a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8103068:	bf00      	nop
    }

    if (ret == HAL_OK)
 810306a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810306e:	2b00      	cmp	r3, #0
 8103070:	d10e      	bne.n	8103090 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103072:	4b06      	ldr	r3, [pc, #24]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103076:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 810307a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810307e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8103082:	4a02      	ldr	r2, [pc, #8]	@ (810308c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103084:	430b      	orrs	r3, r1
 8103086:	6593      	str	r3, [r2, #88]	@ 0x58
 8103088:	e006      	b.n	8103098 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 810308a:	bf00      	nop
 810308c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103090:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103094:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81030a0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 81030a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 81030a8:	2300      	movs	r3, #0
 81030aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 81030ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 81030b2:	460b      	mov	r3, r1
 81030b4:	4313      	orrs	r3, r2
 81030b6:	d055      	beq.n	8103164 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81030b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81030c0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81030c4:	d033      	beq.n	810312e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 81030c6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81030ca:	d82c      	bhi.n	8103126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81030cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81030d0:	d02f      	beq.n	8103132 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 81030d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81030d6:	d826      	bhi.n	8103126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81030d8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81030dc:	d02b      	beq.n	8103136 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 81030de:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81030e2:	d820      	bhi.n	8103126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81030e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81030e8:	d012      	beq.n	8103110 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 81030ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81030ee:	d81a      	bhi.n	8103126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81030f0:	2b00      	cmp	r3, #0
 81030f2:	d022      	beq.n	810313a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 81030f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81030f8:	d115      	bne.n	8103126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81030fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030fe:	3308      	adds	r3, #8
 8103100:	2100      	movs	r1, #0
 8103102:	4618      	mov	r0, r3
 8103104:	f000 fb30 	bl	8103768 <RCCEx_PLL2_Config>
 8103108:	4603      	mov	r3, r0
 810310a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810310e:	e015      	b.n	810313c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103114:	3328      	adds	r3, #40	@ 0x28
 8103116:	2102      	movs	r1, #2
 8103118:	4618      	mov	r0, r3
 810311a:	f000 fbd7 	bl	81038cc <RCCEx_PLL3_Config>
 810311e:	4603      	mov	r3, r0
 8103120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8103124:	e00a      	b.n	810313c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103126:	2301      	movs	r3, #1
 8103128:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810312c:	e006      	b.n	810313c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810312e:	bf00      	nop
 8103130:	e004      	b.n	810313c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8103132:	bf00      	nop
 8103134:	e002      	b.n	810313c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8103136:	bf00      	nop
 8103138:	e000      	b.n	810313c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810313a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810313c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103140:	2b00      	cmp	r3, #0
 8103142:	d10b      	bne.n	810315c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103144:	4ba1      	ldr	r3, [pc, #644]	@ (81033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103148:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 810314c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103150:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8103154:	4a9d      	ldr	r2, [pc, #628]	@ (81033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103156:	430b      	orrs	r3, r1
 8103158:	6593      	str	r3, [r2, #88]	@ 0x58
 810315a:	e003      	b.n	8103164 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810315c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103160:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103168:	e9d3 2300 	ldrd	r2, r3, [r3]
 810316c:	f002 0308 	and.w	r3, r2, #8
 8103170:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8103174:	2300      	movs	r3, #0
 8103176:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810317a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 810317e:	460b      	mov	r3, r1
 8103180:	4313      	orrs	r3, r2
 8103182:	d01e      	beq.n	81031c2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8103184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103188:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810318c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103190:	d10c      	bne.n	81031ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103196:	3328      	adds	r3, #40	@ 0x28
 8103198:	2102      	movs	r1, #2
 810319a:	4618      	mov	r0, r3
 810319c:	f000 fb96 	bl	81038cc <RCCEx_PLL3_Config>
 81031a0:	4603      	mov	r3, r0
 81031a2:	2b00      	cmp	r3, #0
 81031a4:	d002      	beq.n	81031ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 81031a6:	2301      	movs	r3, #1
 81031a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81031ac:	4b87      	ldr	r3, [pc, #540]	@ (81033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81031ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81031b0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81031b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81031bc:	4a83      	ldr	r2, [pc, #524]	@ (81033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81031be:	430b      	orrs	r3, r1
 81031c0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81031c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81031ca:	f002 0310 	and.w	r3, r2, #16
 81031ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 81031d2:	2300      	movs	r3, #0
 81031d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 81031d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 81031dc:	460b      	mov	r3, r1
 81031de:	4313      	orrs	r3, r2
 81031e0:	d01e      	beq.n	8103220 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81031e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81031ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81031ee:	d10c      	bne.n	810320a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81031f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031f4:	3328      	adds	r3, #40	@ 0x28
 81031f6:	2102      	movs	r1, #2
 81031f8:	4618      	mov	r0, r3
 81031fa:	f000 fb67 	bl	81038cc <RCCEx_PLL3_Config>
 81031fe:	4603      	mov	r3, r0
 8103200:	2b00      	cmp	r3, #0
 8103202:	d002      	beq.n	810320a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8103204:	2301      	movs	r3, #1
 8103206:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810320a:	4b70      	ldr	r3, [pc, #448]	@ (81033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810320c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810320e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8103212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103216:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810321a:	4a6c      	ldr	r2, [pc, #432]	@ (81033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810321c:	430b      	orrs	r3, r1
 810321e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103228:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 810322c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8103230:	2300      	movs	r3, #0
 8103232:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8103236:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 810323a:	460b      	mov	r3, r1
 810323c:	4313      	orrs	r3, r2
 810323e:	d03e      	beq.n	81032be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8103240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103244:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8103248:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810324c:	d022      	beq.n	8103294 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 810324e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103252:	d81b      	bhi.n	810328c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8103254:	2b00      	cmp	r3, #0
 8103256:	d003      	beq.n	8103260 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8103258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810325c:	d00b      	beq.n	8103276 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 810325e:	e015      	b.n	810328c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103264:	3308      	adds	r3, #8
 8103266:	2100      	movs	r1, #0
 8103268:	4618      	mov	r0, r3
 810326a:	f000 fa7d 	bl	8103768 <RCCEx_PLL2_Config>
 810326e:	4603      	mov	r3, r0
 8103270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103274:	e00f      	b.n	8103296 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810327a:	3328      	adds	r3, #40	@ 0x28
 810327c:	2102      	movs	r1, #2
 810327e:	4618      	mov	r0, r3
 8103280:	f000 fb24 	bl	81038cc <RCCEx_PLL3_Config>
 8103284:	4603      	mov	r3, r0
 8103286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810328a:	e004      	b.n	8103296 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810328c:	2301      	movs	r3, #1
 810328e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103292:	e000      	b.n	8103296 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8103294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810329a:	2b00      	cmp	r3, #0
 810329c:	d10b      	bne.n	81032b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810329e:	4b4b      	ldr	r3, [pc, #300]	@ (81033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81032a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81032a2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 81032a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81032aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81032ae:	4a47      	ldr	r2, [pc, #284]	@ (81033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81032b0:	430b      	orrs	r3, r1
 81032b2:	6593      	str	r3, [r2, #88]	@ 0x58
 81032b4:	e003      	b.n	81032be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81032b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81032ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81032be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81032c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81032c6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 81032ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 81032cc:	2300      	movs	r3, #0
 81032ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81032d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 81032d4:	460b      	mov	r3, r1
 81032d6:	4313      	orrs	r3, r2
 81032d8:	d03b      	beq.n	8103352 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81032da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81032e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81032e6:	d01f      	beq.n	8103328 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 81032e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81032ec:	d818      	bhi.n	8103320 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 81032ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81032f2:	d003      	beq.n	81032fc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 81032f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81032f8:	d007      	beq.n	810330a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81032fa:	e011      	b.n	8103320 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81032fc:	4b33      	ldr	r3, [pc, #204]	@ (81033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81032fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103300:	4a32      	ldr	r2, [pc, #200]	@ (81033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103306:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8103308:	e00f      	b.n	810332a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810330a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810330e:	3328      	adds	r3, #40	@ 0x28
 8103310:	2101      	movs	r1, #1
 8103312:	4618      	mov	r0, r3
 8103314:	f000 fada 	bl	81038cc <RCCEx_PLL3_Config>
 8103318:	4603      	mov	r3, r0
 810331a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 810331e:	e004      	b.n	810332a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103320:	2301      	movs	r3, #1
 8103322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103326:	e000      	b.n	810332a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8103328:	bf00      	nop
    }

    if (ret == HAL_OK)
 810332a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810332e:	2b00      	cmp	r3, #0
 8103330:	d10b      	bne.n	810334a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103332:	4b26      	ldr	r3, [pc, #152]	@ (81033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103336:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810333a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103342:	4a22      	ldr	r2, [pc, #136]	@ (81033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103344:	430b      	orrs	r3, r1
 8103346:	6553      	str	r3, [r2, #84]	@ 0x54
 8103348:	e003      	b.n	8103352 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810334a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810334e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103356:	e9d3 2300 	ldrd	r2, r3, [r3]
 810335a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810335e:	673b      	str	r3, [r7, #112]	@ 0x70
 8103360:	2300      	movs	r3, #0
 8103362:	677b      	str	r3, [r7, #116]	@ 0x74
 8103364:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8103368:	460b      	mov	r3, r1
 810336a:	4313      	orrs	r3, r2
 810336c:	d034      	beq.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810336e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103374:	2b00      	cmp	r3, #0
 8103376:	d003      	beq.n	8103380 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8103378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810337c:	d007      	beq.n	810338e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 810337e:	e011      	b.n	81033a4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103380:	4b12      	ldr	r3, [pc, #72]	@ (81033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103384:	4a11      	ldr	r2, [pc, #68]	@ (81033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103386:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810338a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810338c:	e00e      	b.n	81033ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810338e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103392:	3308      	adds	r3, #8
 8103394:	2102      	movs	r1, #2
 8103396:	4618      	mov	r0, r3
 8103398:	f000 f9e6 	bl	8103768 <RCCEx_PLL2_Config>
 810339c:	4603      	mov	r3, r0
 810339e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81033a2:	e003      	b.n	81033ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 81033a4:	2301      	movs	r3, #1
 81033a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81033aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81033ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81033b0:	2b00      	cmp	r3, #0
 81033b2:	d10d      	bne.n	81033d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81033b4:	4b05      	ldr	r3, [pc, #20]	@ (81033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81033b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81033b8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81033bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81033c2:	4a02      	ldr	r2, [pc, #8]	@ (81033cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81033c4:	430b      	orrs	r3, r1
 81033c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81033c8:	e006      	b.n	81033d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 81033ca:	bf00      	nop
 81033cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81033d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81033d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81033e0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 81033e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 81033e6:	2300      	movs	r3, #0
 81033e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 81033ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 81033ee:	460b      	mov	r3, r1
 81033f0:	4313      	orrs	r3, r2
 81033f2:	d00c      	beq.n	810340e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81033f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033f8:	3328      	adds	r3, #40	@ 0x28
 81033fa:	2102      	movs	r1, #2
 81033fc:	4618      	mov	r0, r3
 81033fe:	f000 fa65 	bl	81038cc <RCCEx_PLL3_Config>
 8103402:	4603      	mov	r3, r0
 8103404:	2b00      	cmp	r3, #0
 8103406:	d002      	beq.n	810340e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8103408:	2301      	movs	r3, #1
 810340a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810340e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103416:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810341a:	663b      	str	r3, [r7, #96]	@ 0x60
 810341c:	2300      	movs	r3, #0
 810341e:	667b      	str	r3, [r7, #100]	@ 0x64
 8103420:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8103424:	460b      	mov	r3, r1
 8103426:	4313      	orrs	r3, r2
 8103428:	d038      	beq.n	810349c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 810342a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810342e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8103432:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103436:	d018      	beq.n	810346a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8103438:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810343c:	d811      	bhi.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810343e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8103442:	d014      	beq.n	810346e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8103444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8103448:	d80b      	bhi.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810344a:	2b00      	cmp	r3, #0
 810344c:	d011      	beq.n	8103472 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 810344e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103452:	d106      	bne.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103454:	4bc3      	ldr	r3, [pc, #780]	@ (8103764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103458:	4ac2      	ldr	r2, [pc, #776]	@ (8103764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810345a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810345e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8103460:	e008      	b.n	8103474 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103462:	2301      	movs	r3, #1
 8103464:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103468:	e004      	b.n	8103474 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810346a:	bf00      	nop
 810346c:	e002      	b.n	8103474 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810346e:	bf00      	nop
 8103470:	e000      	b.n	8103474 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8103472:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103478:	2b00      	cmp	r3, #0
 810347a:	d10b      	bne.n	8103494 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810347c:	4bb9      	ldr	r3, [pc, #740]	@ (8103764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810347e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103480:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8103484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103488:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810348c:	4ab5      	ldr	r2, [pc, #724]	@ (8103764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810348e:	430b      	orrs	r3, r1
 8103490:	6553      	str	r3, [r2, #84]	@ 0x54
 8103492:	e003      	b.n	810349c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103498:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810349c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81034a4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81034a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 81034aa:	2300      	movs	r3, #0
 81034ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81034ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 81034b2:	460b      	mov	r3, r1
 81034b4:	4313      	orrs	r3, r2
 81034b6:	d009      	beq.n	81034cc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81034b8:	4baa      	ldr	r3, [pc, #680]	@ (8103764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81034ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81034bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81034c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81034c6:	4aa7      	ldr	r2, [pc, #668]	@ (8103764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81034c8:	430b      	orrs	r3, r1
 81034ca:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81034cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81034d4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 81034d8:	653b      	str	r3, [r7, #80]	@ 0x50
 81034da:	2300      	movs	r3, #0
 81034dc:	657b      	str	r3, [r7, #84]	@ 0x54
 81034de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 81034e2:	460b      	mov	r3, r1
 81034e4:	4313      	orrs	r3, r2
 81034e6:	d00a      	beq.n	81034fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81034e8:	4b9e      	ldr	r3, [pc, #632]	@ (8103764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81034ea:	691b      	ldr	r3, [r3, #16]
 81034ec:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 81034f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81034f8:	4a9a      	ldr	r2, [pc, #616]	@ (8103764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81034fa:	430b      	orrs	r3, r1
 81034fc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81034fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103506:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 810350a:	64bb      	str	r3, [r7, #72]	@ 0x48
 810350c:	2300      	movs	r3, #0
 810350e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8103510:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8103514:	460b      	mov	r3, r1
 8103516:	4313      	orrs	r3, r2
 8103518:	d009      	beq.n	810352e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810351a:	4b92      	ldr	r3, [pc, #584]	@ (8103764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810351c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810351e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8103522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103526:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103528:	4a8e      	ldr	r2, [pc, #568]	@ (8103764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810352a:	430b      	orrs	r3, r1
 810352c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810352e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103536:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810353a:	643b      	str	r3, [r7, #64]	@ 0x40
 810353c:	2300      	movs	r3, #0
 810353e:	647b      	str	r3, [r7, #68]	@ 0x44
 8103540:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8103544:	460b      	mov	r3, r1
 8103546:	4313      	orrs	r3, r2
 8103548:	d00e      	beq.n	8103568 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810354a:	4b86      	ldr	r3, [pc, #536]	@ (8103764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810354c:	691b      	ldr	r3, [r3, #16]
 810354e:	4a85      	ldr	r2, [pc, #532]	@ (8103764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103550:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8103554:	6113      	str	r3, [r2, #16]
 8103556:	4b83      	ldr	r3, [pc, #524]	@ (8103764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103558:	6919      	ldr	r1, [r3, #16]
 810355a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810355e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8103562:	4a80      	ldr	r2, [pc, #512]	@ (8103764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103564:	430b      	orrs	r3, r1
 8103566:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103570:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8103574:	63bb      	str	r3, [r7, #56]	@ 0x38
 8103576:	2300      	movs	r3, #0
 8103578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810357a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 810357e:	460b      	mov	r3, r1
 8103580:	4313      	orrs	r3, r2
 8103582:	d009      	beq.n	8103598 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103584:	4b77      	ldr	r3, [pc, #476]	@ (8103764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103588:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810358c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103592:	4a74      	ldr	r2, [pc, #464]	@ (8103764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103594:	430b      	orrs	r3, r1
 8103596:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810359c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81035a0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 81035a4:	633b      	str	r3, [r7, #48]	@ 0x30
 81035a6:	2300      	movs	r3, #0
 81035a8:	637b      	str	r3, [r7, #52]	@ 0x34
 81035aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 81035ae:	460b      	mov	r3, r1
 81035b0:	4313      	orrs	r3, r2
 81035b2:	d00a      	beq.n	81035ca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81035b4:	4b6b      	ldr	r3, [pc, #428]	@ (8103764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81035b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81035b8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 81035bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81035c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81035c4:	4a67      	ldr	r2, [pc, #412]	@ (8103764 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81035c6:	430b      	orrs	r3, r1
 81035c8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81035ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81035d2:	2100      	movs	r1, #0
 81035d4:	62b9      	str	r1, [r7, #40]	@ 0x28
 81035d6:	f003 0301 	and.w	r3, r3, #1
 81035da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81035dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 81035e0:	460b      	mov	r3, r1
 81035e2:	4313      	orrs	r3, r2
 81035e4:	d011      	beq.n	810360a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81035e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81035ea:	3308      	adds	r3, #8
 81035ec:	2100      	movs	r1, #0
 81035ee:	4618      	mov	r0, r3
 81035f0:	f000 f8ba 	bl	8103768 <RCCEx_PLL2_Config>
 81035f4:	4603      	mov	r3, r0
 81035f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81035fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81035fe:	2b00      	cmp	r3, #0
 8103600:	d003      	beq.n	810360a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103606:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810360a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103612:	2100      	movs	r1, #0
 8103614:	6239      	str	r1, [r7, #32]
 8103616:	f003 0302 	and.w	r3, r3, #2
 810361a:	627b      	str	r3, [r7, #36]	@ 0x24
 810361c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8103620:	460b      	mov	r3, r1
 8103622:	4313      	orrs	r3, r2
 8103624:	d011      	beq.n	810364a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810362a:	3308      	adds	r3, #8
 810362c:	2101      	movs	r1, #1
 810362e:	4618      	mov	r0, r3
 8103630:	f000 f89a 	bl	8103768 <RCCEx_PLL2_Config>
 8103634:	4603      	mov	r3, r0
 8103636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810363a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810363e:	2b00      	cmp	r3, #0
 8103640:	d003      	beq.n	810364a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810364a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103652:	2100      	movs	r1, #0
 8103654:	61b9      	str	r1, [r7, #24]
 8103656:	f003 0304 	and.w	r3, r3, #4
 810365a:	61fb      	str	r3, [r7, #28]
 810365c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8103660:	460b      	mov	r3, r1
 8103662:	4313      	orrs	r3, r2
 8103664:	d011      	beq.n	810368a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810366a:	3308      	adds	r3, #8
 810366c:	2102      	movs	r1, #2
 810366e:	4618      	mov	r0, r3
 8103670:	f000 f87a 	bl	8103768 <RCCEx_PLL2_Config>
 8103674:	4603      	mov	r3, r0
 8103676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810367a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810367e:	2b00      	cmp	r3, #0
 8103680:	d003      	beq.n	810368a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103686:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810368a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810368e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103692:	2100      	movs	r1, #0
 8103694:	6139      	str	r1, [r7, #16]
 8103696:	f003 0308 	and.w	r3, r3, #8
 810369a:	617b      	str	r3, [r7, #20]
 810369c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81036a0:	460b      	mov	r3, r1
 81036a2:	4313      	orrs	r3, r2
 81036a4:	d011      	beq.n	81036ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81036aa:	3328      	adds	r3, #40	@ 0x28
 81036ac:	2100      	movs	r1, #0
 81036ae:	4618      	mov	r0, r3
 81036b0:	f000 f90c 	bl	81038cc <RCCEx_PLL3_Config>
 81036b4:	4603      	mov	r3, r0
 81036b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 81036ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81036be:	2b00      	cmp	r3, #0
 81036c0:	d003      	beq.n	81036ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81036c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81036ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81036ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81036d2:	2100      	movs	r1, #0
 81036d4:	60b9      	str	r1, [r7, #8]
 81036d6:	f003 0310 	and.w	r3, r3, #16
 81036da:	60fb      	str	r3, [r7, #12]
 81036dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81036e0:	460b      	mov	r3, r1
 81036e2:	4313      	orrs	r3, r2
 81036e4:	d011      	beq.n	810370a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81036ea:	3328      	adds	r3, #40	@ 0x28
 81036ec:	2101      	movs	r1, #1
 81036ee:	4618      	mov	r0, r3
 81036f0:	f000 f8ec 	bl	81038cc <RCCEx_PLL3_Config>
 81036f4:	4603      	mov	r3, r0
 81036f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81036fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81036fe:	2b00      	cmp	r3, #0
 8103700:	d003      	beq.n	810370a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103706:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810370a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103712:	2100      	movs	r1, #0
 8103714:	6039      	str	r1, [r7, #0]
 8103716:	f003 0320 	and.w	r3, r3, #32
 810371a:	607b      	str	r3, [r7, #4]
 810371c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8103720:	460b      	mov	r3, r1
 8103722:	4313      	orrs	r3, r2
 8103724:	d011      	beq.n	810374a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810372a:	3328      	adds	r3, #40	@ 0x28
 810372c:	2102      	movs	r1, #2
 810372e:	4618      	mov	r0, r3
 8103730:	f000 f8cc 	bl	81038cc <RCCEx_PLL3_Config>
 8103734:	4603      	mov	r3, r0
 8103736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810373a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810373e:	2b00      	cmp	r3, #0
 8103740:	d003      	beq.n	810374a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103746:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 810374a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 810374e:	2b00      	cmp	r3, #0
 8103750:	d101      	bne.n	8103756 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8103752:	2300      	movs	r3, #0
 8103754:	e000      	b.n	8103758 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8103756:	2301      	movs	r3, #1
}
 8103758:	4618      	mov	r0, r3
 810375a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 810375e:	46bd      	mov	sp, r7
 8103760:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8103764:	58024400 	.word	0x58024400

08103768 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8103768:	b580      	push	{r7, lr}
 810376a:	b084      	sub	sp, #16
 810376c:	af00      	add	r7, sp, #0
 810376e:	6078      	str	r0, [r7, #4]
 8103770:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103772:	2300      	movs	r3, #0
 8103774:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103776:	4b54      	ldr	r3, [pc, #336]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 8103778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810377a:	f003 0303 	and.w	r3, r3, #3
 810377e:	2b03      	cmp	r3, #3
 8103780:	d101      	bne.n	8103786 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8103782:	2301      	movs	r3, #1
 8103784:	e09b      	b.n	81038be <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8103786:	4b50      	ldr	r3, [pc, #320]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 8103788:	681b      	ldr	r3, [r3, #0]
 810378a:	4a4f      	ldr	r2, [pc, #316]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 810378c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8103790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103792:	f7fd fbed 	bl	8100f70 <HAL_GetTick>
 8103796:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103798:	e008      	b.n	81037ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810379a:	f7fd fbe9 	bl	8100f70 <HAL_GetTick>
 810379e:	4602      	mov	r2, r0
 81037a0:	68bb      	ldr	r3, [r7, #8]
 81037a2:	1ad3      	subs	r3, r2, r3
 81037a4:	2b02      	cmp	r3, #2
 81037a6:	d901      	bls.n	81037ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81037a8:	2303      	movs	r3, #3
 81037aa:	e088      	b.n	81038be <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81037ac:	4b46      	ldr	r3, [pc, #280]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 81037ae:	681b      	ldr	r3, [r3, #0]
 81037b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81037b4:	2b00      	cmp	r3, #0
 81037b6:	d1f0      	bne.n	810379a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81037b8:	4b43      	ldr	r3, [pc, #268]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 81037ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81037bc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 81037c0:	687b      	ldr	r3, [r7, #4]
 81037c2:	681b      	ldr	r3, [r3, #0]
 81037c4:	031b      	lsls	r3, r3, #12
 81037c6:	4940      	ldr	r1, [pc, #256]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 81037c8:	4313      	orrs	r3, r2
 81037ca:	628b      	str	r3, [r1, #40]	@ 0x28
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	685b      	ldr	r3, [r3, #4]
 81037d0:	3b01      	subs	r3, #1
 81037d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81037d6:	687b      	ldr	r3, [r7, #4]
 81037d8:	689b      	ldr	r3, [r3, #8]
 81037da:	3b01      	subs	r3, #1
 81037dc:	025b      	lsls	r3, r3, #9
 81037de:	b29b      	uxth	r3, r3
 81037e0:	431a      	orrs	r2, r3
 81037e2:	687b      	ldr	r3, [r7, #4]
 81037e4:	68db      	ldr	r3, [r3, #12]
 81037e6:	3b01      	subs	r3, #1
 81037e8:	041b      	lsls	r3, r3, #16
 81037ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81037ee:	431a      	orrs	r2, r3
 81037f0:	687b      	ldr	r3, [r7, #4]
 81037f2:	691b      	ldr	r3, [r3, #16]
 81037f4:	3b01      	subs	r3, #1
 81037f6:	061b      	lsls	r3, r3, #24
 81037f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81037fc:	4932      	ldr	r1, [pc, #200]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 81037fe:	4313      	orrs	r3, r2
 8103800:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8103802:	4b31      	ldr	r3, [pc, #196]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 8103804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103806:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810380a:	687b      	ldr	r3, [r7, #4]
 810380c:	695b      	ldr	r3, [r3, #20]
 810380e:	492e      	ldr	r1, [pc, #184]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 8103810:	4313      	orrs	r3, r2
 8103812:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8103814:	4b2c      	ldr	r3, [pc, #176]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 8103816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103818:	f023 0220 	bic.w	r2, r3, #32
 810381c:	687b      	ldr	r3, [r7, #4]
 810381e:	699b      	ldr	r3, [r3, #24]
 8103820:	4929      	ldr	r1, [pc, #164]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 8103822:	4313      	orrs	r3, r2
 8103824:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8103826:	4b28      	ldr	r3, [pc, #160]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 8103828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810382a:	4a27      	ldr	r2, [pc, #156]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 810382c:	f023 0310 	bic.w	r3, r3, #16
 8103830:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8103832:	4b25      	ldr	r3, [pc, #148]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 8103834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103836:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810383a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810383e:	687a      	ldr	r2, [r7, #4]
 8103840:	69d2      	ldr	r2, [r2, #28]
 8103842:	00d2      	lsls	r2, r2, #3
 8103844:	4920      	ldr	r1, [pc, #128]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 8103846:	4313      	orrs	r3, r2
 8103848:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810384a:	4b1f      	ldr	r3, [pc, #124]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 810384c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810384e:	4a1e      	ldr	r2, [pc, #120]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 8103850:	f043 0310 	orr.w	r3, r3, #16
 8103854:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8103856:	683b      	ldr	r3, [r7, #0]
 8103858:	2b00      	cmp	r3, #0
 810385a:	d106      	bne.n	810386a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810385c:	4b1a      	ldr	r3, [pc, #104]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 810385e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103860:	4a19      	ldr	r2, [pc, #100]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 8103862:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8103866:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103868:	e00f      	b.n	810388a <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810386a:	683b      	ldr	r3, [r7, #0]
 810386c:	2b01      	cmp	r3, #1
 810386e:	d106      	bne.n	810387e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8103870:	4b15      	ldr	r3, [pc, #84]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 8103872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103874:	4a14      	ldr	r2, [pc, #80]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 8103876:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810387a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810387c:	e005      	b.n	810388a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810387e:	4b12      	ldr	r3, [pc, #72]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 8103880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103882:	4a11      	ldr	r2, [pc, #68]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 8103884:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8103888:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810388a:	4b0f      	ldr	r3, [pc, #60]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 810388c:	681b      	ldr	r3, [r3, #0]
 810388e:	4a0e      	ldr	r2, [pc, #56]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 8103890:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8103894:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103896:	f7fd fb6b 	bl	8100f70 <HAL_GetTick>
 810389a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810389c:	e008      	b.n	81038b0 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810389e:	f7fd fb67 	bl	8100f70 <HAL_GetTick>
 81038a2:	4602      	mov	r2, r0
 81038a4:	68bb      	ldr	r3, [r7, #8]
 81038a6:	1ad3      	subs	r3, r2, r3
 81038a8:	2b02      	cmp	r3, #2
 81038aa:	d901      	bls.n	81038b0 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81038ac:	2303      	movs	r3, #3
 81038ae:	e006      	b.n	81038be <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81038b0:	4b05      	ldr	r3, [pc, #20]	@ (81038c8 <RCCEx_PLL2_Config+0x160>)
 81038b2:	681b      	ldr	r3, [r3, #0]
 81038b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81038b8:	2b00      	cmp	r3, #0
 81038ba:	d0f0      	beq.n	810389e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81038bc:	7bfb      	ldrb	r3, [r7, #15]
}
 81038be:	4618      	mov	r0, r3
 81038c0:	3710      	adds	r7, #16
 81038c2:	46bd      	mov	sp, r7
 81038c4:	bd80      	pop	{r7, pc}
 81038c6:	bf00      	nop
 81038c8:	58024400 	.word	0x58024400

081038cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81038cc:	b580      	push	{r7, lr}
 81038ce:	b084      	sub	sp, #16
 81038d0:	af00      	add	r7, sp, #0
 81038d2:	6078      	str	r0, [r7, #4]
 81038d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81038d6:	2300      	movs	r3, #0
 81038d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81038da:	4b54      	ldr	r3, [pc, #336]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 81038dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81038de:	f003 0303 	and.w	r3, r3, #3
 81038e2:	2b03      	cmp	r3, #3
 81038e4:	d101      	bne.n	81038ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81038e6:	2301      	movs	r3, #1
 81038e8:	e09b      	b.n	8103a22 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81038ea:	4b50      	ldr	r3, [pc, #320]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 81038ec:	681b      	ldr	r3, [r3, #0]
 81038ee:	4a4f      	ldr	r2, [pc, #316]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 81038f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81038f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81038f6:	f7fd fb3b 	bl	8100f70 <HAL_GetTick>
 81038fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81038fc:	e008      	b.n	8103910 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81038fe:	f7fd fb37 	bl	8100f70 <HAL_GetTick>
 8103902:	4602      	mov	r2, r0
 8103904:	68bb      	ldr	r3, [r7, #8]
 8103906:	1ad3      	subs	r3, r2, r3
 8103908:	2b02      	cmp	r3, #2
 810390a:	d901      	bls.n	8103910 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810390c:	2303      	movs	r3, #3
 810390e:	e088      	b.n	8103a22 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103910:	4b46      	ldr	r3, [pc, #280]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 8103912:	681b      	ldr	r3, [r3, #0]
 8103914:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103918:	2b00      	cmp	r3, #0
 810391a:	d1f0      	bne.n	81038fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810391c:	4b43      	ldr	r3, [pc, #268]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 810391e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103920:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8103924:	687b      	ldr	r3, [r7, #4]
 8103926:	681b      	ldr	r3, [r3, #0]
 8103928:	051b      	lsls	r3, r3, #20
 810392a:	4940      	ldr	r1, [pc, #256]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 810392c:	4313      	orrs	r3, r2
 810392e:	628b      	str	r3, [r1, #40]	@ 0x28
 8103930:	687b      	ldr	r3, [r7, #4]
 8103932:	685b      	ldr	r3, [r3, #4]
 8103934:	3b01      	subs	r3, #1
 8103936:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810393a:	687b      	ldr	r3, [r7, #4]
 810393c:	689b      	ldr	r3, [r3, #8]
 810393e:	3b01      	subs	r3, #1
 8103940:	025b      	lsls	r3, r3, #9
 8103942:	b29b      	uxth	r3, r3
 8103944:	431a      	orrs	r2, r3
 8103946:	687b      	ldr	r3, [r7, #4]
 8103948:	68db      	ldr	r3, [r3, #12]
 810394a:	3b01      	subs	r3, #1
 810394c:	041b      	lsls	r3, r3, #16
 810394e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8103952:	431a      	orrs	r2, r3
 8103954:	687b      	ldr	r3, [r7, #4]
 8103956:	691b      	ldr	r3, [r3, #16]
 8103958:	3b01      	subs	r3, #1
 810395a:	061b      	lsls	r3, r3, #24
 810395c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8103960:	4932      	ldr	r1, [pc, #200]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 8103962:	4313      	orrs	r3, r2
 8103964:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8103966:	4b31      	ldr	r3, [pc, #196]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 8103968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810396a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810396e:	687b      	ldr	r3, [r7, #4]
 8103970:	695b      	ldr	r3, [r3, #20]
 8103972:	492e      	ldr	r1, [pc, #184]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 8103974:	4313      	orrs	r3, r2
 8103976:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103978:	4b2c      	ldr	r3, [pc, #176]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 810397a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810397c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8103980:	687b      	ldr	r3, [r7, #4]
 8103982:	699b      	ldr	r3, [r3, #24]
 8103984:	4929      	ldr	r1, [pc, #164]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 8103986:	4313      	orrs	r3, r2
 8103988:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810398a:	4b28      	ldr	r3, [pc, #160]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 810398c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810398e:	4a27      	ldr	r2, [pc, #156]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 8103990:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8103994:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8103996:	4b25      	ldr	r3, [pc, #148]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 8103998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810399a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810399e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81039a2:	687a      	ldr	r2, [r7, #4]
 81039a4:	69d2      	ldr	r2, [r2, #28]
 81039a6:	00d2      	lsls	r2, r2, #3
 81039a8:	4920      	ldr	r1, [pc, #128]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 81039aa:	4313      	orrs	r3, r2
 81039ac:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81039ae:	4b1f      	ldr	r3, [pc, #124]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 81039b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81039b2:	4a1e      	ldr	r2, [pc, #120]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 81039b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81039b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81039ba:	683b      	ldr	r3, [r7, #0]
 81039bc:	2b00      	cmp	r3, #0
 81039be:	d106      	bne.n	81039ce <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81039c0:	4b1a      	ldr	r3, [pc, #104]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 81039c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81039c4:	4a19      	ldr	r2, [pc, #100]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 81039c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81039ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81039cc:	e00f      	b.n	81039ee <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81039ce:	683b      	ldr	r3, [r7, #0]
 81039d0:	2b01      	cmp	r3, #1
 81039d2:	d106      	bne.n	81039e2 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81039d4:	4b15      	ldr	r3, [pc, #84]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 81039d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81039d8:	4a14      	ldr	r2, [pc, #80]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 81039da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81039de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81039e0:	e005      	b.n	81039ee <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81039e2:	4b12      	ldr	r3, [pc, #72]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 81039e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81039e6:	4a11      	ldr	r2, [pc, #68]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 81039e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81039ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81039ee:	4b0f      	ldr	r3, [pc, #60]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 81039f0:	681b      	ldr	r3, [r3, #0]
 81039f2:	4a0e      	ldr	r2, [pc, #56]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 81039f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81039f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81039fa:	f7fd fab9 	bl	8100f70 <HAL_GetTick>
 81039fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103a00:	e008      	b.n	8103a14 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8103a02:	f7fd fab5 	bl	8100f70 <HAL_GetTick>
 8103a06:	4602      	mov	r2, r0
 8103a08:	68bb      	ldr	r3, [r7, #8]
 8103a0a:	1ad3      	subs	r3, r2, r3
 8103a0c:	2b02      	cmp	r3, #2
 8103a0e:	d901      	bls.n	8103a14 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103a10:	2303      	movs	r3, #3
 8103a12:	e006      	b.n	8103a22 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103a14:	4b05      	ldr	r3, [pc, #20]	@ (8103a2c <RCCEx_PLL3_Config+0x160>)
 8103a16:	681b      	ldr	r3, [r3, #0]
 8103a18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103a1c:	2b00      	cmp	r3, #0
 8103a1e:	d0f0      	beq.n	8103a02 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8103a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8103a22:	4618      	mov	r0, r3
 8103a24:	3710      	adds	r7, #16
 8103a26:	46bd      	mov	sp, r7
 8103a28:	bd80      	pop	{r7, pc}
 8103a2a:	bf00      	nop
 8103a2c:	58024400 	.word	0x58024400

08103a30 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8103a30:	b580      	push	{r7, lr}
 8103a32:	b082      	sub	sp, #8
 8103a34:	af00      	add	r7, sp, #0
 8103a36:	6078      	str	r0, [r7, #4]
 8103a38:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8103a3a:	687b      	ldr	r3, [r7, #4]
 8103a3c:	2b00      	cmp	r3, #0
 8103a3e:	d101      	bne.n	8103a44 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8103a40:	2301      	movs	r3, #1
 8103a42:	e02b      	b.n	8103a9c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8103a44:	687b      	ldr	r3, [r7, #4]
 8103a46:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8103a4a:	b2db      	uxtb	r3, r3
 8103a4c:	2b00      	cmp	r3, #0
 8103a4e:	d106      	bne.n	8103a5e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8103a50:	687b      	ldr	r3, [r7, #4]
 8103a52:	2200      	movs	r2, #0
 8103a54:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8103a58:	6878      	ldr	r0, [r7, #4]
 8103a5a:	f7fc fdd9 	bl	8100610 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8103a5e:	687b      	ldr	r3, [r7, #4]
 8103a60:	2202      	movs	r2, #2
 8103a62:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8103a66:	687b      	ldr	r3, [r7, #4]
 8103a68:	681a      	ldr	r2, [r3, #0]
 8103a6a:	687b      	ldr	r3, [r7, #4]
 8103a6c:	3304      	adds	r3, #4
 8103a6e:	4619      	mov	r1, r3
 8103a70:	4610      	mov	r0, r2
 8103a72:	f000 f819 	bl	8103aa8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8103a76:	687b      	ldr	r3, [r7, #4]
 8103a78:	6818      	ldr	r0, [r3, #0]
 8103a7a:	687b      	ldr	r3, [r7, #4]
 8103a7c:	685b      	ldr	r3, [r3, #4]
 8103a7e:	461a      	mov	r2, r3
 8103a80:	6839      	ldr	r1, [r7, #0]
 8103a82:	f000 f86e 	bl	8103b62 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8103a86:	4b07      	ldr	r3, [pc, #28]	@ (8103aa4 <HAL_SDRAM_Init+0x74>)
 8103a88:	681b      	ldr	r3, [r3, #0]
 8103a8a:	4a06      	ldr	r2, [pc, #24]	@ (8103aa4 <HAL_SDRAM_Init+0x74>)
 8103a8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8103a90:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8103a92:	687b      	ldr	r3, [r7, #4]
 8103a94:	2201      	movs	r2, #1
 8103a96:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8103a9a:	2300      	movs	r3, #0
}
 8103a9c:	4618      	mov	r0, r3
 8103a9e:	3708      	adds	r7, #8
 8103aa0:	46bd      	mov	sp, r7
 8103aa2:	bd80      	pop	{r7, pc}
 8103aa4:	52004000 	.word	0x52004000

08103aa8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8103aa8:	b480      	push	{r7}
 8103aaa:	b083      	sub	sp, #12
 8103aac:	af00      	add	r7, sp, #0
 8103aae:	6078      	str	r0, [r7, #4]
 8103ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8103ab2:	683b      	ldr	r3, [r7, #0]
 8103ab4:	681b      	ldr	r3, [r3, #0]
 8103ab6:	2b00      	cmp	r3, #0
 8103ab8:	d123      	bne.n	8103b02 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8103aba:	687b      	ldr	r3, [r7, #4]
 8103abc:	681b      	ldr	r3, [r3, #0]
 8103abe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8103ac2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8103ac6:	683a      	ldr	r2, [r7, #0]
 8103ac8:	6851      	ldr	r1, [r2, #4]
 8103aca:	683a      	ldr	r2, [r7, #0]
 8103acc:	6892      	ldr	r2, [r2, #8]
 8103ace:	4311      	orrs	r1, r2
 8103ad0:	683a      	ldr	r2, [r7, #0]
 8103ad2:	68d2      	ldr	r2, [r2, #12]
 8103ad4:	4311      	orrs	r1, r2
 8103ad6:	683a      	ldr	r2, [r7, #0]
 8103ad8:	6912      	ldr	r2, [r2, #16]
 8103ada:	4311      	orrs	r1, r2
 8103adc:	683a      	ldr	r2, [r7, #0]
 8103ade:	6952      	ldr	r2, [r2, #20]
 8103ae0:	4311      	orrs	r1, r2
 8103ae2:	683a      	ldr	r2, [r7, #0]
 8103ae4:	6992      	ldr	r2, [r2, #24]
 8103ae6:	4311      	orrs	r1, r2
 8103ae8:	683a      	ldr	r2, [r7, #0]
 8103aea:	69d2      	ldr	r2, [r2, #28]
 8103aec:	4311      	orrs	r1, r2
 8103aee:	683a      	ldr	r2, [r7, #0]
 8103af0:	6a12      	ldr	r2, [r2, #32]
 8103af2:	4311      	orrs	r1, r2
 8103af4:	683a      	ldr	r2, [r7, #0]
 8103af6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8103af8:	430a      	orrs	r2, r1
 8103afa:	431a      	orrs	r2, r3
 8103afc:	687b      	ldr	r3, [r7, #4]
 8103afe:	601a      	str	r2, [r3, #0]
 8103b00:	e028      	b.n	8103b54 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8103b02:	687b      	ldr	r3, [r7, #4]
 8103b04:	681b      	ldr	r3, [r3, #0]
 8103b06:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8103b0a:	683b      	ldr	r3, [r7, #0]
 8103b0c:	69d9      	ldr	r1, [r3, #28]
 8103b0e:	683b      	ldr	r3, [r7, #0]
 8103b10:	6a1b      	ldr	r3, [r3, #32]
 8103b12:	4319      	orrs	r1, r3
 8103b14:	683b      	ldr	r3, [r7, #0]
 8103b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103b18:	430b      	orrs	r3, r1
 8103b1a:	431a      	orrs	r2, r3
 8103b1c:	687b      	ldr	r3, [r7, #4]
 8103b1e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8103b20:	687b      	ldr	r3, [r7, #4]
 8103b22:	685b      	ldr	r3, [r3, #4]
 8103b24:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8103b28:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8103b2c:	683a      	ldr	r2, [r7, #0]
 8103b2e:	6851      	ldr	r1, [r2, #4]
 8103b30:	683a      	ldr	r2, [r7, #0]
 8103b32:	6892      	ldr	r2, [r2, #8]
 8103b34:	4311      	orrs	r1, r2
 8103b36:	683a      	ldr	r2, [r7, #0]
 8103b38:	68d2      	ldr	r2, [r2, #12]
 8103b3a:	4311      	orrs	r1, r2
 8103b3c:	683a      	ldr	r2, [r7, #0]
 8103b3e:	6912      	ldr	r2, [r2, #16]
 8103b40:	4311      	orrs	r1, r2
 8103b42:	683a      	ldr	r2, [r7, #0]
 8103b44:	6952      	ldr	r2, [r2, #20]
 8103b46:	4311      	orrs	r1, r2
 8103b48:	683a      	ldr	r2, [r7, #0]
 8103b4a:	6992      	ldr	r2, [r2, #24]
 8103b4c:	430a      	orrs	r2, r1
 8103b4e:	431a      	orrs	r2, r3
 8103b50:	687b      	ldr	r3, [r7, #4]
 8103b52:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8103b54:	2300      	movs	r3, #0
}
 8103b56:	4618      	mov	r0, r3
 8103b58:	370c      	adds	r7, #12
 8103b5a:	46bd      	mov	sp, r7
 8103b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b60:	4770      	bx	lr

08103b62 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8103b62:	b480      	push	{r7}
 8103b64:	b085      	sub	sp, #20
 8103b66:	af00      	add	r7, sp, #0
 8103b68:	60f8      	str	r0, [r7, #12]
 8103b6a:	60b9      	str	r1, [r7, #8]
 8103b6c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8103b6e:	687b      	ldr	r3, [r7, #4]
 8103b70:	2b00      	cmp	r3, #0
 8103b72:	d128      	bne.n	8103bc6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8103b74:	68fb      	ldr	r3, [r7, #12]
 8103b76:	689b      	ldr	r3, [r3, #8]
 8103b78:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8103b7c:	68bb      	ldr	r3, [r7, #8]
 8103b7e:	681b      	ldr	r3, [r3, #0]
 8103b80:	1e59      	subs	r1, r3, #1
 8103b82:	68bb      	ldr	r3, [r7, #8]
 8103b84:	685b      	ldr	r3, [r3, #4]
 8103b86:	3b01      	subs	r3, #1
 8103b88:	011b      	lsls	r3, r3, #4
 8103b8a:	4319      	orrs	r1, r3
 8103b8c:	68bb      	ldr	r3, [r7, #8]
 8103b8e:	689b      	ldr	r3, [r3, #8]
 8103b90:	3b01      	subs	r3, #1
 8103b92:	021b      	lsls	r3, r3, #8
 8103b94:	4319      	orrs	r1, r3
 8103b96:	68bb      	ldr	r3, [r7, #8]
 8103b98:	68db      	ldr	r3, [r3, #12]
 8103b9a:	3b01      	subs	r3, #1
 8103b9c:	031b      	lsls	r3, r3, #12
 8103b9e:	4319      	orrs	r1, r3
 8103ba0:	68bb      	ldr	r3, [r7, #8]
 8103ba2:	691b      	ldr	r3, [r3, #16]
 8103ba4:	3b01      	subs	r3, #1
 8103ba6:	041b      	lsls	r3, r3, #16
 8103ba8:	4319      	orrs	r1, r3
 8103baa:	68bb      	ldr	r3, [r7, #8]
 8103bac:	695b      	ldr	r3, [r3, #20]
 8103bae:	3b01      	subs	r3, #1
 8103bb0:	051b      	lsls	r3, r3, #20
 8103bb2:	4319      	orrs	r1, r3
 8103bb4:	68bb      	ldr	r3, [r7, #8]
 8103bb6:	699b      	ldr	r3, [r3, #24]
 8103bb8:	3b01      	subs	r3, #1
 8103bba:	061b      	lsls	r3, r3, #24
 8103bbc:	430b      	orrs	r3, r1
 8103bbe:	431a      	orrs	r2, r3
 8103bc0:	68fb      	ldr	r3, [r7, #12]
 8103bc2:	609a      	str	r2, [r3, #8]
 8103bc4:	e02f      	b.n	8103c26 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8103bc6:	68fb      	ldr	r3, [r7, #12]
 8103bc8:	689b      	ldr	r3, [r3, #8]
 8103bca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8103bce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8103bd2:	68ba      	ldr	r2, [r7, #8]
 8103bd4:	68d2      	ldr	r2, [r2, #12]
 8103bd6:	3a01      	subs	r2, #1
 8103bd8:	0311      	lsls	r1, r2, #12
 8103bda:	68ba      	ldr	r2, [r7, #8]
 8103bdc:	6952      	ldr	r2, [r2, #20]
 8103bde:	3a01      	subs	r2, #1
 8103be0:	0512      	lsls	r2, r2, #20
 8103be2:	430a      	orrs	r2, r1
 8103be4:	431a      	orrs	r2, r3
 8103be6:	68fb      	ldr	r3, [r7, #12]
 8103be8:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8103bea:	68fb      	ldr	r3, [r7, #12]
 8103bec:	68db      	ldr	r3, [r3, #12]
 8103bee:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8103bf2:	68bb      	ldr	r3, [r7, #8]
 8103bf4:	681b      	ldr	r3, [r3, #0]
 8103bf6:	1e59      	subs	r1, r3, #1
 8103bf8:	68bb      	ldr	r3, [r7, #8]
 8103bfa:	685b      	ldr	r3, [r3, #4]
 8103bfc:	3b01      	subs	r3, #1
 8103bfe:	011b      	lsls	r3, r3, #4
 8103c00:	4319      	orrs	r1, r3
 8103c02:	68bb      	ldr	r3, [r7, #8]
 8103c04:	689b      	ldr	r3, [r3, #8]
 8103c06:	3b01      	subs	r3, #1
 8103c08:	021b      	lsls	r3, r3, #8
 8103c0a:	4319      	orrs	r1, r3
 8103c0c:	68bb      	ldr	r3, [r7, #8]
 8103c0e:	691b      	ldr	r3, [r3, #16]
 8103c10:	3b01      	subs	r3, #1
 8103c12:	041b      	lsls	r3, r3, #16
 8103c14:	4319      	orrs	r1, r3
 8103c16:	68bb      	ldr	r3, [r7, #8]
 8103c18:	699b      	ldr	r3, [r3, #24]
 8103c1a:	3b01      	subs	r3, #1
 8103c1c:	061b      	lsls	r3, r3, #24
 8103c1e:	430b      	orrs	r3, r1
 8103c20:	431a      	orrs	r2, r3
 8103c22:	68fb      	ldr	r3, [r7, #12]
 8103c24:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8103c26:	2300      	movs	r3, #0
}
 8103c28:	4618      	mov	r0, r3
 8103c2a:	3714      	adds	r7, #20
 8103c2c:	46bd      	mov	sp, r7
 8103c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c32:	4770      	bx	lr

08103c34 <GAS_SCHEDULER_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void GAS_SCHEDULER_Init(void)
{
 8103c34:	b480      	push	{r7}
 8103c36:	af00      	add	r7, sp, #0

}
 8103c38:	bf00      	nop
 8103c3a:	46bd      	mov	sp, r7
 8103c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c40:	4770      	bx	lr
	...

08103c44 <GAS_SCHEDULER_Run>:
void GAS_SCHEDULER_Run(void)
{
 8103c44:	b580      	push	{r7, lr}
 8103c46:	af00      	add	r7, sp, #0
	Background();
 8103c48:	f000 f868 	bl	8103d1c <Background>

	if (scheduler_flag.flag_lms == true)
 8103c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8103c88 <GAS_SCHEDULER_Run+0x44>)
 8103c4e:	781b      	ldrb	r3, [r3, #0]
 8103c50:	b2db      	uxtb	r3, r3
 8103c52:	2b01      	cmp	r3, #1
 8103c54:	d101      	bne.n	8103c5a <GAS_SCHEDULER_Run+0x16>
	{
		Task1ms();
 8103c56:	f000 f868 	bl	8103d2a <Task1ms>
	}
	if (scheduler_flag.flag_l0ms == true)
 8103c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8103c88 <GAS_SCHEDULER_Run+0x44>)
 8103c5c:	785b      	ldrb	r3, [r3, #1]
 8103c5e:	b2db      	uxtb	r3, r3
 8103c60:	2b01      	cmp	r3, #1
 8103c62:	d101      	bne.n	8103c68 <GAS_SCHEDULER_Run+0x24>
	{
		Task10ms();
 8103c64:	f000 f868 	bl	8103d38 <Task10ms>
	}
	if (scheduler_flag.flag_l00ms == true)
 8103c68:	4b07      	ldr	r3, [pc, #28]	@ (8103c88 <GAS_SCHEDULER_Run+0x44>)
 8103c6a:	789b      	ldrb	r3, [r3, #2]
 8103c6c:	b2db      	uxtb	r3, r3
 8103c6e:	2b01      	cmp	r3, #1
 8103c70:	d101      	bne.n	8103c76 <GAS_SCHEDULER_Run+0x32>
	{
		Task100ms();
 8103c72:	f000 f868 	bl	8103d46 <Task100ms>
	}

	if (scheduler_flag.flag_ls == true)
 8103c76:	4b04      	ldr	r3, [pc, #16]	@ (8103c88 <GAS_SCHEDULER_Run+0x44>)
 8103c78:	78db      	ldrb	r3, [r3, #3]
 8103c7a:	b2db      	uxtb	r3, r3
 8103c7c:	2b01      	cmp	r3, #1
 8103c7e:	d101      	bne.n	8103c84 <GAS_SCHEDULER_Run+0x40>
	{
		Task1s();
 8103c80:	f000 f868 	bl	8103d54 <Task1s>
	}

}
 8103c84:	bf00      	nop
 8103c86:	bd80      	pop	{r7, pc}
 8103c88:	100001e8 	.word	0x100001e8

08103c8c <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8103c8c:	b480      	push	{r7}
 8103c8e:	af00      	add	r7, sp, #0
	sys_timer.ms++;
 8103c90:	4b1e      	ldr	r3, [pc, #120]	@ (8103d0c <HAL_SYSTICK_Callback+0x80>)
 8103c92:	881b      	ldrh	r3, [r3, #0]
 8103c94:	b29b      	uxth	r3, r3
 8103c96:	3301      	adds	r3, #1
 8103c98:	b29a      	uxth	r2, r3
 8103c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8103d0c <HAL_SYSTICK_Callback+0x80>)
 8103c9c:	801a      	strh	r2, [r3, #0]
	scheduler_flag.flag_lms = true;
 8103c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8103d10 <HAL_SYSTICK_Callback+0x84>)
 8103ca0:	2201      	movs	r2, #1
 8103ca2:	701a      	strb	r2, [r3, #0]

	if (sys_timer.ms % 10 == 0)
 8103ca4:	4b19      	ldr	r3, [pc, #100]	@ (8103d0c <HAL_SYSTICK_Callback+0x80>)
 8103ca6:	881b      	ldrh	r3, [r3, #0]
 8103ca8:	b29a      	uxth	r2, r3
 8103caa:	4b1a      	ldr	r3, [pc, #104]	@ (8103d14 <HAL_SYSTICK_Callback+0x88>)
 8103cac:	fba3 1302 	umull	r1, r3, r3, r2
 8103cb0:	08d9      	lsrs	r1, r3, #3
 8103cb2:	460b      	mov	r3, r1
 8103cb4:	009b      	lsls	r3, r3, #2
 8103cb6:	440b      	add	r3, r1
 8103cb8:	005b      	lsls	r3, r3, #1
 8103cba:	1ad3      	subs	r3, r2, r3
 8103cbc:	b29b      	uxth	r3, r3
 8103cbe:	2b00      	cmp	r3, #0
 8103cc0:	d102      	bne.n	8103cc8 <HAL_SYSTICK_Callback+0x3c>
	{
		scheduler_flag.flag_l0ms = true;
 8103cc2:	4b13      	ldr	r3, [pc, #76]	@ (8103d10 <HAL_SYSTICK_Callback+0x84>)
 8103cc4:	2201      	movs	r2, #1
 8103cc6:	705a      	strb	r2, [r3, #1]
	}
	if (sys_timer.ms % 100 == 0)
 8103cc8:	4b10      	ldr	r3, [pc, #64]	@ (8103d0c <HAL_SYSTICK_Callback+0x80>)
 8103cca:	881b      	ldrh	r3, [r3, #0]
 8103ccc:	b29b      	uxth	r3, r3
 8103cce:	4a12      	ldr	r2, [pc, #72]	@ (8103d18 <HAL_SYSTICK_Callback+0x8c>)
 8103cd0:	fba2 1203 	umull	r1, r2, r2, r3
 8103cd4:	0952      	lsrs	r2, r2, #5
 8103cd6:	2164      	movs	r1, #100	@ 0x64
 8103cd8:	fb01 f202 	mul.w	r2, r1, r2
 8103cdc:	1a9b      	subs	r3, r3, r2
 8103cde:	b29b      	uxth	r3, r3
 8103ce0:	2b00      	cmp	r3, #0
 8103ce2:	d102      	bne.n	8103cea <HAL_SYSTICK_Callback+0x5e>
	{
		scheduler_flag.flag_l00ms = true;
 8103ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8103d10 <HAL_SYSTICK_Callback+0x84>)
 8103ce6:	2201      	movs	r2, #1
 8103ce8:	709a      	strb	r2, [r3, #2]
	}

	if (sys_timer.ms == 1000)
 8103cea:	4b08      	ldr	r3, [pc, #32]	@ (8103d0c <HAL_SYSTICK_Callback+0x80>)
 8103cec:	881b      	ldrh	r3, [r3, #0]
 8103cee:	b29b      	uxth	r3, r3
 8103cf0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8103cf4:	d105      	bne.n	8103d02 <HAL_SYSTICK_Callback+0x76>
	{
		scheduler_flag.flag_ls = true;
 8103cf6:	4b06      	ldr	r3, [pc, #24]	@ (8103d10 <HAL_SYSTICK_Callback+0x84>)
 8103cf8:	2201      	movs	r2, #1
 8103cfa:	70da      	strb	r2, [r3, #3]

		sys_timer.ms = 0;
 8103cfc:	4b03      	ldr	r3, [pc, #12]	@ (8103d0c <HAL_SYSTICK_Callback+0x80>)
 8103cfe:	2200      	movs	r2, #0
 8103d00:	801a      	strh	r2, [r3, #0]
	}

}
 8103d02:	bf00      	nop
 8103d04:	46bd      	mov	sp, r7
 8103d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d0a:	4770      	bx	lr
 8103d0c:	100001e4 	.word	0x100001e4
 8103d10:	100001e8 	.word	0x100001e8
 8103d14:	cccccccd 	.word	0xcccccccd
 8103d18:	51eb851f 	.word	0x51eb851f

08103d1c <Background>:
/* USER CODE END 0 */

/* USER CODE BEGIN 1 */
static void Background(void)
{
 8103d1c:	b480      	push	{r7}
 8103d1e:	af00      	add	r7, sp, #0

}
 8103d20:	bf00      	nop
 8103d22:	46bd      	mov	sp, r7
 8103d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d28:	4770      	bx	lr

08103d2a <Task1ms>:

static void Task1ms(void)
{
 8103d2a:	b480      	push	{r7}
 8103d2c:	af00      	add	r7, sp, #0

}
 8103d2e:	bf00      	nop
 8103d30:	46bd      	mov	sp, r7
 8103d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d36:	4770      	bx	lr

08103d38 <Task10ms>:
static void Task10ms(void)
{
 8103d38:	b480      	push	{r7}
 8103d3a:	af00      	add	r7, sp, #0

}
 8103d3c:	bf00      	nop
 8103d3e:	46bd      	mov	sp, r7
 8103d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d44:	4770      	bx	lr

08103d46 <Task100ms>:
static void Task100ms(void)
{
 8103d46:	b480      	push	{r7}
 8103d48:	af00      	add	r7, sp, #0

}
 8103d4a:	bf00      	nop
 8103d4c:	46bd      	mov	sp, r7
 8103d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d52:	4770      	bx	lr

08103d54 <Task1s>:

static void Task1s(void)
{
 8103d54:	b480      	push	{r7}
 8103d56:	af00      	add	r7, sp, #0

}
 8103d58:	bf00      	nop
 8103d5a:	46bd      	mov	sp, r7
 8103d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d60:	4770      	bx	lr
	...

08103d64 <lv_tick_inc>:
/**
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
 8103d64:	b480      	push	{r7}
 8103d66:	b083      	sub	sp, #12
 8103d68:	af00      	add	r7, sp, #0
 8103d6a:	6078      	str	r0, [r7, #4]
    tick_irq_flag = 0;
 8103d6c:	4b07      	ldr	r3, [pc, #28]	@ (8103d8c <lv_tick_inc+0x28>)
 8103d6e:	2200      	movs	r2, #0
 8103d70:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 8103d72:	4b07      	ldr	r3, [pc, #28]	@ (8103d90 <lv_tick_inc+0x2c>)
 8103d74:	681a      	ldr	r2, [r3, #0]
 8103d76:	687b      	ldr	r3, [r7, #4]
 8103d78:	4413      	add	r3, r2
 8103d7a:	4a05      	ldr	r2, [pc, #20]	@ (8103d90 <lv_tick_inc+0x2c>)
 8103d7c:	6013      	str	r3, [r2, #0]
}
 8103d7e:	bf00      	nop
 8103d80:	370c      	adds	r7, #12
 8103d82:	46bd      	mov	sp, r7
 8103d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d88:	4770      	bx	lr
 8103d8a:	bf00      	nop
 8103d8c:	100001f0 	.word	0x100001f0
 8103d90:	100001ec 	.word	0x100001ec

08103d94 <memset>:
 8103d94:	4402      	add	r2, r0
 8103d96:	4603      	mov	r3, r0
 8103d98:	4293      	cmp	r3, r2
 8103d9a:	d100      	bne.n	8103d9e <memset+0xa>
 8103d9c:	4770      	bx	lr
 8103d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8103da2:	e7f9      	b.n	8103d98 <memset+0x4>

08103da4 <__libc_init_array>:
 8103da4:	b570      	push	{r4, r5, r6, lr}
 8103da6:	4d0d      	ldr	r5, [pc, #52]	@ (8103ddc <__libc_init_array+0x38>)
 8103da8:	4c0d      	ldr	r4, [pc, #52]	@ (8103de0 <__libc_init_array+0x3c>)
 8103daa:	1b64      	subs	r4, r4, r5
 8103dac:	10a4      	asrs	r4, r4, #2
 8103dae:	2600      	movs	r6, #0
 8103db0:	42a6      	cmp	r6, r4
 8103db2:	d109      	bne.n	8103dc8 <__libc_init_array+0x24>
 8103db4:	4d0b      	ldr	r5, [pc, #44]	@ (8103de4 <__libc_init_array+0x40>)
 8103db6:	4c0c      	ldr	r4, [pc, #48]	@ (8103de8 <__libc_init_array+0x44>)
 8103db8:	f000 f818 	bl	8103dec <_init>
 8103dbc:	1b64      	subs	r4, r4, r5
 8103dbe:	10a4      	asrs	r4, r4, #2
 8103dc0:	2600      	movs	r6, #0
 8103dc2:	42a6      	cmp	r6, r4
 8103dc4:	d105      	bne.n	8103dd2 <__libc_init_array+0x2e>
 8103dc6:	bd70      	pop	{r4, r5, r6, pc}
 8103dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8103dcc:	4798      	blx	r3
 8103dce:	3601      	adds	r6, #1
 8103dd0:	e7ee      	b.n	8103db0 <__libc_init_array+0xc>
 8103dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8103dd6:	4798      	blx	r3
 8103dd8:	3601      	adds	r6, #1
 8103dda:	e7f2      	b.n	8103dc2 <__libc_init_array+0x1e>
 8103ddc:	08103e14 	.word	0x08103e14
 8103de0:	08103e14 	.word	0x08103e14
 8103de4:	08103e14 	.word	0x08103e14
 8103de8:	08103e18 	.word	0x08103e18

08103dec <_init>:
 8103dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103dee:	bf00      	nop
 8103df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103df2:	bc08      	pop	{r3}
 8103df4:	469e      	mov	lr, r3
 8103df6:	4770      	bx	lr

08103df8 <_fini>:
 8103df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103dfa:	bf00      	nop
 8103dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103dfe:	bc08      	pop	{r3}
 8103e00:	469e      	mov	lr, r3
 8103e02:	4770      	bx	lr
