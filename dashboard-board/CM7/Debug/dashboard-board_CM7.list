
dashboard-board_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e4c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080020e4  080020e4  000030e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020f4  080020f4  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  080020f4  080020f4  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020f4  080020f4  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020f4  080020f4  000030f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020f8  080020f8  000030f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  080020fc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  24000010  0800210c  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400009c  0800210c  0000409c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ba1  00000000  00000000  0000403e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001791  00000000  00000000  0000cbdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  0000e370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000595  00000000  00000000  0000eaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037c36  00000000  00000000  0000f08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092b9  00000000  00000000  00046cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001707d3  00000000  00000000  0004ff7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c074f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cf8  00000000  00000000  001c0794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001c248c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080020cc 	.word	0x080020cc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080020cc 	.word	0x080020cc

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b49      	ldr	r3, [pc, #292]	@ (8000404 <SystemInit+0x12c>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a48      	ldr	r2, [pc, #288]	@ (8000404 <SystemInit+0x12c>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b45      	ldr	r3, [pc, #276]	@ (8000404 <SystemInit+0x12c>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a44      	ldr	r2, [pc, #272]	@ (8000404 <SystemInit+0x12c>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b43      	ldr	r3, [pc, #268]	@ (8000408 <SystemInit+0x130>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b40      	ldr	r3, [pc, #256]	@ (8000408 <SystemInit+0x130>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a3e      	ldr	r2, [pc, #248]	@ (8000408 <SystemInit+0x130>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b3d      	ldr	r3, [pc, #244]	@ (800040c <SystemInit+0x134>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a3c      	ldr	r2, [pc, #240]	@ (800040c <SystemInit+0x134>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b3a      	ldr	r3, [pc, #232]	@ (800040c <SystemInit+0x134>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b39      	ldr	r3, [pc, #228]	@ (800040c <SystemInit+0x134>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4938      	ldr	r1, [pc, #224]	@ (800040c <SystemInit+0x134>)
 800032c:	4b38      	ldr	r3, [pc, #224]	@ (8000410 <SystemInit+0x138>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b35      	ldr	r3, [pc, #212]	@ (8000408 <SystemInit+0x130>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b32      	ldr	r3, [pc, #200]	@ (8000408 <SystemInit+0x130>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a30      	ldr	r2, [pc, #192]	@ (8000408 <SystemInit+0x130>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b2f      	ldr	r3, [pc, #188]	@ (800040c <SystemInit+0x134>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b2d      	ldr	r3, [pc, #180]	@ (800040c <SystemInit+0x134>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b2c      	ldr	r3, [pc, #176]	@ (800040c <SystemInit+0x134>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b2a      	ldr	r3, [pc, #168]	@ (800040c <SystemInit+0x134>)
 8000362:	4a2c      	ldr	r2, [pc, #176]	@ (8000414 <SystemInit+0x13c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b29      	ldr	r3, [pc, #164]	@ (800040c <SystemInit+0x134>)
 8000368:	4a2b      	ldr	r2, [pc, #172]	@ (8000418 <SystemInit+0x140>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b27      	ldr	r3, [pc, #156]	@ (800040c <SystemInit+0x134>)
 800036e:	4a2b      	ldr	r2, [pc, #172]	@ (800041c <SystemInit+0x144>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <SystemInit+0x134>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b24      	ldr	r3, [pc, #144]	@ (800040c <SystemInit+0x134>)
 800037a:	4a28      	ldr	r2, [pc, #160]	@ (800041c <SystemInit+0x144>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b23      	ldr	r3, [pc, #140]	@ (800040c <SystemInit+0x134>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b21      	ldr	r3, [pc, #132]	@ (800040c <SystemInit+0x134>)
 8000386:	4a25      	ldr	r2, [pc, #148]	@ (800041c <SystemInit+0x144>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b20      	ldr	r3, [pc, #128]	@ (800040c <SystemInit+0x134>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <SystemInit+0x134>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a1d      	ldr	r2, [pc, #116]	@ (800040c <SystemInit+0x134>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b1b      	ldr	r3, [pc, #108]	@ (800040c <SystemInit+0x134>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000420 <SystemInit+0x148>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000420 <SystemInit+0x148>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000424 <SystemInit+0x14c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <SystemInit+0x150>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <SystemInit+0x154>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <SystemInit+0x134>)
 80003c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d113      	bne.n	80003f8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003d0:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <SystemInit+0x134>)
 80003d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003d6:	4a0d      	ldr	r2, [pc, #52]	@ (800040c <SystemInit+0x134>)
 80003d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003e0:	4b13      	ldr	r3, [pc, #76]	@ (8000430 <SystemInit+0x158>)
 80003e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <SystemInit+0x134>)
 80003ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003ee:	4a07      	ldr	r2, [pc, #28]	@ (800040c <SystemInit+0x134>)
 80003f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00
 8000408:	52002000 	.word	0x52002000
 800040c:	58024400 	.word	0x58024400
 8000410:	eaf6ed7f 	.word	0xeaf6ed7f
 8000414:	02020200 	.word	0x02020200
 8000418:	01ff0000 	.word	0x01ff0000
 800041c:	01010280 	.word	0x01010280
 8000420:	580000c0 	.word	0x580000c0
 8000424:	5c001000 	.word	0x5c001000
 8000428:	ffff0000 	.word	0xffff0000
 800042c:	51008108 	.word	0x51008108
 8000430:	52004000 	.word	0x52004000

08000434 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_SMPS_1V8_SUPPLIES_EXT) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 = (PWR->CR3 & ~(PWR_CR3_LDOEN)) | PWR_CR3_SMPSLEVEL_0 | PWR_CR3_SMPSEXTHP | PWR_CR3_SMPSEN | PWR_CR3_BYPASS;
 8000438:	4b0a      	ldr	r3, [pc, #40]	@ (8000464 <ExitRun0Mode+0x30>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	f023 031f 	bic.w	r3, r3, #31
 8000440:	4a08      	ldr	r2, [pc, #32]	@ (8000464 <ExitRun0Mode+0x30>)
 8000442:	f043 031d 	orr.w	r3, r3, #29
 8000446:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000448:	bf00      	nop
 800044a:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <ExitRun0Mode+0x30>)
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0f9      	beq.n	800044a <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000456:	bf00      	nop
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	58024800 	.word	0x58024800

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800046e:	4b54      	ldr	r3, [pc, #336]	@ (80005c0 <main+0x158>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000476:	2b00      	cmp	r3, #0
 8000478:	d11b      	bne.n	80004b2 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800047a:	f3bf 8f4f 	dsb	sy
}
 800047e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000480:	f3bf 8f6f 	isb	sy
}
 8000484:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000486:	4b4e      	ldr	r3, [pc, #312]	@ (80005c0 <main+0x158>)
 8000488:	2200      	movs	r2, #0
 800048a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800048e:	f3bf 8f4f 	dsb	sy
}
 8000492:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000494:	f3bf 8f6f 	isb	sy
}
 8000498:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800049a:	4b49      	ldr	r3, [pc, #292]	@ (80005c0 <main+0x158>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a48      	ldr	r2, [pc, #288]	@ (80005c0 <main+0x158>)
 80004a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004a4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004a6:	f3bf 8f4f 	dsb	sy
}
 80004aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004ac:	f3bf 8f6f 	isb	sy
}
 80004b0:	e000      	b.n	80004b4 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004b2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004b4:	4b42      	ldr	r3, [pc, #264]	@ (80005c0 <main+0x158>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d138      	bne.n	8000532 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80004c0:	4b3f      	ldr	r3, [pc, #252]	@ (80005c0 <main+0x158>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80004c8:	f3bf 8f4f 	dsb	sy
}
 80004cc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004ce:	4b3c      	ldr	r3, [pc, #240]	@ (80005c0 <main+0x158>)
 80004d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80004d4:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004d6:	693b      	ldr	r3, [r7, #16]
 80004d8:	0b5b      	lsrs	r3, r3, #13
 80004da:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004de:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004e0:	693b      	ldr	r3, [r7, #16]
 80004e2:	08db      	lsrs	r3, r3, #3
 80004e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004e8:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	015a      	lsls	r2, r3, #5
 80004ee:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80004f2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80004f4:	68ba      	ldr	r2, [r7, #8]
 80004f6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004f8:	4931      	ldr	r1, [pc, #196]	@ (80005c0 <main+0x158>)
 80004fa:	4313      	orrs	r3, r2
 80004fc:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	1e5a      	subs	r2, r3, #1
 8000504:	60ba      	str	r2, [r7, #8]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1ef      	bne.n	80004ea <main+0x82>
    } while(sets-- != 0U);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	1e5a      	subs	r2, r3, #1
 800050e:	60fa      	str	r2, [r7, #12]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d1e5      	bne.n	80004e0 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000514:	f3bf 8f4f 	dsb	sy
}
 8000518:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800051a:	4b29      	ldr	r3, [pc, #164]	@ (80005c0 <main+0x158>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a28      	ldr	r2, [pc, #160]	@ (80005c0 <main+0x158>)
 8000520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000524:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000526:	f3bf 8f4f 	dsb	sy
}
 800052a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800052c:	f3bf 8f6f 	isb	sy
}
 8000530:	e000      	b.n	8000534 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000532:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000534:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000538:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800053a:	bf00      	nop
 800053c:	4b21      	ldr	r3, [pc, #132]	@ (80005c4 <main+0x15c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000544:	2b00      	cmp	r3, #0
 8000546:	d004      	beq.n	8000552 <main+0xea>
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	1e5a      	subs	r2, r3, #1
 800054c:	617a      	str	r2, [r7, #20]
 800054e:	2b00      	cmp	r3, #0
 8000550:	dcf4      	bgt.n	800053c <main+0xd4>
  if ( timeout < 0 )
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	2b00      	cmp	r3, #0
 8000556:	da01      	bge.n	800055c <main+0xf4>
  {
  Error_Handler();
 8000558:	f000 f8b0 	bl	80006bc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055c:	f000 f992 	bl	8000884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f832 	bl	80005c8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000564:	4b17      	ldr	r3, [pc, #92]	@ (80005c4 <main+0x15c>)
 8000566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800056a:	4a16      	ldr	r2, [pc, #88]	@ (80005c4 <main+0x15c>)
 800056c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000570:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000574:	4b13      	ldr	r3, [pc, #76]	@ (80005c4 <main+0x15c>)
 8000576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800057a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000582:	2000      	movs	r0, #0
 8000584:	f000 fb2c 	bl	8000be0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000588:	2100      	movs	r1, #0
 800058a:	2000      	movs	r0, #0
 800058c:	f000 fb42 	bl	8000c14 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000590:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000594:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000596:	bf00      	nop
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <main+0x15c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d104      	bne.n	80005ae <main+0x146>
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	1e5a      	subs	r2, r3, #1
 80005a8:	617a      	str	r2, [r7, #20]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	dcf4      	bgt.n	8000598 <main+0x130>
if ( timeout < 0 )
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	da01      	bge.n	80005b8 <main+0x150>
{
Error_Handler();
 80005b4:	f000 f882 	bl	80006bc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_MDMA_Init();
 80005b8:	f000 f886 	bl	80006c8 <MX_MDMA_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <main+0x154>
 80005c0:	e000ed00 	.word	0xe000ed00
 80005c4:	58024400 	.word	0x58024400

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b09c      	sub	sp, #112	@ 0x70
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005d2:	224c      	movs	r2, #76	@ 0x4c
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fd4c 	bl	8002074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2220      	movs	r2, #32
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 fd46 	bl	8002074 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_SMPS_1V8_SUPPLIES_EXT);
 80005e8:	201d      	movs	r0, #29
 80005ea:	f000 fd5f 	bl	80010ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80005ee:	2300      	movs	r3, #0
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	4b30      	ldr	r3, [pc, #192]	@ (80006b4 <SystemClock_Config+0xec>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	4a2f      	ldr	r2, [pc, #188]	@ (80006b4 <SystemClock_Config+0xec>)
 80005f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005fc:	6193      	str	r3, [r2, #24]
 80005fe:	4b2d      	ldr	r3, [pc, #180]	@ (80006b4 <SystemClock_Config+0xec>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	4b2b      	ldr	r3, [pc, #172]	@ (80006b8 <SystemClock_Config+0xf0>)
 800060a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800060c:	4a2a      	ldr	r2, [pc, #168]	@ (80006b8 <SystemClock_Config+0xf0>)
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000614:	4b28      	ldr	r3, [pc, #160]	@ (80006b8 <SystemClock_Config+0xf0>)
 8000616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000620:	bf00      	nop
 8000622:	4b24      	ldr	r3, [pc, #144]	@ (80006b4 <SystemClock_Config+0xec>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800062a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800062e:	d1f8      	bne.n	8000622 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000634:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000638:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	2302      	movs	r3, #2
 8000640:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000642:	2302      	movs	r3, #2
 8000644:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000646:	2340      	movs	r3, #64	@ 0x40
 8000648:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800064a:	2302      	movs	r3, #2
 800064c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800064e:	2304      	movs	r3, #4
 8000650:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000652:	2304      	movs	r3, #4
 8000654:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000656:	230c      	movs	r3, #12
 8000658:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800065a:	2300      	movs	r3, #0
 800065c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fd7a 	bl	8001160 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000672:	f000 f823 	bl	80006bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	233f      	movs	r3, #63	@ 0x3f
 8000678:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2303      	movs	r3, #3
 800067c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000682:	2308      	movs	r3, #8
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000686:	2340      	movs	r3, #64	@ 0x40
 8000688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800068a:	2340      	movs	r3, #64	@ 0x40
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800068e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000692:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000694:	2340      	movs	r3, #64	@ 0x40
 8000696:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2102      	movs	r1, #2
 800069c:	4618      	mov	r0, r3
 800069e:	f001 f9b9 	bl	8001a14 <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80006a8:	f000 f808 	bl	80006bc <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3770      	adds	r7, #112	@ 0x70
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	58024800 	.word	0x58024800
 80006b8:	58000400 	.word	0x58000400

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
}
 80006c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <Error_Handler+0x8>

080006c8 <MX_MDMA_Init>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel10_sw_0
  */
void MX_MDMA_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 80006ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000778 <MX_MDMA_Init+0xb0>)
 80006d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006d4:	4a28      	ldr	r2, [pc, #160]	@ (8000778 <MX_MDMA_Init+0xb0>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80006de:	4b26      	ldr	r3, [pc, #152]	@ (8000778 <MX_MDMA_Init+0xb0>)
 80006e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel10 */
  /* Configure MDMA request hmdma_mdma_channel10_sw_0 on MDMA_Channel10 */
  hmdma_mdma_channel10_sw_0.Instance = MDMA_Channel10;
 80006ec:	4b23      	ldr	r3, [pc, #140]	@ (800077c <MX_MDMA_Init+0xb4>)
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <MX_MDMA_Init+0xb8>)
 80006f0:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel10_sw_0.Init.Request = MDMA_REQUEST_SW;
 80006f2:	4b22      	ldr	r3, [pc, #136]	@ (800077c <MX_MDMA_Init+0xb4>)
 80006f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006f8:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel10_sw_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 80006fa:	4b20      	ldr	r3, [pc, #128]	@ (800077c <MX_MDMA_Init+0xb4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel10_sw_0.Init.Priority = MDMA_PRIORITY_HIGH;
 8000700:	4b1e      	ldr	r3, [pc, #120]	@ (800077c <MX_MDMA_Init+0xb4>)
 8000702:	2280      	movs	r2, #128	@ 0x80
 8000704:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel10_sw_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000706:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <MX_MDMA_Init+0xb4>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel10_sw_0.Init.SourceInc = MDMA_SRC_INC_WORD;
 800070c:	4b1b      	ldr	r3, [pc, #108]	@ (800077c <MX_MDMA_Init+0xb4>)
 800070e:	f240 2202 	movw	r2, #514	@ 0x202
 8000712:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel10_sw_0.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8000714:	4b19      	ldr	r3, [pc, #100]	@ (800077c <MX_MDMA_Init+0xb4>)
 8000716:	f640 0208 	movw	r2, #2056	@ 0x808
 800071a:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel10_sw_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800071c:	4b17      	ldr	r3, [pc, #92]	@ (800077c <MX_MDMA_Init+0xb4>)
 800071e:	2220      	movs	r2, #32
 8000720:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel10_sw_0.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8000722:	4b16      	ldr	r3, [pc, #88]	@ (800077c <MX_MDMA_Init+0xb4>)
 8000724:	2280      	movs	r2, #128	@ 0x80
 8000726:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel10_sw_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_MDMA_Init+0xb4>)
 800072a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800072e:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma_mdma_channel10_sw_0.Init.BufferTransferLength = 128;
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_MDMA_Init+0xb4>)
 8000732:	2280      	movs	r2, #128	@ 0x80
 8000734:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma_mdma_channel10_sw_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_MDMA_Init+0xb4>)
 8000738:	2200      	movs	r2, #0
 800073a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdma_mdma_channel10_sw_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_MDMA_Init+0xb4>)
 800073e:	2200      	movs	r2, #0
 8000740:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma_mdma_channel10_sw_0.Init.SourceBlockAddressOffset = 0;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_MDMA_Init+0xb4>)
 8000744:	2200      	movs	r2, #0
 8000746:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdma_mdma_channel10_sw_0.Init.DestBlockAddressOffset = 0;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_MDMA_Init+0xb4>)
 800074a:	2200      	movs	r2, #0
 800074c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel10_sw_0) != HAL_OK)
 800074e:	480b      	ldr	r0, [pc, #44]	@ (800077c <MX_MDMA_Init+0xb4>)
 8000750:	f000 fa74 	bl	8000c3c <HAL_MDMA_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_MDMA_Init+0x96>
  {
    Error_Handler();
 800075a:	f7ff ffaf 	bl	80006bc <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	207a      	movs	r0, #122	@ 0x7a
 8000764:	f000 fa07 	bl	8000b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000768:	207a      	movs	r0, #122	@ 0x7a
 800076a:	f000 fa1e 	bl	8000baa <HAL_NVIC_EnableIRQ>

}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	58024400 	.word	0x58024400
 800077c:	2400002c 	.word	0x2400002c
 8000780:	520002c0 	.word	0x520002c0

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <HAL_MspInit+0x30>)
 800078c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000790:	4a08      	ldr	r2, [pc, #32]	@ (80007b4 <HAL_MspInit+0x30>)
 8000792:	f043 0302 	orr.w	r3, r3, #2
 8000796:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <HAL_MspInit+0x30>)
 800079c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007a0:	f003 0302 	and.w	r3, r3, #2
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	58024400 	.word	0x58024400

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <NMI_Handler+0x4>

080007c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <MemManage_Handler+0x4>

080007d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <BusFault_Handler+0x4>

080007d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <UsageFault_Handler+0x4>

080007e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080e:	f000 f8ab 	bl	8000968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel10_sw_0);
 800081c:	4802      	ldr	r0, [pc, #8]	@ (8000828 <MDMA_IRQHandler+0x10>)
 800081e:	f000 fa59 	bl	8000cd4 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2400002c 	.word	0x2400002c

0800082c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800082c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000868 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000830:	f7ff fe00 	bl	8000434 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000834:	f7ff fd50 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000838:	480c      	ldr	r0, [pc, #48]	@ (800086c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800083a:	490d      	ldr	r1, [pc, #52]	@ (8000870 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800083c:	4a0d      	ldr	r2, [pc, #52]	@ (8000874 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000840:	e002      	b.n	8000848 <LoopCopyDataInit>

08000842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000846:	3304      	adds	r3, #4

08000848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800084c:	d3f9      	bcc.n	8000842 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084e:	4a0a      	ldr	r2, [pc, #40]	@ (8000878 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000850:	4c0a      	ldr	r4, [pc, #40]	@ (800087c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000854:	e001      	b.n	800085a <LoopFillZerobss>

08000856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000858:	3204      	adds	r2, #4

0800085a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800085c:	d3fb      	bcc.n	8000856 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800085e:	f001 fc11 	bl	8002084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000862:	f7ff fe01 	bl	8000468 <main>
  bx  lr
 8000866:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000868:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800086c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000870:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000874:	080020fc 	.word	0x080020fc
  ldr r2, =_sbss
 8000878:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800087c:	2400009c 	.word	0x2400009c

08000880 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000880:	e7fe      	b.n	8000880 <ADC3_IRQHandler>
	...

08000884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800088a:	2003      	movs	r0, #3
 800088c:	f000 f968 	bl	8000b60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000890:	f001 fa76 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8000894:	4602      	mov	r2, r0
 8000896:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <HAL_Init+0x68>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	0a1b      	lsrs	r3, r3, #8
 800089c:	f003 030f 	and.w	r3, r3, #15
 80008a0:	4913      	ldr	r1, [pc, #76]	@ (80008f0 <HAL_Init+0x6c>)
 80008a2:	5ccb      	ldrb	r3, [r1, r3]
 80008a4:	f003 031f 	and.w	r3, r3, #31
 80008a8:	fa22 f303 	lsr.w	r3, r2, r3
 80008ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <HAL_Init+0x68>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	f003 030f 	and.w	r3, r3, #15
 80008b6:	4a0e      	ldr	r2, [pc, #56]	@ (80008f0 <HAL_Init+0x6c>)
 80008b8:	5cd3      	ldrb	r3, [r2, r3]
 80008ba:	f003 031f 	and.w	r3, r3, #31
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	fa22 f303 	lsr.w	r3, r2, r3
 80008c4:	4a0b      	ldr	r2, [pc, #44]	@ (80008f4 <HAL_Init+0x70>)
 80008c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008c8:	4a0b      	ldr	r2, [pc, #44]	@ (80008f8 <HAL_Init+0x74>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ce:	2000      	movs	r0, #0
 80008d0:	f000 f814 	bl	80008fc <HAL_InitTick>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e002      	b.n	80008e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008de:	f7ff ff51 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	58024400 	.word	0x58024400
 80008f0:	080020e4 	.word	0x080020e4
 80008f4:	24000004 	.word	0x24000004
 80008f8:	24000000 	.word	0x24000000

080008fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000904:	4b15      	ldr	r3, [pc, #84]	@ (800095c <HAL_InitTick+0x60>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d101      	bne.n	8000910 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800090c:	2301      	movs	r3, #1
 800090e:	e021      	b.n	8000954 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000910:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <HAL_InitTick+0x64>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b11      	ldr	r3, [pc, #68]	@ (800095c <HAL_InitTick+0x60>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800091e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000922:	fbb2 f3f3 	udiv	r3, r2, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f94d 	bl	8000bc6 <HAL_SYSTICK_Config>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	e00e      	b.n	8000954 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b0f      	cmp	r3, #15
 800093a:	d80a      	bhi.n	8000952 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093c:	2200      	movs	r2, #0
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	f000 f917 	bl	8000b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000948:	4a06      	ldr	r2, [pc, #24]	@ (8000964 <HAL_InitTick+0x68>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800094e:	2300      	movs	r3, #0
 8000950:	e000      	b.n	8000954 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	2400000c 	.word	0x2400000c
 8000960:	24000000 	.word	0x24000000
 8000964:	24000008 	.word	0x24000008

08000968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <HAL_IncTick+0x20>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <HAL_IncTick+0x24>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a04      	ldr	r2, [pc, #16]	@ (800098c <HAL_IncTick+0x24>)
 800097a:	6013      	str	r3, [r2, #0]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	2400000c 	.word	0x2400000c
 800098c:	24000098 	.word	0x24000098

08000990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return uwTick;
 8000994:	4b03      	ldr	r3, [pc, #12]	@ (80009a4 <HAL_GetTick+0x14>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	24000098 	.word	0x24000098

080009a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80009ac:	4b03      	ldr	r3, [pc, #12]	@ (80009bc <HAL_GetREVID+0x14>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	0c1b      	lsrs	r3, r3, #16
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	5c001000 	.word	0x5c001000

080009c0 <__NVIC_SetPriorityGrouping>:
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a00 <__NVIC_SetPriorityGrouping+0x40>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009dc:	4013      	ands	r3, r2
 80009de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <__NVIC_SetPriorityGrouping+0x44>)
 80009ea:	4313      	orrs	r3, r2
 80009ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ee:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <__NVIC_SetPriorityGrouping+0x40>)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	60d3      	str	r3, [r2, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00
 8000a04:	05fa0000 	.word	0x05fa0000

08000a08 <__NVIC_GetPriorityGrouping>:
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a0c:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <__NVIC_GetPriorityGrouping+0x18>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	0a1b      	lsrs	r3, r3, #8
 8000a12:	f003 0307 	and.w	r3, r3, #7
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_EnableIRQ>:
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	db0b      	blt.n	8000a4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	f003 021f 	and.w	r2, r3, #31
 8000a3c:	4907      	ldr	r1, [pc, #28]	@ (8000a5c <__NVIC_EnableIRQ+0x38>)
 8000a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a42:	095b      	lsrs	r3, r3, #5
 8000a44:	2001      	movs	r0, #1
 8000a46:	fa00 f202 	lsl.w	r2, r0, r2
 8000a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000e100 	.word	0xe000e100

08000a60 <__NVIC_SetPriority>:
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	db0a      	blt.n	8000a8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	490c      	ldr	r1, [pc, #48]	@ (8000aac <__NVIC_SetPriority+0x4c>)
 8000a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a7e:	0112      	lsls	r2, r2, #4
 8000a80:	b2d2      	uxtb	r2, r2
 8000a82:	440b      	add	r3, r1
 8000a84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000a88:	e00a      	b.n	8000aa0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4908      	ldr	r1, [pc, #32]	@ (8000ab0 <__NVIC_SetPriority+0x50>)
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	f003 030f 	and.w	r3, r3, #15
 8000a96:	3b04      	subs	r3, #4
 8000a98:	0112      	lsls	r2, r2, #4
 8000a9a:	b2d2      	uxtb	r2, r2
 8000a9c:	440b      	add	r3, r1
 8000a9e:	761a      	strb	r2, [r3, #24]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000e100 	.word	0xe000e100
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <NVIC_EncodePriority>:
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b089      	sub	sp, #36	@ 0x24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	f1c3 0307 	rsb	r3, r3, #7
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	bf28      	it	cs
 8000ad2:	2304      	movcs	r3, #4
 8000ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	2b06      	cmp	r3, #6
 8000adc:	d902      	bls.n	8000ae4 <NVIC_EncodePriority+0x30>
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3b03      	subs	r3, #3
 8000ae2:	e000      	b.n	8000ae6 <NVIC_EncodePriority+0x32>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43da      	mvns	r2, r3
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	401a      	ands	r2, r3
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000afc:	f04f 31ff 	mov.w	r1, #4294967295
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa01 f303 	lsl.w	r3, r1, r3
 8000b06:	43d9      	mvns	r1, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	4313      	orrs	r3, r2
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3724      	adds	r7, #36	@ 0x24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b2c:	d301      	bcc.n	8000b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e00f      	b.n	8000b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <SysTick_Config+0x40>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3a:	210f      	movs	r1, #15
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	f7ff ff8e 	bl	8000a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b44:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <SysTick_Config+0x40>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4a:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <SysTick_Config+0x40>)
 8000b4c:	2207      	movs	r2, #7
 8000b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	e000e010 	.word	0xe000e010

08000b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ff29 	bl	80009c0 <__NVIC_SetPriorityGrouping>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b84:	f7ff ff40 	bl	8000a08 <__NVIC_GetPriorityGrouping>
 8000b88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff ff90 	bl	8000ab4 <NVIC_EncodePriority>
 8000b94:	4602      	mov	r2, r0
 8000b96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff5f 	bl	8000a60 <__NVIC_SetPriority>
}
 8000ba2:	bf00      	nop
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff33 	bl	8000a24 <__NVIC_EnableIRQ>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffa4 	bl	8000b1c <SysTick_Config>
 8000bd4:	4603      	mov	r3, r0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000be8:	4a08      	ldr	r2, [pc, #32]	@ (8000c0c <HAL_HSEM_FastTake+0x2c>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	3320      	adds	r3, #32
 8000bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf2:	4a07      	ldr	r2, [pc, #28]	@ (8000c10 <HAL_HSEM_FastTake+0x30>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d101      	bne.n	8000bfc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	e000      	b.n	8000bfe <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	58026400 	.word	0x58026400
 8000c10:	80000300 	.word	0x80000300

08000c14 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000c1e:	4906      	ldr	r1, [pc, #24]	@ (8000c38 <HAL_HSEM_Release+0x24>)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	58026400 	.word	0x58026400

08000c3c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c44:	f7ff fea4 	bl	8000990 <HAL_GetTick>
 8000c48:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d101      	bne.n	8000c54 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e03b      	b.n	8000ccc <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2202      	movs	r2, #2
 8000c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	68da      	ldr	r2, [r3, #12]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f022 0201 	bic.w	r2, r2, #1
 8000c72:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8000c74:	e00f      	b.n	8000c96 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8000c76:	f7ff fe8b 	bl	8000990 <HAL_GetTick>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	2b05      	cmp	r3, #5
 8000c82:	d908      	bls.n	8000c96 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2240      	movs	r2, #64	@ 0x40
 8000c88:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e01a      	b.n	8000ccc <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1e8      	bne.n	8000c76 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f000 f969 	bl	8000f7c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000ce0:	4b91      	ldr	r3, [pc, #580]	@ (8000f28 <HAL_MDMA_IRQHandler+0x254>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a91      	ldr	r2, [pc, #580]	@ (8000f2c <HAL_MDMA_IRQHandler+0x258>)
 8000ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cea:	0a9b      	lsrs	r3, r3, #10
 8000cec:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b8e      	ldr	r3, [pc, #568]	@ (8000f30 <HAL_MDMA_IRQHandler+0x25c>)
 8000cf6:	4413      	add	r3, r2
 8000cf8:	099b      	lsrs	r3, r3, #6
 8000cfa:	f003 031f 	and.w	r3, r3, #31
 8000cfe:	2201      	movs	r2, #1
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8000d06:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f000 812d 	beq.w	8000f70 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d054      	beq.n	8000dce <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d04d      	beq.n	8000dce <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f022 0202 	bic.w	r2, r2, #2
 8000d40:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d106      	bne.n	8000d62 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d58:	f043 0201 	orr.w	r2, r3, #1
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	669a      	str	r2, [r3, #104]	@ 0x68
 8000d60:	e005      	b.n	8000d6e <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d66:	f043 0202 	orr.w	r2, r3, #2
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d005      	beq.n	8000d84 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d7c:	f043 0204 	orr.w	r2, r3, #4
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d005      	beq.n	8000d9a <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000d92:	f043 0208 	orr.w	r2, r3, #8
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d005      	beq.n	8000db0 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000da8:	f043 0210 	orr.w	r2, r3, #16
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d005      	beq.n	8000dc6 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000dbe:	f043 0220 	orr.w	r2, r3, #32
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0310 	and.w	r3, r3, #16
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d012      	beq.n	8000e02 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	f003 0320 	and.w	r3, r3, #32
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00b      	beq.n	8000e02 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2210      	movs	r2, #16
 8000df0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0308 	and.w	r3, r3, #8
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d012      	beq.n	8000e36 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	f003 0310 	and.w	r3, r3, #16
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00b      	beq.n	8000e36 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2208      	movs	r2, #8
 8000e24:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d012      	beq.n	8000e6a <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	f003 0308 	and.w	r3, r3, #8
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00b      	beq.n	8000e6a <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2204      	movs	r2, #4
 8000e58:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d039      	beq.n	8000eec <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	f003 0304 	and.w	r3, r3, #4
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d032      	beq.n	8000eec <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	68da      	ldr	r2, [r3, #12]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8000e94:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d110      	bne.n	8000ec4 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2201      	movs	r2, #1
 8000eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d05c      	beq.n	8000f74 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	4798      	blx	r3
        }
        return;
 8000ec2:	e057      	b.n	8000f74 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2202      	movs	r2, #2
 8000eca:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d040      	beq.n	8000f76 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	68da      	ldr	r2, [r3, #12]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 0201 	bic.w	r2, r2, #1
 8000f0a:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d30d      	bcc.n	8000f34 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f2      	bne.n	8000f0c <HAL_MDMA_IRQHandler+0x238>
 8000f26:	e006      	b.n	8000f36 <HAL_MDMA_IRQHandler+0x262>
 8000f28:	24000000 	.word	0x24000000
 8000f2c:	1b4e81b5 	.word	0x1b4e81b5
 8000f30:	adffffc0 	.word	0xadffffc0
        break;
 8000f34:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d004      	beq.n	8000f56 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2203      	movs	r2, #3
 8000f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8000f54:	e003      	b.n	8000f5e <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d007      	beq.n	8000f76 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	4798      	blx	r3
 8000f6e:	e002      	b.n	8000f76 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8000f70:	bf00      	nop
 8000f72:	e000      	b.n	8000f76 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8000f74:	bf00      	nop
    }
  }
}
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68d9      	ldr	r1, [r3, #12]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	691a      	ldr	r2, [r3, #16]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	430a      	orrs	r2, r1
 8000f92:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	695a      	ldr	r2, [r3, #20]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8000fa2:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8000fae:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fb4:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8000fba:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8000fc4:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8000fd0:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8000fd2:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fdc:	d107      	bne.n	8000fee <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	691a      	ldr	r2, [r3, #16]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8000fec:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	da11      	bge.n	8001022 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	695a      	ldr	r2, [r3, #20]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800100c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001012:	425b      	negs	r3, r3
 8001014:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	b292      	uxth	r2, r2
 800101e:	621a      	str	r2, [r3, #32]
 8001020:	e006      	b.n	8001030 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001026:	461a      	mov	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	b292      	uxth	r2, r2
 800102e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001034:	2b00      	cmp	r3, #0
 8001036:	da15      	bge.n	8001064 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	695a      	ldr	r2, [r3, #20]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001046:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800104c:	425b      	negs	r3, r3
 800104e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6a19      	ldr	r1, [r3, #32]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	041a      	lsls	r2, r3, #16
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	430a      	orrs	r2, r1
 8001060:	621a      	str	r2, [r3, #32]
 8001062:	e009      	b.n	8001078 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6a19      	ldr	r1, [r3, #32]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800106e:	041a      	lsls	r2, r3, #16
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	430a      	orrs	r2, r1
 8001076:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001080:	d006      	beq.n	8001090 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	629a      	str	r2, [r3, #40]	@ 0x28
 800108e:	e003      	b.n	8001098 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2200      	movs	r2, #0
 8001096:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2200      	movs	r2, #0
 800109e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80010b4:	4b29      	ldr	r3, [pc, #164]	@ (800115c <HAL_PWREx_ConfigSupply+0xb0>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	2b06      	cmp	r3, #6
 80010be:	d00a      	beq.n	80010d6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80010c0:	4b26      	ldr	r3, [pc, #152]	@ (800115c <HAL_PWREx_ConfigSupply+0xb0>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d001      	beq.n	80010d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e040      	b.n	8001154 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e03e      	b.n	8001154 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80010d6:	4b21      	ldr	r3, [pc, #132]	@ (800115c <HAL_PWREx_ConfigSupply+0xb0>)
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80010de:	491f      	ldr	r1, [pc, #124]	@ (800115c <HAL_PWREx_ConfigSupply+0xb0>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80010e6:	f7ff fc53 	bl	8000990 <HAL_GetTick>
 80010ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010ec:	e009      	b.n	8001102 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80010ee:	f7ff fc4f 	bl	8000990 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010fc:	d901      	bls.n	8001102 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e028      	b.n	8001154 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001102:	4b16      	ldr	r3, [pc, #88]	@ (800115c <HAL_PWREx_ConfigSupply+0xb0>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800110a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800110e:	d1ee      	bne.n	80010ee <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b1e      	cmp	r3, #30
 8001114:	d008      	beq.n	8001128 <HAL_PWREx_ConfigSupply+0x7c>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b2e      	cmp	r3, #46	@ 0x2e
 800111a:	d005      	beq.n	8001128 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b1d      	cmp	r3, #29
 8001120:	d002      	beq.n	8001128 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b2d      	cmp	r3, #45	@ 0x2d
 8001126:	d114      	bne.n	8001152 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001128:	f7ff fc32 	bl	8000990 <HAL_GetTick>
 800112c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800112e:	e009      	b.n	8001144 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001130:	f7ff fc2e 	bl	8000990 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800113e:	d901      	bls.n	8001144 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e007      	b.n	8001154 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <HAL_PWREx_ConfigSupply+0xb0>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800114c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001150:	d1ee      	bne.n	8001130 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	58024800 	.word	0x58024800

08001160 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	@ 0x30
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d102      	bne.n	8001174 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	f000 bc48 	b.w	8001a04 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 8088 	beq.w	8001292 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001182:	4b99      	ldr	r3, [pc, #612]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800118c:	4b96      	ldr	r3, [pc, #600]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 800118e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001190:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001194:	2b10      	cmp	r3, #16
 8001196:	d007      	beq.n	80011a8 <HAL_RCC_OscConfig+0x48>
 8001198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800119a:	2b18      	cmp	r3, #24
 800119c:	d111      	bne.n	80011c2 <HAL_RCC_OscConfig+0x62>
 800119e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d10c      	bne.n	80011c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a8:	4b8f      	ldr	r3, [pc, #572]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d06d      	beq.n	8001290 <HAL_RCC_OscConfig+0x130>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d169      	bne.n	8001290 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	f000 bc21 	b.w	8001a04 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011ca:	d106      	bne.n	80011da <HAL_RCC_OscConfig+0x7a>
 80011cc:	4b86      	ldr	r3, [pc, #536]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a85      	ldr	r2, [pc, #532]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 80011d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	e02e      	b.n	8001238 <HAL_RCC_OscConfig+0xd8>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0x9c>
 80011e2:	4b81      	ldr	r3, [pc, #516]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a80      	ldr	r2, [pc, #512]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 80011e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	4b7e      	ldr	r3, [pc, #504]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a7d      	ldr	r2, [pc, #500]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 80011f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e01d      	b.n	8001238 <HAL_RCC_OscConfig+0xd8>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001204:	d10c      	bne.n	8001220 <HAL_RCC_OscConfig+0xc0>
 8001206:	4b78      	ldr	r3, [pc, #480]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a77      	ldr	r2, [pc, #476]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 800120c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	4b75      	ldr	r3, [pc, #468]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a74      	ldr	r2, [pc, #464]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 8001218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e00b      	b.n	8001238 <HAL_RCC_OscConfig+0xd8>
 8001220:	4b71      	ldr	r3, [pc, #452]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a70      	ldr	r2, [pc, #448]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 8001226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b6e      	ldr	r3, [pc, #440]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a6d      	ldr	r2, [pc, #436]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 8001232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d013      	beq.n	8001268 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001240:	f7ff fba6 	bl	8000990 <HAL_GetTick>
 8001244:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001248:	f7ff fba2 	bl	8000990 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b64      	cmp	r3, #100	@ 0x64
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e3d4      	b.n	8001a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800125a:	4b63      	ldr	r3, [pc, #396]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f0      	beq.n	8001248 <HAL_RCC_OscConfig+0xe8>
 8001266:	e014      	b.n	8001292 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001268:	f7ff fb92 	bl	8000990 <HAL_GetTick>
 800126c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001270:	f7ff fb8e 	bl	8000990 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	@ 0x64
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e3c0      	b.n	8001a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001282:	4b59      	ldr	r3, [pc, #356]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x110>
 800128e:	e000      	b.n	8001292 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 80ca 	beq.w	8001434 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012a0:	4b51      	ldr	r3, [pc, #324]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80012a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012aa:	4b4f      	ldr	r3, [pc, #316]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 80012ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80012b0:	6a3b      	ldr	r3, [r7, #32]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d007      	beq.n	80012c6 <HAL_RCC_OscConfig+0x166>
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	2b18      	cmp	r3, #24
 80012ba:	d156      	bne.n	800136a <HAL_RCC_OscConfig+0x20a>
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d151      	bne.n	800136a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012c6:	4b48      	ldr	r3, [pc, #288]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <HAL_RCC_OscConfig+0x17e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e392      	b.n	8001a04 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012de:	4b42      	ldr	r3, [pc, #264]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 0219 	bic.w	r2, r3, #25
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	493f      	ldr	r1, [pc, #252]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f0:	f7ff fb4e 	bl	8000990 <HAL_GetTick>
 80012f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f8:	f7ff fb4a 	bl	8000990 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e37c      	b.n	8001a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800130a:	4b37      	ldr	r3, [pc, #220]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001316:	f7ff fb47 	bl	80009a8 <HAL_GetREVID>
 800131a:	4603      	mov	r3, r0
 800131c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001320:	4293      	cmp	r3, r2
 8001322:	d817      	bhi.n	8001354 <HAL_RCC_OscConfig+0x1f4>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	2b40      	cmp	r3, #64	@ 0x40
 800132a:	d108      	bne.n	800133e <HAL_RCC_OscConfig+0x1de>
 800132c:	4b2e      	ldr	r3, [pc, #184]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001334:	4a2c      	ldr	r2, [pc, #176]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 8001336:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800133a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800133c:	e07a      	b.n	8001434 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133e:	4b2a      	ldr	r3, [pc, #168]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	031b      	lsls	r3, r3, #12
 800134c:	4926      	ldr	r1, [pc, #152]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 800134e:	4313      	orrs	r3, r2
 8001350:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001352:	e06f      	b.n	8001434 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001354:	4b24      	ldr	r3, [pc, #144]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	061b      	lsls	r3, r3, #24
 8001362:	4921      	ldr	r1, [pc, #132]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 8001364:	4313      	orrs	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001368:	e064      	b.n	8001434 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d047      	beq.n	8001402 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001372:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 0219 	bic.w	r2, r3, #25
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	491a      	ldr	r1, [pc, #104]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 8001380:	4313      	orrs	r3, r2
 8001382:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001384:	f7ff fb04 	bl	8000990 <HAL_GetTick>
 8001388:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800138c:	f7ff fb00 	bl	8000990 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e332      	b.n	8001a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800139e:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013aa:	f7ff fafd 	bl	80009a8 <HAL_GetREVID>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d819      	bhi.n	80013ec <HAL_RCC_OscConfig+0x28c>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	2b40      	cmp	r3, #64	@ 0x40
 80013be:	d108      	bne.n	80013d2 <HAL_RCC_OscConfig+0x272>
 80013c0:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80013c8:	4a07      	ldr	r2, [pc, #28]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 80013ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ce:	6053      	str	r3, [r2, #4]
 80013d0:	e030      	b.n	8001434 <HAL_RCC_OscConfig+0x2d4>
 80013d2:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	031b      	lsls	r3, r3, #12
 80013e0:	4901      	ldr	r1, [pc, #4]	@ (80013e8 <HAL_RCC_OscConfig+0x288>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	604b      	str	r3, [r1, #4]
 80013e6:	e025      	b.n	8001434 <HAL_RCC_OscConfig+0x2d4>
 80013e8:	58024400 	.word	0x58024400
 80013ec:	4b9a      	ldr	r3, [pc, #616]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	061b      	lsls	r3, r3, #24
 80013fa:	4997      	ldr	r1, [pc, #604]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	604b      	str	r3, [r1, #4]
 8001400:	e018      	b.n	8001434 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001402:	4b95      	ldr	r3, [pc, #596]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a94      	ldr	r2, [pc, #592]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 8001408:	f023 0301 	bic.w	r3, r3, #1
 800140c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140e:	f7ff fabf 	bl	8000990 <HAL_GetTick>
 8001412:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001416:	f7ff fabb 	bl	8000990 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e2ed      	b.n	8001a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001428:	4b8b      	ldr	r3, [pc, #556]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f0      	bne.n	8001416 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0310 	and.w	r3, r3, #16
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80a9 	beq.w	8001594 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001442:	4b85      	ldr	r3, [pc, #532]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800144a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800144c:	4b82      	ldr	r3, [pc, #520]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 800144e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001450:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	2b08      	cmp	r3, #8
 8001456:	d007      	beq.n	8001468 <HAL_RCC_OscConfig+0x308>
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	2b18      	cmp	r3, #24
 800145c:	d13a      	bne.n	80014d4 <HAL_RCC_OscConfig+0x374>
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	2b01      	cmp	r3, #1
 8001466:	d135      	bne.n	80014d4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001468:	4b7b      	ldr	r3, [pc, #492]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_RCC_OscConfig+0x320>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	2b80      	cmp	r3, #128	@ 0x80
 800147a:	d001      	beq.n	8001480 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e2c1      	b.n	8001a04 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001480:	f7ff fa92 	bl	80009a8 <HAL_GetREVID>
 8001484:	4603      	mov	r3, r0
 8001486:	f241 0203 	movw	r2, #4099	@ 0x1003
 800148a:	4293      	cmp	r3, r2
 800148c:	d817      	bhi.n	80014be <HAL_RCC_OscConfig+0x35e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	2b20      	cmp	r3, #32
 8001494:	d108      	bne.n	80014a8 <HAL_RCC_OscConfig+0x348>
 8001496:	4b70      	ldr	r3, [pc, #448]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800149e:	4a6e      	ldr	r2, [pc, #440]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 80014a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80014a4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014a6:	e075      	b.n	8001594 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	069b      	lsls	r3, r3, #26
 80014b6:	4968      	ldr	r1, [pc, #416]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014bc:	e06a      	b.n	8001594 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014be:	4b66      	ldr	r3, [pc, #408]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	061b      	lsls	r3, r3, #24
 80014cc:	4962      	ldr	r1, [pc, #392]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014d2:	e05f      	b.n	8001594 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d042      	beq.n	8001562 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80014dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a5d      	ldr	r2, [pc, #372]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 80014e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff fa52 	bl	8000990 <HAL_GetTick>
 80014ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80014f0:	f7ff fa4e 	bl	8000990 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e280      	b.n	8001a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001502:	4b55      	ldr	r3, [pc, #340]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800150e:	f7ff fa4b 	bl	80009a8 <HAL_GetREVID>
 8001512:	4603      	mov	r3, r0
 8001514:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001518:	4293      	cmp	r3, r2
 800151a:	d817      	bhi.n	800154c <HAL_RCC_OscConfig+0x3ec>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	2b20      	cmp	r3, #32
 8001522:	d108      	bne.n	8001536 <HAL_RCC_OscConfig+0x3d6>
 8001524:	4b4c      	ldr	r3, [pc, #304]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800152c:	4a4a      	ldr	r2, [pc, #296]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 800152e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001532:	6053      	str	r3, [r2, #4]
 8001534:	e02e      	b.n	8001594 <HAL_RCC_OscConfig+0x434>
 8001536:	4b48      	ldr	r3, [pc, #288]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	069b      	lsls	r3, r3, #26
 8001544:	4944      	ldr	r1, [pc, #272]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 8001546:	4313      	orrs	r3, r2
 8001548:	604b      	str	r3, [r1, #4]
 800154a:	e023      	b.n	8001594 <HAL_RCC_OscConfig+0x434>
 800154c:	4b42      	ldr	r3, [pc, #264]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	061b      	lsls	r3, r3, #24
 800155a:	493f      	ldr	r1, [pc, #252]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 800155c:	4313      	orrs	r3, r2
 800155e:	60cb      	str	r3, [r1, #12]
 8001560:	e018      	b.n	8001594 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001562:	4b3d      	ldr	r3, [pc, #244]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a3c      	ldr	r2, [pc, #240]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 8001568:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800156c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156e:	f7ff fa0f 	bl	8000990 <HAL_GetTick>
 8001572:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001576:	f7ff fa0b 	bl	8000990 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e23d      	b.n	8001a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001588:	4b33      	ldr	r3, [pc, #204]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1f0      	bne.n	8001576 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	2b00      	cmp	r3, #0
 800159e:	d036      	beq.n	800160e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d019      	beq.n	80015dc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 80015aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ac:	4a2a      	ldr	r2, [pc, #168]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b4:	f7ff f9ec 	bl	8000990 <HAL_GetTick>
 80015b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015bc:	f7ff f9e8 	bl	8000990 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e21a      	b.n	8001a04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015ce:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 80015d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0f0      	beq.n	80015bc <HAL_RCC_OscConfig+0x45c>
 80015da:	e018      	b.n	800160e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 80015de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 80015e2:	f023 0301 	bic.w	r3, r3, #1
 80015e6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e8:	f7ff f9d2 	bl	8000990 <HAL_GetTick>
 80015ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f0:	f7ff f9ce 	bl	8000990 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e200      	b.n	8001a04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 8001604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0320 	and.w	r3, r3, #32
 8001616:	2b00      	cmp	r3, #0
 8001618:	d039      	beq.n	800168e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d01c      	beq.n	800165c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001622:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a0c      	ldr	r2, [pc, #48]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 8001628:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800162c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800162e:	f7ff f9af 	bl	8000990 <HAL_GetTick>
 8001632:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001636:	f7ff f9ab 	bl	8000990 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e1dd      	b.n	8001a04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001648:	4b03      	ldr	r3, [pc, #12]	@ (8001658 <HAL_RCC_OscConfig+0x4f8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x4d6>
 8001654:	e01b      	b.n	800168e <HAL_RCC_OscConfig+0x52e>
 8001656:	bf00      	nop
 8001658:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800165c:	4b9b      	ldr	r3, [pc, #620]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a9a      	ldr	r2, [pc, #616]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 8001662:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001666:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001668:	f7ff f992 	bl	8000990 <HAL_GetTick>
 800166c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001670:	f7ff f98e 	bl	8000990 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e1c0      	b.n	8001a04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001682:	4b92      	ldr	r3, [pc, #584]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 8081 	beq.w	800179e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800169c:	4b8c      	ldr	r3, [pc, #560]	@ (80018d0 <HAL_RCC_OscConfig+0x770>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a8b      	ldr	r2, [pc, #556]	@ (80018d0 <HAL_RCC_OscConfig+0x770>)
 80016a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016a8:	f7ff f972 	bl	8000990 <HAL_GetTick>
 80016ac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b0:	f7ff f96e 	bl	8000990 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b64      	cmp	r3, #100	@ 0x64
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e1a0      	b.n	8001a04 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016c2:	4b83      	ldr	r3, [pc, #524]	@ (80018d0 <HAL_RCC_OscConfig+0x770>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d106      	bne.n	80016e4 <HAL_RCC_OscConfig+0x584>
 80016d6:	4b7d      	ldr	r3, [pc, #500]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 80016d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016da:	4a7c      	ldr	r2, [pc, #496]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016e2:	e02d      	b.n	8001740 <HAL_RCC_OscConfig+0x5e0>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d10c      	bne.n	8001706 <HAL_RCC_OscConfig+0x5a6>
 80016ec:	4b77      	ldr	r3, [pc, #476]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 80016ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f0:	4a76      	ldr	r2, [pc, #472]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 80016f2:	f023 0301 	bic.w	r3, r3, #1
 80016f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016f8:	4b74      	ldr	r3, [pc, #464]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 80016fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016fc:	4a73      	ldr	r2, [pc, #460]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 80016fe:	f023 0304 	bic.w	r3, r3, #4
 8001702:	6713      	str	r3, [r2, #112]	@ 0x70
 8001704:	e01c      	b.n	8001740 <HAL_RCC_OscConfig+0x5e0>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b05      	cmp	r3, #5
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0x5c8>
 800170e:	4b6f      	ldr	r3, [pc, #444]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001712:	4a6e      	ldr	r2, [pc, #440]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	6713      	str	r3, [r2, #112]	@ 0x70
 800171a:	4b6c      	ldr	r3, [pc, #432]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800171e:	4a6b      	ldr	r2, [pc, #428]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6713      	str	r3, [r2, #112]	@ 0x70
 8001726:	e00b      	b.n	8001740 <HAL_RCC_OscConfig+0x5e0>
 8001728:	4b68      	ldr	r3, [pc, #416]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 800172a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172c:	4a67      	ldr	r2, [pc, #412]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 800172e:	f023 0301 	bic.w	r3, r3, #1
 8001732:	6713      	str	r3, [r2, #112]	@ 0x70
 8001734:	4b65      	ldr	r3, [pc, #404]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 8001736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001738:	4a64      	ldr	r2, [pc, #400]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 800173a:	f023 0304 	bic.w	r3, r3, #4
 800173e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d015      	beq.n	8001774 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001748:	f7ff f922 	bl	8000990 <HAL_GetTick>
 800174c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800174e:	e00a      	b.n	8001766 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001750:	f7ff f91e 	bl	8000990 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e14e      	b.n	8001a04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001766:	4b59      	ldr	r3, [pc, #356]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 8001768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0ee      	beq.n	8001750 <HAL_RCC_OscConfig+0x5f0>
 8001772:	e014      	b.n	800179e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001774:	f7ff f90c 	bl	8000990 <HAL_GetTick>
 8001778:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800177a:	e00a      	b.n	8001792 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177c:	f7ff f908 	bl	8000990 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e138      	b.n	8001a04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001792:	4b4e      	ldr	r3, [pc, #312]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 8001794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1ee      	bne.n	800177c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 812d 	beq.w	8001a02 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80017a8:	4b48      	ldr	r3, [pc, #288]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017b0:	2b18      	cmp	r3, #24
 80017b2:	f000 80bd 	beq.w	8001930 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	f040 809e 	bne.w	80018fc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c0:	4b42      	ldr	r3, [pc, #264]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a41      	ldr	r2, [pc, #260]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 80017c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff f8e0 	bl	8000990 <HAL_GetTick>
 80017d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d4:	f7ff f8dc 	bl	8000990 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e10e      	b.n	8001a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017e6:	4b39      	ldr	r3, [pc, #228]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f2:	4b36      	ldr	r3, [pc, #216]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 80017f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017f6:	4b37      	ldr	r3, [pc, #220]	@ (80018d4 <HAL_RCC_OscConfig+0x774>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	430a      	orrs	r2, r1
 8001806:	4931      	ldr	r1, [pc, #196]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 8001808:	4313      	orrs	r3, r2
 800180a:	628b      	str	r3, [r1, #40]	@ 0x28
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001810:	3b01      	subs	r3, #1
 8001812:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800181a:	3b01      	subs	r3, #1
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	b29b      	uxth	r3, r3
 8001820:	431a      	orrs	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001826:	3b01      	subs	r3, #1
 8001828:	041b      	lsls	r3, r3, #16
 800182a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001834:	3b01      	subs	r3, #1
 8001836:	061b      	lsls	r3, r3, #24
 8001838:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800183c:	4923      	ldr	r1, [pc, #140]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 800183e:	4313      	orrs	r3, r2
 8001840:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001842:	4b22      	ldr	r3, [pc, #136]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 8001844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001846:	4a21      	ldr	r2, [pc, #132]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800184e:	4b1f      	ldr	r3, [pc, #124]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 8001850:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001852:	4b21      	ldr	r3, [pc, #132]	@ (80018d8 <HAL_RCC_OscConfig+0x778>)
 8001854:	4013      	ands	r3, r2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800185a:	00d2      	lsls	r2, r2, #3
 800185c:	491b      	ldr	r1, [pc, #108]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 800185e:	4313      	orrs	r3, r2
 8001860:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001862:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 8001864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001866:	f023 020c 	bic.w	r2, r3, #12
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	4917      	ldr	r1, [pc, #92]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 8001870:	4313      	orrs	r3, r2
 8001872:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001874:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 8001876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001878:	f023 0202 	bic.w	r2, r3, #2
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001880:	4912      	ldr	r1, [pc, #72]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 8001882:	4313      	orrs	r3, r2
 8001884:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001886:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 8001888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188a:	4a10      	ldr	r2, [pc, #64]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 800188c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001890:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001892:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 8001894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001896:	4a0d      	ldr	r2, [pc, #52]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 8001898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800189c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800189e:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 80018a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a2:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 80018a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80018aa:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 80018ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ae:	4a07      	ldr	r2, [pc, #28]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b6:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a04      	ldr	r2, [pc, #16]	@ (80018cc <HAL_RCC_OscConfig+0x76c>)
 80018bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c2:	f7ff f865 	bl	8000990 <HAL_GetTick>
 80018c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018c8:	e011      	b.n	80018ee <HAL_RCC_OscConfig+0x78e>
 80018ca:	bf00      	nop
 80018cc:	58024400 	.word	0x58024400
 80018d0:	58024800 	.word	0x58024800
 80018d4:	fffffc0c 	.word	0xfffffc0c
 80018d8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff f858 	bl	8000990 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e08a      	b.n	8001a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018ee:	4b47      	ldr	r3, [pc, #284]	@ (8001a0c <HAL_RCC_OscConfig+0x8ac>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x77c>
 80018fa:	e082      	b.n	8001a02 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fc:	4b43      	ldr	r3, [pc, #268]	@ (8001a0c <HAL_RCC_OscConfig+0x8ac>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a42      	ldr	r2, [pc, #264]	@ (8001a0c <HAL_RCC_OscConfig+0x8ac>)
 8001902:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff f842 	bl	8000990 <HAL_GetTick>
 800190c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001910:	f7ff f83e 	bl	8000990 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e070      	b.n	8001a04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001922:	4b3a      	ldr	r3, [pc, #232]	@ (8001a0c <HAL_RCC_OscConfig+0x8ac>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x7b0>
 800192e:	e068      	b.n	8001a02 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001930:	4b36      	ldr	r3, [pc, #216]	@ (8001a0c <HAL_RCC_OscConfig+0x8ac>)
 8001932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001934:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001936:	4b35      	ldr	r3, [pc, #212]	@ (8001a0c <HAL_RCC_OscConfig+0x8ac>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001940:	2b01      	cmp	r3, #1
 8001942:	d031      	beq.n	80019a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	f003 0203 	and.w	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d12a      	bne.n	80019a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d122      	bne.n	80019a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d11a      	bne.n	80019a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	0a5b      	lsrs	r3, r3, #9
 8001976:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800197e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d111      	bne.n	80019a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	0c1b      	lsrs	r3, r3, #16
 8001988:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001990:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001992:	429a      	cmp	r2, r3
 8001994:	d108      	bne.n	80019a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	0e1b      	lsrs	r3, r3, #24
 800199a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e02b      	b.n	8001a04 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80019ac:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <HAL_RCC_OscConfig+0x8ac>)
 80019ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80019b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d01f      	beq.n	8001a02 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80019c2:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <HAL_RCC_OscConfig+0x8ac>)
 80019c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c6:	4a11      	ldr	r2, [pc, #68]	@ (8001a0c <HAL_RCC_OscConfig+0x8ac>)
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019ce:	f7fe ffdf 	bl	8000990 <HAL_GetTick>
 80019d2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80019d4:	bf00      	nop
 80019d6:	f7fe ffdb 	bl	8000990 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019de:	4293      	cmp	r3, r2
 80019e0:	d0f9      	beq.n	80019d6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80019e2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <HAL_RCC_OscConfig+0x8ac>)
 80019e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a10 <HAL_RCC_OscConfig+0x8b0>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019ee:	00d2      	lsls	r2, r2, #3
 80019f0:	4906      	ldr	r1, [pc, #24]	@ (8001a0c <HAL_RCC_OscConfig+0x8ac>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80019f6:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <HAL_RCC_OscConfig+0x8ac>)
 80019f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019fa:	4a04      	ldr	r2, [pc, #16]	@ (8001a0c <HAL_RCC_OscConfig+0x8ac>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3730      	adds	r7, #48	@ 0x30
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	58024400 	.word	0x58024400
 8001a10:	ffff0007 	.word	0xffff0007

08001a14 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e19c      	b.n	8001d62 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a28:	4b8a      	ldr	r3, [pc, #552]	@ (8001c54 <HAL_RCC_ClockConfig+0x240>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d910      	bls.n	8001a58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a36:	4b87      	ldr	r3, [pc, #540]	@ (8001c54 <HAL_RCC_ClockConfig+0x240>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 020f 	bic.w	r2, r3, #15
 8001a3e:	4985      	ldr	r1, [pc, #532]	@ (8001c54 <HAL_RCC_ClockConfig+0x240>)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a46:	4b83      	ldr	r3, [pc, #524]	@ (8001c54 <HAL_RCC_ClockConfig+0x240>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d001      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e184      	b.n	8001d62 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d010      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	4b7b      	ldr	r3, [pc, #492]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d908      	bls.n	8001a86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a74:	4b78      	ldr	r3, [pc, #480]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	4975      	ldr	r1, [pc, #468]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d010      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695a      	ldr	r2, [r3, #20]
 8001a96:	4b70      	ldr	r3, [pc, #448]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d908      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001aa2:	4b6d      	ldr	r3, [pc, #436]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	496a      	ldr	r1, [pc, #424]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0310 	and.w	r3, r3, #16
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d010      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699a      	ldr	r2, [r3, #24]
 8001ac4:	4b64      	ldr	r3, [pc, #400]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d908      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ad0:	4b61      	ldr	r3, [pc, #388]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	495e      	ldr	r1, [pc, #376]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0320 	and.w	r3, r3, #32
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d010      	beq.n	8001b10 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69da      	ldr	r2, [r3, #28]
 8001af2:	4b59      	ldr	r3, [pc, #356]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d908      	bls.n	8001b10 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001afe:	4b56      	ldr	r3, [pc, #344]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	4953      	ldr	r1, [pc, #332]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d010      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	4b4d      	ldr	r3, [pc, #308]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 030f 	and.w	r3, r3, #15
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d908      	bls.n	8001b3e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b2c:	4b4a      	ldr	r3, [pc, #296]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f023 020f 	bic.w	r2, r3, #15
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	4947      	ldr	r1, [pc, #284]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d055      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b4a:	4b43      	ldr	r3, [pc, #268]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	4940      	ldr	r1, [pc, #256]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d107      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b64:	4b3c      	ldr	r3, [pc, #240]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d121      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0f6      	b.n	8001d62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d107      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b7c:	4b36      	ldr	r3, [pc, #216]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d115      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0ea      	b.n	8001d62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d107      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b94:	4b30      	ldr	r3, [pc, #192]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d109      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0de      	b.n	8001d62 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0d6      	b.n	8001d62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bb4:	4b28      	ldr	r3, [pc, #160]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	f023 0207 	bic.w	r2, r3, #7
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4925      	ldr	r1, [pc, #148]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bc6:	f7fe fee3 	bl	8000990 <HAL_GetTick>
 8001bca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bcc:	e00a      	b.n	8001be4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bce:	f7fe fedf 	bl	8000990 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e0be      	b.n	8001d62 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d1eb      	bne.n	8001bce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d010      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	4b14      	ldr	r3, [pc, #80]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d208      	bcs.n	8001c24 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c12:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	f023 020f 	bic.w	r2, r3, #15
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	490e      	ldr	r1, [pc, #56]	@ (8001c58 <HAL_RCC_ClockConfig+0x244>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c24:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <HAL_RCC_ClockConfig+0x240>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d214      	bcs.n	8001c5c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <HAL_RCC_ClockConfig+0x240>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 020f 	bic.w	r2, r3, #15
 8001c3a:	4906      	ldr	r1, [pc, #24]	@ (8001c54 <HAL_RCC_ClockConfig+0x240>)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c42:	4b04      	ldr	r3, [pc, #16]	@ (8001c54 <HAL_RCC_ClockConfig+0x240>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e086      	b.n	8001d62 <HAL_RCC_ClockConfig+0x34e>
 8001c54:	52002000 	.word	0x52002000
 8001c58:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d010      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d208      	bcs.n	8001c8a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c78:	4b3c      	ldr	r3, [pc, #240]	@ (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	4939      	ldr	r1, [pc, #228]	@ (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d010      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695a      	ldr	r2, [r3, #20]
 8001c9a:	4b34      	ldr	r3, [pc, #208]	@ (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d208      	bcs.n	8001cb8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ca6:	4b31      	ldr	r3, [pc, #196]	@ (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	492e      	ldr	r1, [pc, #184]	@ (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d010      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699a      	ldr	r2, [r3, #24]
 8001cc8:	4b28      	ldr	r3, [pc, #160]	@ (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d208      	bcs.n	8001ce6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cd4:	4b25      	ldr	r3, [pc, #148]	@ (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	4922      	ldr	r1, [pc, #136]	@ (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d010      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69da      	ldr	r2, [r3, #28]
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d208      	bcs.n	8001d14 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d02:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4917      	ldr	r1, [pc, #92]	@ (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d14:	f000 f834 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b14      	ldr	r3, [pc, #80]	@ (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	0a1b      	lsrs	r3, r3, #8
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	4912      	ldr	r1, [pc, #72]	@ (8001d70 <HAL_RCC_ClockConfig+0x35c>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d30:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d32:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <HAL_RCC_ClockConfig+0x358>)
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	4a0d      	ldr	r2, [pc, #52]	@ (8001d70 <HAL_RCC_ClockConfig+0x35c>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	f003 031f 	and.w	r3, r3, #31
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
 8001d48:	4a0a      	ldr	r2, [pc, #40]	@ (8001d74 <HAL_RCC_ClockConfig+0x360>)
 8001d4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d78 <HAL_RCC_ClockConfig+0x364>)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001d52:	4b0a      	ldr	r3, [pc, #40]	@ (8001d7c <HAL_RCC_ClockConfig+0x368>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fdd0 	bl	80008fc <HAL_InitTick>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	58024400 	.word	0x58024400
 8001d70:	080020e4 	.word	0x080020e4
 8001d74:	24000004 	.word	0x24000004
 8001d78:	24000000 	.word	0x24000000
 8001d7c:	24000008 	.word	0x24000008

08001d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b089      	sub	sp, #36	@ 0x24
 8001d84:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d86:	4bb3      	ldr	r3, [pc, #716]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d8e:	2b18      	cmp	r3, #24
 8001d90:	f200 8155 	bhi.w	800203e <HAL_RCC_GetSysClockFreq+0x2be>
 8001d94:	a201      	add	r2, pc, #4	@ (adr r2, 8001d9c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9a:	bf00      	nop
 8001d9c:	08001e01 	.word	0x08001e01
 8001da0:	0800203f 	.word	0x0800203f
 8001da4:	0800203f 	.word	0x0800203f
 8001da8:	0800203f 	.word	0x0800203f
 8001dac:	0800203f 	.word	0x0800203f
 8001db0:	0800203f 	.word	0x0800203f
 8001db4:	0800203f 	.word	0x0800203f
 8001db8:	0800203f 	.word	0x0800203f
 8001dbc:	08001e27 	.word	0x08001e27
 8001dc0:	0800203f 	.word	0x0800203f
 8001dc4:	0800203f 	.word	0x0800203f
 8001dc8:	0800203f 	.word	0x0800203f
 8001dcc:	0800203f 	.word	0x0800203f
 8001dd0:	0800203f 	.word	0x0800203f
 8001dd4:	0800203f 	.word	0x0800203f
 8001dd8:	0800203f 	.word	0x0800203f
 8001ddc:	08001e2d 	.word	0x08001e2d
 8001de0:	0800203f 	.word	0x0800203f
 8001de4:	0800203f 	.word	0x0800203f
 8001de8:	0800203f 	.word	0x0800203f
 8001dec:	0800203f 	.word	0x0800203f
 8001df0:	0800203f 	.word	0x0800203f
 8001df4:	0800203f 	.word	0x0800203f
 8001df8:	0800203f 	.word	0x0800203f
 8001dfc:	08001e33 	.word	0x08001e33
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e00:	4b94      	ldr	r3, [pc, #592]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d009      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e0c:	4b91      	ldr	r3, [pc, #580]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	08db      	lsrs	r3, r3, #3
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	4a90      	ldr	r2, [pc, #576]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001e1e:	e111      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e20:	4b8d      	ldr	r3, [pc, #564]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e22:	61bb      	str	r3, [r7, #24]
      break;
 8001e24:	e10e      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001e26:	4b8d      	ldr	r3, [pc, #564]	@ (800205c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e28:	61bb      	str	r3, [r7, #24]
      break;
 8001e2a:	e10b      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001e2c:	4b8c      	ldr	r3, [pc, #560]	@ (8002060 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e2e:	61bb      	str	r3, [r7, #24]
      break;
 8001e30:	e108      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e32:	4b88      	ldr	r3, [pc, #544]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001e3c:	4b85      	ldr	r3, [pc, #532]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e46:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e48:	4b82      	ldr	r3, [pc, #520]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001e52:	4b80      	ldr	r3, [pc, #512]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e56:	08db      	lsrs	r3, r3, #3
 8001e58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	fb02 f303 	mul.w	r3, r2, r3
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e6a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80e1 	beq.w	8002038 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	f000 8083 	beq.w	8001f84 <HAL_RCC_GetSysClockFreq+0x204>
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	f200 80a1 	bhi.w	8001fc8 <HAL_RCC_GetSysClockFreq+0x248>
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x114>
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d056      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e92:	e099      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e94:	4b6f      	ldr	r3, [pc, #444]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0320 	and.w	r3, r3, #32
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d02d      	beq.n	8001efc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001ea0:	4b6c      	ldr	r3, [pc, #432]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	08db      	lsrs	r3, r3, #3
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	4a6b      	ldr	r2, [pc, #428]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	ee07 3a90 	vmov	s15, r3
 8001eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eca:	4b62      	ldr	r3, [pc, #392]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ede:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001efa:	e087      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	ee07 3a90 	vmov	s15, r3
 8001f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f06:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002068 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f0e:	4b51      	ldr	r3, [pc, #324]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f16:	ee07 3a90 	vmov	s15, r3
 8001f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f22:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f3e:	e065      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	ee07 3a90 	vmov	s15, r3
 8001f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f4a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800206c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f52:	4b40      	ldr	r3, [pc, #256]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f66:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f82:	e043      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	ee07 3a90 	vmov	s15, r3
 8001f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f8e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002070 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f96:	4b2f      	ldr	r3, [pc, #188]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001faa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fc6:	e021      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	ee07 3a90 	vmov	s15, r3
 8001fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fd2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800206c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fda:	4b1e      	ldr	r3, [pc, #120]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fe2:	ee07 3a90 	vmov	s15, r3
 8001fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fea:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002064 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002006:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800200a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002010:	0a5b      	lsrs	r3, r3, #9
 8002012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002016:	3301      	adds	r3, #1
 8002018:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	ee07 3a90 	vmov	s15, r3
 8002020:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002024:	edd7 6a07 	vldr	s13, [r7, #28]
 8002028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800202c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002030:	ee17 3a90 	vmov	r3, s15
 8002034:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002036:	e005      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
      break;
 800203c:	e002      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800203e:	4b07      	ldr	r3, [pc, #28]	@ (800205c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002040:	61bb      	str	r3, [r7, #24]
      break;
 8002042:	bf00      	nop
  }

  return sysclockfreq;
 8002044:	69bb      	ldr	r3, [r7, #24]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3724      	adds	r7, #36	@ 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	58024400 	.word	0x58024400
 8002058:	03d09000 	.word	0x03d09000
 800205c:	003d0900 	.word	0x003d0900
 8002060:	017d7840 	.word	0x017d7840
 8002064:	46000000 	.word	0x46000000
 8002068:	4c742400 	.word	0x4c742400
 800206c:	4a742400 	.word	0x4a742400
 8002070:	4bbebc20 	.word	0x4bbebc20

08002074 <memset>:
 8002074:	4402      	add	r2, r0
 8002076:	4603      	mov	r3, r0
 8002078:	4293      	cmp	r3, r2
 800207a:	d100      	bne.n	800207e <memset+0xa>
 800207c:	4770      	bx	lr
 800207e:	f803 1b01 	strb.w	r1, [r3], #1
 8002082:	e7f9      	b.n	8002078 <memset+0x4>

08002084 <__libc_init_array>:
 8002084:	b570      	push	{r4, r5, r6, lr}
 8002086:	4d0d      	ldr	r5, [pc, #52]	@ (80020bc <__libc_init_array+0x38>)
 8002088:	4c0d      	ldr	r4, [pc, #52]	@ (80020c0 <__libc_init_array+0x3c>)
 800208a:	1b64      	subs	r4, r4, r5
 800208c:	10a4      	asrs	r4, r4, #2
 800208e:	2600      	movs	r6, #0
 8002090:	42a6      	cmp	r6, r4
 8002092:	d109      	bne.n	80020a8 <__libc_init_array+0x24>
 8002094:	4d0b      	ldr	r5, [pc, #44]	@ (80020c4 <__libc_init_array+0x40>)
 8002096:	4c0c      	ldr	r4, [pc, #48]	@ (80020c8 <__libc_init_array+0x44>)
 8002098:	f000 f818 	bl	80020cc <_init>
 800209c:	1b64      	subs	r4, r4, r5
 800209e:	10a4      	asrs	r4, r4, #2
 80020a0:	2600      	movs	r6, #0
 80020a2:	42a6      	cmp	r6, r4
 80020a4:	d105      	bne.n	80020b2 <__libc_init_array+0x2e>
 80020a6:	bd70      	pop	{r4, r5, r6, pc}
 80020a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020ac:	4798      	blx	r3
 80020ae:	3601      	adds	r6, #1
 80020b0:	e7ee      	b.n	8002090 <__libc_init_array+0xc>
 80020b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80020b6:	4798      	blx	r3
 80020b8:	3601      	adds	r6, #1
 80020ba:	e7f2      	b.n	80020a2 <__libc_init_array+0x1e>
 80020bc:	080020f4 	.word	0x080020f4
 80020c0:	080020f4 	.word	0x080020f4
 80020c4:	080020f4 	.word	0x080020f4
 80020c8:	080020f8 	.word	0x080020f8

080020cc <_init>:
 80020cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ce:	bf00      	nop
 80020d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020d2:	bc08      	pop	{r3}
 80020d4:	469e      	mov	lr, r3
 80020d6:	4770      	bx	lr

080020d8 <_fini>:
 80020d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020da:	bf00      	nop
 80020dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020de:	bc08      	pop	{r3}
 80020e0:	469e      	mov	lr, r3
 80020e2:	4770      	bx	lr
